//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#pragma warning disable 109

namespace Microsoft.Office365.OutlookServices.Extensions
{
    using global::Microsoft.OData.Client;
    using global::Microsoft.OData.Core;

    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Reflection;

    internal class LowerCasePropertyAttribute : System.Attribute
    {
    }

    public interface IEntityBase
    {
		/// <param name="dontSave">true to delay saving until batch is saved; false to save immediately.</param>
        global::System.Threading.Tasks.Task UpdateAsync(bool dontSave = false);
		/// <param name="dontSave">true to delay saving until batch is saved; false to save immediately.</param>
        global::System.Threading.Tasks.Task DeleteAsync(bool dontSave = false);
    }

    internal class RestShallowObjectFetcher  : BaseEntityType
    {
        private string _path;
        internal new DataServiceContextWrapper Context 
        { 
            get
            {
                return (DataServiceContextWrapper)base.Context;
            }
            private set
            {
                base.Context = value;
            }
        }

        internal RestShallowObjectFetcher () {}
        
        internal void Initialize(
            DataServiceContextWrapper context,
            string path)
        {
            Context = context;
            _path = path;
        }

        protected string GetPath(string propertyName)
        {
            return propertyName == null ? this._path : this._path + "/" + propertyName;
        }

        protected System.Uri GetUrl()
        {
            return new Uri(Context.BaseUri.ToString().TrimEnd('/') + "/" + GetPath(null));
        }
    }

    public partial class DataServiceContextWrapper : DataServiceContext
    {
        private object _syncLock = new object();
        private string _accessToken;
        private global::System.Func<global::System.Threading.Tasks.Task<string>> _accessTokenGetter;
        private System.Func<System.Threading.Tasks.Task> _accessTokenSetter;
        private HashSet<EntityBase> _modifiedEntities = new HashSet<EntityBase>();

        private readonly string XClientStringClientTag = string.Format("Office 365 API Tools {0}", "1.1.0612");

        public void UpdateObject(EntityBase entity)
        {
            if (GetEntityDescriptor(entity) != null)
            {
                _modifiedEntities.Add(entity);
                base.UpdateObject(entity);
            }
        }

        private async global::System.Threading.Tasks.Task SetToken()
        {
            var token = await _accessTokenGetter();
            lock(_syncLock)
            {
                _accessToken = token;
            }
        }

        public DataServiceContextWrapper(Uri serviceRoot, global::Microsoft.OData.Client.ODataProtocolVersion maxProtocolVersion, global::System.Func<global::System.Threading.Tasks.Task<string>> accessTokenGetter)
            : base(serviceRoot, maxProtocolVersion)
        {
            _accessTokenGetter = accessTokenGetter;
            _accessTokenSetter = SetToken;
            
            IgnoreMissingProperties = true;

            BuildingRequest += (sender, args) =>
            {
           
                args.Headers.Add("Authorization", "Bearer " + _accessToken);
                args.Headers.Add("X-ClientService-ClientTag", XClientStringClientTag);
            };
        
            Configurations.RequestPipeline.OnEntryStarting((args) =>
            {
                var entity = (EntityBase)args.Entity;

                if ((!entity.ChangedProperties.IsValueCreated || entity.ChangedProperties.Value.Count == 0))
                {
                    args.Entry.Properties = new ODataProperty[0];
                    return;
                }

                if (!_modifiedEntities.Contains(entity))
                {
                    _modifiedEntities.Add(entity);
                }

                IEnumerable<ODataProperty> properties = new ODataProperty[0];

                if (entity.ChangedProperties.IsValueCreated)
                {
                    properties = properties.Concat(args.Entry.Properties.Where(i => entity.ChangedProperties.Value.Contains(i.Name)));
                }

                args.Entry.Properties = properties;
            });

            Configurations.ResponsePipeline.OnEntityMaterialized((args) =>
            {
                var entity = (EntityBase)args.Entity;

                entity.ResetChanges();
            });

            OnCreated();
        }

        partial void OnCreated();

        internal System.Type DefaultResolveTypeInternal(string typeName, string fullNamespace, string languageDependentNamespace)
        {
            return DefaultResolveType(typeName, fullNamespace, languageDependentNamespace);
        }

        internal string DefaultResolveNameInternal(global::System.Type clientType, string fullNamespace, string languageDependentNamespace)
        {
            if (clientType.Namespace.Equals(languageDependentNamespace, global::System.StringComparison.Ordinal))
            {
                return string.Concat(fullNamespace, ".", clientType.Name);
            }

            return string.Empty;
        }

        public async System.Threading.Tasks.Task<TInterface> ExecuteSingleAsync<TSource, TInterface>(DataServiceQuery<TSource> inner)
        {
            try
            {
                await SetToken();
                return await global::System.Threading.Tasks.Task.Factory.FromAsync<TInterface>(
                    inner.BeginExecute,
                    new global::System.Func<global::System.IAsyncResult, TInterface>(i => 
                        global::System.Linq.Enumerable.SingleOrDefault(
                        global::System.Linq.Enumerable.Cast<TInterface>(inner.EndExecute(i)))),
                    global::System.Threading.Tasks.TaskCreationOptions.None);
            }
            catch (Exception ex)
            {
                var newException = ProcessException(ex);

                if (newException != null)
                {
                    throw newException;
                }

                throw;
            }
        }

        public async System.Threading.Tasks.Task<IBatchElementResult[]> ExecuteBatchAsync(params IReadOnlyQueryableSetBase[] queries)
        {
            try
            {
                var requests = (from i in queries select (DataServiceRequest)i.Query).ToArray();

                await SetToken();

                var responses = await global::System.Threading.Tasks.Task.Factory.FromAsync<DataServiceRequest[], DataServiceResponse>(
                    (q, callback, state) => BeginExecuteBatch(callback, state, q), // need to reorder parameters
                    EndExecuteBatch,
                    requests,
                    null);

                var retVal = new IBatchElementResult[queries.Length];

                var index = 0;
                foreach (var response in responses)
                {
                    Type tConcrete = ((IConcreteTypeAccessor)queries[index]).ConcreteType;
                    Type tInterface = ((IConcreteTypeAccessor)queries[index]).ElementType;
                    
                    var pcType = typeof(PagedCollection<,>).MakeGenericType(tInterface, tConcrete);
                    var pcTypeInfo = pcType.GetTypeInfo();
                    var PCCreator = pcTypeInfo.GetDeclaredMethod("Create");

                    // Handle an error response. 
                    // from http://msdn.microsoft.com/en-us/library/dd744838(v=vs.110).aspx
                    if (response.StatusCode > 299 || response.StatusCode < 200)
                    {
                        retVal[index] = new BatchElementResult(ProcessException(response.Error) ?? response.Error);
                    }
                    else
                    {
                        retVal[index] = new BatchElementResult((IPagedCollection)PCCreator.Invoke(null, new object[] { this, response }));
                    }

                    index++;
                }

                return retVal;
            }
            catch (Exception ex)
            {
                var newException = ProcessException(ex);

                if (newException != null)
                {
                    throw newException;
                }

                throw;
            }
        }

        public async System.Threading.Tasks.Task<System.IO.Stream> GetStreamAsync(Uri requestUriTmp)
        {
            using (var client = new System.Net.Http.HttpClient())
            {
                using (var request = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUriTmp))
                {
                    request.Headers.Add("Authorization", "Bearer " + await _accessTokenGetter());
                    request.Headers.Add("Accept", "*/*");
                    request.Headers.Add("Accept-Charset", "UTF-8");
                    request.Headers.Add("X-ClientService-ClientTag", XClientStringClientTag);

                    // Do not dispose the response. If disposed, it will also dispose the
                    // stream we are returning
                    var response = await client.SendAsync(request);
                    if (response.IsSuccessStatusCode)
                    {
                        return await response.Content.ReadAsStreamAsync();
                    }

                    var newException = await ProcessErrorAsync(response);

                    if (newException != null)
                    {
                        throw newException;
                    }

                    response.EnsureSuccessStatusCode();

                    // unreachable
                    return null;
                }
            }
        }

        public async System.Threading.Tasks.Task<DataServiceStreamResponse> GetReadStreamAsync(EntityBase entity, string streamName, string contentType)
        {
            try
            {
                await SetToken();

                if (!string.IsNullOrEmpty(streamName))
                {
                    var resp = await global::System.Threading.Tasks.Task.Factory.FromAsync<object, string, DataServiceRequestArgs, DataServiceStreamResponse>(
                        BeginGetReadStream,
                        EndGetReadStream,
                        entity,
                        streamName,
                        new DataServiceRequestArgs { ContentType = contentType /*, Headers = {todo}*/ },
                        null);
                    return resp;
                }
                else
                {
                    var resp = await global::System.Threading.Tasks.Task.Factory.FromAsync<object, DataServiceRequestArgs, DataServiceStreamResponse>(
                        BeginGetReadStream,
                        EndGetReadStream,
                        entity,
                        new DataServiceRequestArgs { ContentType = contentType /*, Headers = {todo}*/ },
                        null);

                    return resp;
                }

            }
            catch (Exception ex)
            {
                var newException = ProcessException(ex);

                if (newException != null)
                {
                    throw newException;
                }

                throw;
            }
        }

        public async System.Threading.Tasks.Task<IPagedCollection<TInterface>> ExecuteAsync<TSource, TInterface>(DataServiceQuery<TSource> inner) where TSource : TInterface
        {
            try
            {
                await SetToken();
                return await global::System.Threading.Tasks.Task.Factory.FromAsync<
                            IPagedCollection<TInterface>>(inner.BeginExecute,
                            new global::System.Func<global::System.IAsyncResult, IPagedCollection<TInterface>>(
                                r =>
                                {
                                    var innerResult = (QueryOperationResponse<TSource>)inner.EndExecute(r);


                                    return new PagedCollection<TInterface, TSource>(this, innerResult);
                                }
                                ), global::System.Threading.Tasks.TaskCreationOptions.None);
            }
            catch (Exception ex)
            {
                var newException = ProcessException(ex);

                if (newException != null)
                {
                    throw newException;
                }

                throw;
            }
        }

        public new global::System.Threading.Tasks.Task<global::System.Collections.Generic.IEnumerable<T>> ExecuteAsync<T>(
            global::System.Uri uri,
            string httpMethod,
            bool singleResult,
            params OperationParameter[] operationParameters)
        {
            return ExecuteAsyncInternal<T>(uri, httpMethod, singleResult, (System.IO.Stream)null, operationParameters);
        }

        public global::System.Threading.Tasks.Task<global::System.Collections.Generic.IEnumerable<T>> ExecuteAsync<T>(
            global::System.Uri uri,
            string httpMethod,
            bool singleResult,
            System.IO.Stream stream,
            params OperationParameter[] operationParameters)
        {
            return ExecuteAsyncInternal<T>(uri, httpMethod, singleResult, stream ?? new System.IO.MemoryStream(), operationParameters);
        }

        public async global::System.Threading.Tasks.Task<global::System.Collections.Generic.IEnumerable<T>> ExecuteAsyncInternal<T>(
            global::System.Uri uri,
            string httpMethod,
            bool singleResult,
            System.IO.Stream stream,
            params OperationParameter[] operationParameters)
        {
            try
            {
                await SetToken();

                if (stream != null)
                {
                    Configurations.RequestPipeline.OnMessageCreating = (global::Microsoft.OData.Client.DataServiceClientRequestMessageArgs args) =>
                    {
                        args.Headers.Remove("Content-Length");

                        var msg = new global::Microsoft.OData.Client.HttpWebRequestMessage(args);

                        global::System.Threading.Tasks.Task.Factory.FromAsync<System.IO.Stream>(msg.BeginGetRequestStream, msg.EndGetRequestStream, null).ContinueWith
                            (s => stream.CopyTo(s.Result))
                            .Wait();

                        return msg;
                    };
                }

                return await global::System.Threading.Tasks.Task.Factory.FromAsync<global::System.Collections.Generic.IEnumerable<T>>
                (
                    (callback, state) => BeginExecute<T>(uri, callback, state, httpMethod, singleResult, operationParameters),
                    EndExecute<T>, global::System.Threading.Tasks.TaskCreationOptions.None);
            }
            catch (Exception ex)
            {
                var newException = ProcessException(ex);

                if (newException != null)
                {
                    throw newException;
                }

                throw;
            }
            finally
            {
                if (stream != null)
                {
                    Configurations.RequestPipeline.OnMessageCreating = null;
                }
            }
        }

        public new global::System.Threading.Tasks.Task ExecuteAsync(
            global::System.Uri uri,
            string httpMethod,
            params OperationParameter[] operationParameters)
        {
            return ExecuteAsync(uri, httpMethod, (System.IO.Stream)null, operationParameters);
        }

        public async global::System.Threading.Tasks.Task ExecuteAsync(
            global::System.Uri uri,
            string httpMethod,
            System.IO.Stream stream,
            params OperationParameter[] operationParameters
            )
        {
            try
            {
                await SetToken();
                if (stream != null)
                {
                    Configurations.RequestPipeline.OnMessageCreating = (global::Microsoft.OData.Client.DataServiceClientRequestMessageArgs args) =>
                    {
                        args.Headers.Remove("Content-Length");

                        var msg = new global::Microsoft.OData.Client.HttpWebRequestMessage(args);

                        global::System.Threading.Tasks.Task.Factory.FromAsync<System.IO.Stream>(msg.BeginGetRequestStream, msg.EndGetRequestStream, null).ContinueWith
                            (s => stream.CopyTo(s.Result))
                            .Wait();

                        return msg;
                    };
                }

                await global::System.Threading.Tasks.Task.Factory.FromAsync 
                        (
                            new global::System.Func<global::System.AsyncCallback, object, global::System.IAsyncResult>(
                                (callback, state) => BeginExecute(uri, callback, state, httpMethod, operationParameters)),
                            new global::System.Action<global::System.IAsyncResult>((i) => EndExecute(i)),
                            global::System.Threading.Tasks.TaskCreationOptions.None);
            }
            catch (Exception ex)
            {
                var newException = ProcessException(ex);

                if (newException != null)
                {
                    throw newException;
                }

                throw;
            }
            finally
            {
                if (stream != null)
                {
                    Configurations.RequestPipeline.OnMessageCreating = null;
                }
            }
        }

        public async System.Threading.Tasks.Task<QueryOperationResponse<TSource>> ExecuteAsync<TSource, TInterface>(DataServiceQueryContinuation<TSource> token)
        {
            try
            {
                await SetToken();

                return await global::System.Threading.Tasks.Task.Factory.FromAsync<QueryOperationResponse<TSource>>(
                    (callback, state) => BeginExecute(token, callback, state),
                    (i) => (QueryOperationResponse<TSource>)EndExecute<TSource>(i),
                    global::System.Threading.Tasks.TaskCreationOptions.None);
            }
            catch (Exception ex)
            {
                var newException = ProcessException(ex);

                if (newException != null)
                {
                    throw newException;
                }

                throw;
            }
        }

        public async new System.Threading.Tasks.Task<DataServiceResponse> SaveChangesAsync(SaveChangesOptions options)
        {
            try
            {
                await SetToken();
                var result = await global::System.Threading.Tasks.Task.Factory.FromAsync<SaveChangesOptions, DataServiceResponse>(
                    BeginSaveChanges,
                    new global::System.Func<global::System.IAsyncResult, DataServiceResponse>(EndSaveChanges),
                    options,
                    null,
                    global::System.Threading.Tasks.TaskCreationOptions.None);

                foreach (var i in _modifiedEntities)
                {
                    i.ResetChanges();
                }

                _modifiedEntities.Clear();
                return result;
            }
            catch (Exception ex)
            {
                var newException = ProcessException(ex);

                if (newException != null)
                {
                    throw newException;
                }

                throw;
            }
        }

        public new System.Threading.Tasks.Task<DataServiceResponse> SaveChangesAsync()
        {
            return SaveChangesAsync(SaveChangesOptions.None);
        }

#if NOTYET
        public async System.Threading.Tasks.Task<IPagedCollection<TSource>> LoadPropertyAsync<TSource>(string path, object entity)
        {
            try
            {
                await SetToken();
                return await global::System.Threading.Tasks.Task.Factory.FromAsync<
                    IPagedCollection<TSource>>(
                    (AsyncCallback callback, object state) =>
                    {
                        return BeginLoadProperty(entity, path, callback, state);
                    },
                    new global::System.Func<global::System.IAsyncResult, IPagedCollection<TSource>>(
                        r =>
                        {
                            var innerResult = (QueryOperationResponse<TSource>)EndLoadProperty(r);

                            return new PagedCollection<TSource>(this, innerResult);
                        }
                        ), global::System.Threading.Tasks.TaskCreationOptions.None);
            }
            catch (Exception ex)
            {
                var newException = ProcessException(ex);

                if (newException != null)
                {
                    throw newException;
                }

                throw;
            }
        }
#endif

        internal static Exception ProcessException(Exception ex)
        {

            if (ex is DataServiceRequestException)
            {
                var response = ((DataServiceRequestException)ex).Response.FirstOrDefault();

                if (response != null)
                {
                    return ProcessError((DataServiceRequestException)ex, ex.InnerException as DataServiceClientException, response.Headers);
                }
            }

            if (ex is DataServiceQueryException)
            {
                return ProcessError((DataServiceQueryException)ex, ex.InnerException as DataServiceClientException, ((DataServiceQueryException)ex).Response.Headers);
            }

            if (ex is DataServiceClientException)
            {
                return ProcessError(ex, (DataServiceClientException)ex, new Dictionary<string, string> { {"Content-Type", ex.Message.StartsWith("<") ? "application/xml" : "application/json"}});
            }

            return null;
        }


        private static Exception ProcessError(Exception outer, DataServiceClientException inner, IDictionary<string, string> headers)
        {
            if (inner == null)
            {
                return null;
            }

            using (var writer = WriteToStream(inner.Message))
            {
                var httpMessage = new HttpWebResponseMessage(
                    headers,
                inner.StatusCode,
                () => writer.BaseStream);

                var reader = new ODataMessageReader(httpMessage);

                try
                {
                    var error = reader.ReadError();
                    return new ODataErrorException(error.Message, outer, error);
                }
                catch
                {
                }
            }

            return null;
        }

        private static async System.Threading.Tasks.Task<Exception> ProcessErrorAsync(System.Net.Http.HttpResponseMessage response)
        {

            if (response.Content == null)
            {
                return null;
            }

            if (response.Content.Headers.ContentType == null)
            {
                return new System.Net.Http.HttpRequestException(await response.Content.ReadAsStringAsync());
            }
            
            using (var stream = await response.Content.ReadAsStreamAsync())
            {
                var headers = Enumerable.ToDictionary(response.Content.Headers, i => i.Key, i => i.Value.FirstOrDefault());

                var httpMessage = new HttpWebResponseMessage(
                  headers,
                (int)response.StatusCode,
                () => stream);

                var reader = new ODataMessageReader(httpMessage);

                try
                {
                    var error = reader.ReadError();
                    return new ODataErrorException(error.Message, null, error);
                }
                catch
                {
                }
            }

            return null;
        }

        private static System.IO.StreamWriter WriteToStream(string contents)
        {
            var stream = new System.IO.MemoryStream();
            var writer = new System.IO.StreamWriter(stream);
            writer.Write(contents);
            writer.Flush();
            stream.Seek(0, System.IO.SeekOrigin.Begin);
            return writer;
        }
    }

    public interface IBatchElementResult
    {
        IPagedCollection SuccessResult { get; }
        Exception FailureResult { get; }
    }

    class BatchElementResult : IBatchElementResult
    {

        public BatchElementResult(IPagedCollection successResult)
        {
            SuccessResult = successResult;
        }

        public BatchElementResult(Exception failureResult)
        {
            FailureResult = failureResult;
        }

        public IPagedCollection SuccessResult
        {
            get;
            private set;
        }

        public Exception FailureResult
        {
            get;
            private set;
        }
    }

    public class ComplexTypeBase 
    {
        private Func<Tuple<EntityBase, string>> _entity;

        protected ComplexTypeBase()
        {
        }

        internal virtual void SetContainer(Func<Tuple<EntityBase, string>> entity)
        {
            _entity = entity;
        }

        protected Tuple<EntityBase, string> GetContainingEntity(string propertyName)
        {
            return _entity != null ? _entity() : null;
        }

        protected void OnPropertyChanged(string propertyName)
        {
            var tuple = GetContainingEntity(propertyName);

            if (tuple != null)
            {
                tuple.Item1.OnPropertyChanged(tuple.Item2);
            }
        }
    }

    internal class EntityCollectionImpl<T> : DataServiceCollection<T> where T : EntityBase
    {
        private Func<Tuple<EntityBase, string>> _entity;

        public EntityCollectionImpl()
            : base(null, TrackingMode.None)
        {
        }

        internal void SetContainer(Func<Tuple<EntityBase, string>> entity)
        {
            _entity = entity;
        }

        protected override void InsertItem(int index, T item)
        {
            InvokeOnEntity(tuple => tuple.Item1.Context.AddRelatedObject(tuple.Item1, tuple.Item2, item));

            base.InsertItem(index, item);
        }

        protected override void ClearItems()
        {
            InvokeOnEntity(tuple => 
            {
                foreach (var i in this)
                {
                    tuple.Item1.Context.DeleteLink(tuple.Item1, tuple.Item2, i);
                }
            });

            base.ClearItems();
        }

        protected override void RemoveItem(int index)
        {
            InvokeOnEntity(tuple => tuple.Item1.Context.DeleteLink(tuple.Item1, tuple.Item2, this[index]));

            base.RemoveItem(index);
        }

        protected override void SetItem(int index, T item)
        {
            InvokeOnEntity(tuple =>
                    {
                        tuple.Item1.Context.DeleteLink(tuple.Item1, tuple.Item2, this[index]);
                        tuple.Item1.Context.AddRelatedObject(tuple.Item1, tuple.Item2, item);
                    }
            );

            base.SetItem(index, item);
        }

        private void InvokeOnEntity(Action<Tuple<EntityBase, string>> action)
        {
            if (_entity != null)
            {
                var tuple = _entity();

                if (tuple.Item1.Context != null && tuple.Item1.Context.GetEntityDescriptor(tuple.Item1) != null)
                {
                    action(tuple);
                }
            }
        }
    }

    internal class NonEntityTypeCollectionImpl<T> : global::System.Collections.ObjectModel.Collection<T>
    {
        private Func<Tuple<EntityBase, string>> _entity;

        static readonly bool _isComplexType = System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(T)).IsSubclassOf(typeof(ComplexTypeBase));

        public NonEntityTypeCollectionImpl()
            : base()
        {
        }

        internal void SetContainer(Func<Tuple<EntityBase, string>> entity)
        {
            _entity = entity;

            if (_isComplexType)
            {
                foreach (var i in this)
                {
                    (i as ComplexTypeBase).SetContainer(entity);
                }
            }
        }

        protected override void InsertItem(int index, T item)
        {
            var ct = item as ComplexTypeBase;
            if (ct != null)
            {
                ct.SetContainer(_entity);
            }

            base.InsertItem(index, item);

            InvokeOnPropertyChanged();
        }

        protected override void ClearItems()
        {
            base.ClearItems();
            InvokeOnPropertyChanged();
        }

        protected override void RemoveItem(int index)
        {
            base.RemoveItem(index);
            InvokeOnPropertyChanged();
        }

        protected override void SetItem(int index, T item)
        {
            var ct = item as ComplexTypeBase;
            if (ct != null)
            {
                ct.SetContainer(_entity);
            }
            base.SetItem(index, item);
            InvokeOnPropertyChanged();
        }

        private void InvokeOnPropertyChanged()
        {
            var tuple = _entity != null ? _entity() : null;
            if (tuple != null)
            {
                tuple.Item1.OnPropertyChanged(tuple.Item2);
            }
        }
    }

    public class EntityBase  : BaseEntityType
    {
        private Lazy<HashSet<string>> _changedProperties = new Lazy<HashSet<string>>(true);

        internal Lazy<HashSet<string>> ChangedProperties
        {
            get { return _changedProperties; }
        }

        protected Tuple<EntityBase, string> GetContainingEntity(string propertyName)
        {
            return new Tuple<EntityBase, string> (this, propertyName);
        }

        protected internal void OnPropertyChanged([global::System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            _changedProperties.Value.Add(propertyName);
            if (Context != null)
            {
                Context.UpdateObject(this);
            }
        }

        internal void ResetChanges()
        {
            _changedProperties = new Lazy<HashSet<string>>(true);
        }

        internal new DataServiceContextWrapper Context 
        { 
            get
            {
                return (DataServiceContextWrapper)base.Context;
            }
            private set
            {
                base.Context = value;
            }
        }

        internal void Initialize()
        {
        }

        protected string GetPath(string propertyName)
        {
            Uri uri = GetUrl();
            if (uri != null)
            {
                return uri.ToString().Substring(Context.BaseUri.ToString().Length + 1) + "/" + propertyName;
            }

            return null;
        }

        protected System.Uri GetUrl()
        {
            if (Context == null)
            {
                return null;
            }

            Uri uri;
            Context.TryGetUri(this, out uri);

            return uri;
        }

		/// <param name="dontSave">true to delay saving until batch is saved; false to save immediately.</param>
        public global::System.Threading.Tasks.Task UpdateAsync(bool dontSave = false)
        {
			 if (Context == null) throw new InvalidOperationException("Not Initialized");
            Context.UpdateObject(this);
            return SaveAsNeeded(dontSave);
        }

		/// <param name="dontSave">true to delay saving until batch is saved; false to save immediately.</param>
        public global::System.Threading.Tasks.Task DeleteAsync(bool dontSave = false)
        {
			 if (Context == null) throw new InvalidOperationException("Not Initialized");
            Context.DeleteObject(this);
            return SaveAsNeeded(dontSave);
        }

		/// <param name="dontSave">true to delay saving until batch is saved; false to save immediately.</param>
        protected internal global::System.Threading.Tasks.Task SaveAsNeeded(bool dontSave)
        {
            if (!dontSave)
            {
                return Context.SaveChangesAsync();
            }
            else
            {
                var retVal = new global::System.Threading.Tasks.TaskCompletionSource<object>();
                retVal.SetResult(null);
                return retVal.Task;
            }
        }
    }

    public class QueryableSet<TSource> : ReadOnlyQueryableSetBase<TSource>
    {
        protected string _path;
        protected object _entity;

        internal void SetContainer(Func<EntityBase> entity, string property)
        {
            // Unneeded
        }

        protected System.Uri GetUrl()
        {
            return new Uri(Context.BaseUri.ToString().TrimEnd('/') + "/" + _path);
        }

        internal QueryableSet(
            DataServiceQuery inner,
            DataServiceContextWrapper context,
            EntityBase entity,
            string path)
            : base(inner, context)
        {
            Initialize(inner, context, entity, path);
        }

        internal void Initialize(DataServiceQuery inner,
            DataServiceContextWrapper context,
            EntityBase entity,
            string path)
        {
            base.Initialize(inner, context);
            _path = path;
            _entity = entity;
        }
    }

    public interface IReadOnlyQueryableSet<TSource> : IReadOnlyQueryableSetBase<TSource>
    {
        System.Threading.Tasks.Task<IPagedCollection<TSource>> ExecuteAsync();
        System.Threading.Tasks.Task<TSource> ExecuteSingleAsync();
    }
    
    public class ReadOnlyQueryableSet<TSource> : ReadOnlyQueryableSetBase<TSource>, IReadOnlyQueryableSet<TSource>
    {
        internal ReadOnlyQueryableSet(
            DataServiceQuery inner,
            DataServiceContextWrapper context)
            :base (inner, context)
        {
        }


        public global::System.Threading.Tasks.Task<IPagedCollection<TSource>> ExecuteAsync()
        {
            return base.ExecuteAsyncInternal();
        }

        public global::System.Threading.Tasks.Task<TSource> ExecuteSingleAsync()
        {
            return base.ExecuteSingleAsyncInternal();
        }
    }

    public interface IReadOnlyQueryableSetBase
    {
        DataServiceContextWrapper Context { get; }
        DataServiceQuery Query { get; }
    }

    public interface IReadOnlyQueryableSetBase<TSource> : IReadOnlyQueryableSetBase
    {
        IReadOnlyQueryableSet<TSource> Expand<TTarget>(System.Linq.Expressions.Expression<Func<TSource, TTarget>> navigationPropertyAccessor);
        IReadOnlyQueryableSet<TResult> OfType<TResult>();
        IReadOnlyQueryableSet<TSource> OrderBy<TKey>(System.Linq.Expressions.Expression<Func<TSource, TKey>> keySelector);
        IReadOnlyQueryableSet<TSource> OrderByDescending<TKey>(System.Linq.Expressions.Expression<Func<TSource, TKey>> keySelector);
        IReadOnlyQueryableSet<TResult> Select<TResult>(System.Linq.Expressions.Expression<Func<TSource, TResult>> selector);
        IReadOnlyQueryableSet<TSource> Skip(int count);
        IReadOnlyQueryableSet<TSource> Take(int count);
        IReadOnlyQueryableSet<TSource> Where(System.Linq.Expressions.Expression<Func<TSource, bool>> predicate);
    }

    public interface IConcreteTypeAccessor
    {
        Type ConcreteType { get; }
        Type ElementType { get; }
    }

    public abstract class ReadOnlyQueryableSetBase<TSource> :IReadOnlyQueryableSetBase<TSource>, IConcreteTypeAccessor
    {
        protected DataServiceQuery _inner;
        protected DataServiceContextWrapper _context;

        private Lazy<Type> _concreteType = new Lazy<Type>(() => CreateConcreteType(typeof(TSource)), true);

        // Will return null if not an interface
        private static Type CreateConcreteType(Type tsourceType)
        {
            var tsourceTypeInfo = System.Reflection.IntrospectionExtensions.GetTypeInfo(tsourceType);
            if (tsourceTypeInfo.IsGenericType)
            {
                var arguments = tsourceTypeInfo.GenericTypeArguments;
                bool modified = false;

                for(int i = 0; i < arguments.Length; i++)
                {
                    var converted = CreateConcreteType(arguments[i]);
                    if (converted != null)
                    {
                        arguments[i] = converted;
                        modified = true;
                    }
                }

                if (!modified)
                {
                    return null;
                }

                // Properties declared as IPagedCollection on the interface are declared as IList on the concrete type
                if (tsourceTypeInfo.GetGenericTypeDefinition() == typeof(IPagedCollection<>))
                {
                    return typeof(IList<>).MakeGenericType(arguments);
                }

                return tsourceTypeInfo.GetGenericTypeDefinition().MakeGenericType(arguments);
            }

            const string Fetcher = "Fetcher";
            if (System.Linq.Enumerable.Any<System.Reflection.CustomAttributeData>(
                tsourceTypeInfo.CustomAttributes,
                i => i.AttributeType == typeof(LowerCasePropertyAttribute)))
            {
                string typeName = tsourceTypeInfo.Namespace + "." + tsourceTypeInfo.Name.Substring(1);
                if (typeName.EndsWith(Fetcher))
                {
                    typeName = typeName.Substring(typeName.Length - Fetcher.Length);
                }
                return tsourceTypeInfo.Assembly.GetType(typeName);
            }
            else
            {
                return null;
            }
        }

        public DataServiceContextWrapper Context
        {
            get { return _context; }
        }

        public DataServiceQuery Query
        {
            get { return _inner; }
        }

        public ReadOnlyQueryableSetBase(
            DataServiceQuery inner,
            DataServiceContextWrapper context)
        {
            Initialize(inner, context);        
        }

        protected void Initialize(DataServiceQuery inner,
            DataServiceContextWrapper context)
        {
            _inner = inner;
            _context = context;
        }

#region IConcreteTypeAccessor implementation

        Type IConcreteTypeAccessor.ConcreteType
        {
            get
            {
                return _concreteType.Value ?? typeof(TSource);
            }
        }

        Type IConcreteTypeAccessor.ElementType
        {
            get
            {
                return typeof(TSource);
            }
        }

#endregion

        protected global::System.Threading.Tasks.Task<IPagedCollection<TSource>> ExecuteAsyncInternal()
        {

            if (_concreteType.Value != null)
            {
                var contextTypeInfo = System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(DataServiceContextWrapper));

                var executeAsyncMethodInfo =
                    (from i in contextTypeInfo.GetDeclaredMethods("ExecuteAsync")
                     let parameters = i.GetParameters()
                     where parameters.Length == 1 && parameters[0].ParameterType.GetGenericTypeDefinition() == typeof(DataServiceQuery<>)
                     select i).First();

                return (global::System.Threading.Tasks.Task<IPagedCollection<TSource>>) 
                    executeAsyncMethodInfo.MakeGenericMethod(_concreteType.Value, typeof(TSource)).Invoke(_context, new [] { _inner });
            }
            else
            {
                return _context.ExecuteAsync<TSource, TSource>((DataServiceQuery<TSource>)_inner);
            }
        }

        protected global::System.Threading.Tasks.Task<TSource> ExecuteSingleAsyncInternal()
        {
            if (_concreteType.Value != null)
            {
                var contextTypeInfo = System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(DataServiceContextWrapper));

                var executeAsyncMethodInfo =
                    (from i in contextTypeInfo.GetDeclaredMethods("ExecuteSingleAsync")
                     let parameters = i.GetParameters()
                     where parameters.Length == 1 && parameters[0].ParameterType.GetGenericTypeDefinition() == typeof(DataServiceQuery<>)
                     select i).First();

                return (global::System.Threading.Tasks.Task<TSource>)
                    executeAsyncMethodInfo.MakeGenericMethod(_concreteType.Value, typeof(TSource)).Invoke(_context, new[] { _inner });
            }
            else
            {
                return _context.ExecuteSingleAsync<TSource, TSource>((DataServiceQuery<TSource>)_inner);
            }
        }

        #region LINQ


        private class PascalCaseExpressionVisitor : System.Linq.Expressions.ExpressionVisitor
        {
            Dictionary<System.Linq.Expressions.ParameterExpression, System.Linq.Expressions.ParameterExpression>
                _parameterDictionary = new Dictionary<System.Linq.Expressions.ParameterExpression, System.Linq.Expressions.ParameterExpression>();

            protected override System.Linq.Expressions.Expression VisitExtension(System.Linq.Expressions.Expression node)
            {
                return node;
            }

            protected override System.Linq.Expressions.Expression VisitLambda<T>(System.Linq.Expressions.Expression<T> node)
            {

                var originalDelegateType = typeof(T);

                if (originalDelegateType.GetGenericTypeDefinition() == typeof(Func<,>))
                {
                    var newParameterArray = System.Reflection.IntrospectionExtensions.GetTypeInfo(originalDelegateType).GenericTypeArguments;
                    bool hasInterfaces = false;

                    var ct = CreateConcreteType(newParameterArray[0]);
                    if (ct != null)
                    {
                        hasInterfaces = true;
                        newParameterArray[0] = ct;
                    }

                    ct = CreateConcreteType(newParameterArray[1]);
                    if (ct != null)
                    {
                        hasInterfaces = true;
                        newParameterArray[1] = ct;
                    }

                    if (!hasInterfaces)
                    {
                        return base.VisitLambda(node);
                    }

                    var newdDelegateType = typeof(Func<,>).MakeGenericType(newParameterArray);

                    var invocationParameters = node.Parameters.ToArray();

                    for (int i = 0; i < invocationParameters.Length; i++)
                    {
                        var concreteType = CreateConcreteType(invocationParameters[i].Type);

                        if (concreteType != null)
                        {
                            if (!_parameterDictionary.ContainsKey(invocationParameters[i]))
                            {
                                _parameterDictionary[invocationParameters[i]] =  System.Linq.Expressions.Expression.Parameter(
                                concreteType, invocationParameters[i].Name);
                            }

                            invocationParameters[i] = _parameterDictionary[invocationParameters[i]];
                        }
                    }

                    var body = Visit(node.Body);

                    var newLambda = System.Linq.Expressions.Expression.Lambda(
                        newdDelegateType,
                        body,
                        node.TailCall,
                        invocationParameters);

                    return newLambda;
                }

                return base.VisitLambda<T>(node);
            }

            protected override System.Linq.Expressions.Expression VisitParameter(System.Linq.Expressions.ParameterExpression node)
            {
                var concreteType = CreateConcreteType(node.Type);

                if (concreteType == null)
                {
                    return base.VisitParameter(node);
                }

                if (!_parameterDictionary.ContainsKey(node))
                {
                    _parameterDictionary[node] = System.Linq.Expressions.Expression.Parameter(
                    concreteType,
                    node.Name);
                }

                return base.VisitParameter(_parameterDictionary[node]);
            }

            protected override System.Linq.Expressions.Expression VisitMember(System.Linq.Expressions.MemberExpression node)
            {
                if (node.Member is System.Reflection.PropertyInfo)
                {
                    var interfaceType = CreateConcreteType(node.Type) != null;

                    var toLower = System.Linq.Enumerable.Any(
                        node.Member.CustomAttributes, i => i.AttributeType == typeof(LowerCasePropertyAttribute));

                    if (interfaceType || toLower)
                    {
                        var newExpression = Visit(node.Expression);

                        return base.VisitMember(
                            System.Linq.Expressions.Expression.Property(
                                newExpression,
                                System.Reflection.RuntimeReflectionExtensions.GetRuntimeProperty(
                                    newExpression.Type,
                                    toLower ? char.ToLower(node.Member.Name[0]) + node.Member.Name.Substring(1) : node.Member.Name
                               )
                            )
                        );
                    }
                }
                /*
                    Example - "me" is a field:

                    var me = await client.Me.ExecuteAsync();
            
                    var filesQuery = await client.Users.Where(i => i.UserPrincipalName != me.UserPrincipalName).ExecuteAsync();
                */
                else if (node.Member is System.Reflection.FieldInfo) // for local variables
                {
                    var fieldTypeInfo = System.Reflection.IntrospectionExtensions.GetTypeInfo(((System.Reflection.FieldInfo)node.Member).FieldType);
                    if (System.Linq.Enumerable.Any<System.Reflection.CustomAttributeData>(fieldTypeInfo.CustomAttributes, i => i.AttributeType == typeof(LowerCasePropertyAttribute)))
                    {
                        var expression = System.Linq.Expressions.Expression.TypeAs(node, CreateConcreteType(fieldTypeInfo.AsType()));
                        return expression;
                    }
                }

                return base.VisitMember(node);
            }
        }

        private System.Linq.Expressions.ExpressionVisitor _pascalCaseExpressionVisitor = new PascalCaseExpressionVisitor();

        public IReadOnlyQueryableSet<TResult> Select<TResult>(System.Linq.Expressions.Expression<System.Func<TSource, TResult>> selector)
        {
            var newSelector = _pascalCaseExpressionVisitor.Visit(selector);

            DataServiceQuery query = CallLinqMethod(newSelector); 
            
            return new ReadOnlyQueryableSet<TResult>(
                query,
                _context);
        }

        public IReadOnlyQueryableSet<TSource> Where(System.Linq.Expressions.Expression<System.Func<TSource, bool>> predicate)
        {
            // Fix for DevDiv 941323:
            if (predicate.Body.NodeType == System.Linq.Expressions.ExpressionType.Coalesce)
            {
                var binary = (System.Linq.Expressions.BinaryExpression)predicate.Body;

                var constantRight = binary.Right as System.Linq.Expressions.ConstantExpression;

                // If we are coalescing bool to false, it is a no-op
                if (constantRight != null && 
                    constantRight.Value is bool && 
                    !(bool)constantRight.Value && 
                    binary.Left.Type == typeof (bool?) &&
                    binary.Left is System.Linq.Expressions.BinaryExpression)
                {
                    var oldLeft = (System.Linq.Expressions.BinaryExpression)binary.Left;

                    var newLeft = System.Linq.Expressions.Expression.MakeBinary(
                        oldLeft.NodeType,
                        oldLeft.Left,
                        oldLeft.Right);

                    predicate = (System.Linq.Expressions.Expression<System.Func<TSource, bool>>)System.Linq.Expressions.Expression.Lambda(
                        predicate.Type,
                        newLeft,
                        predicate.TailCall,
                        predicate.Parameters);
                }
            }                   

            var newSelector = _pascalCaseExpressionVisitor.Visit(predicate);

            DataServiceQuery query = CallLinqMethod(newSelector, true); 

            return new ReadOnlyQueryableSet<TSource>(
                query,
                _context);
        }

        public IReadOnlyQueryableSet<TResult> OfType<TResult>()
        {
            DataServiceQuery query = ApplyLinq(new[] { typeof(TResult) }, new object[] { _inner }) ??
                (DataServiceQuery)System.Linq.Queryable.OfType<TResult>((System.Linq.IQueryable<TSource>)_inner);

            return new ReadOnlyQueryableSet<TResult>(
                query,
                _context);
        }

        public IReadOnlyQueryableSet<TSource> Skip(int count)
        {
            DataServiceQuery query = ApplyLinq(new[] { typeof(TSource) }, new object[] { _inner, count }) ??
                (DataServiceQuery)System.Linq.Queryable.Skip<TSource>((System.Linq.IQueryable<TSource>)_inner, count);

            return new ReadOnlyQueryableSet<TSource>(
                query,
                _context);
        }

        public IReadOnlyQueryableSet<TSource> Take(int count)
        {
            DataServiceQuery query = ApplyLinq(new[] { typeof(TSource) }, new object[] { _inner, count }) ??
                (DataServiceQuery)System.Linq.Queryable.Take<TSource>((System.Linq.IQueryable<TSource>)_inner, count);

            return new ReadOnlyQueryableSet<TSource>(
                query,
                _context);
        }

        public IReadOnlyQueryableSet<TSource> OrderBy<TKey>(System.Linq.Expressions.Expression<System.Func<TSource, TKey>> keySelector)
        {
            var newSelector = _pascalCaseExpressionVisitor.Visit(keySelector);

            DataServiceQuery query = CallLinqMethod(newSelector); 

            return new ReadOnlyQueryableSet<TSource>(
                query,
                _context);
        }

        public IReadOnlyQueryableSet<TSource> OrderByDescending<TKey>(System.Linq.Expressions.Expression<System.Func<TSource, TKey>> keySelector)
        {
            var newSelector = _pascalCaseExpressionVisitor.Visit(keySelector);

            DataServiceQuery query = CallLinqMethod(newSelector); 

            return new ReadOnlyQueryableSet<TSource>(
                query,
                _context);
        }

        public IReadOnlyQueryableSet<TSource> Expand<TTarget>(System.Linq.Expressions.Expression<Func<TSource, TTarget>> navigationPropertyAccessor)
        {
            var newSelector = _pascalCaseExpressionVisitor.Visit(navigationPropertyAccessor);

            var concreteType = _concreteType.Value ?? typeof(TSource);
            var concreteDsq = typeof(DataServiceQuery<>).MakeGenericType(concreteType);

            DataServiceQuery query = CallOnConcreteType(concreteDsq, _inner, new[] { typeof(TTarget) }, new object[] { newSelector });

            return new ReadOnlyQueryableSet<TSource>(
                query,
                _context);
        }

        private DataServiceQuery ApplyLinq(Type[] typeParams, object[] callParams, [System.Runtime.CompilerServices.CallerMemberName] string methodName = null)
        {
            return CallOnConcreteType(typeof(System.Linq.Queryable), null, typeParams, callParams, methodName);
        }

        private DataServiceQuery CallOnConcreteType(Type targetType, object instance, Type[] typeParams, object[] callParams, [System.Runtime.CompilerServices.CallerMemberName] string methodName = null)
        {
            for (int i = 0; i < typeParams.Length; i++)
            {
                if (typeParams[i] == typeof(TSource))
                {
                    typeParams[i] = _concreteType.Value;
                }
                else
                {
                    var concreteType = CreateConcreteType(typeParams[i]);

                    if (concreteType != null)
                    {
                        typeParams[i] = concreteType;
                    }
                }
            }

            var typeInfo = System.Reflection.IntrospectionExtensions.GetTypeInfo(targetType);
            var methodInfo =
                (from i in typeInfo.GetDeclaredMethods(methodName)
                 let parameters = i.GetParameters()
                 where i.GetGenericArguments().Length == typeParams.Length
                 let constructedMethod = i.MakeGenericMethod(typeParams)
                 where AllParametersAreAssignable(constructedMethod.GetParameters(), callParams)
                 select constructedMethod).First();

            return (DataServiceQuery)methodInfo.Invoke(instance, callParams);
        }

        private bool AllParametersAreAssignable(System.Reflection.ParameterInfo[] parameterInfo, object[] callParams)
        {
            for (int i = 0; i < parameterInfo.Length; i++)
            {
                if (callParams[i] != null &&
                    !System.Reflection.IntrospectionExtensions.GetTypeInfo(parameterInfo[i].ParameterType).IsAssignableFrom(
                    System.Reflection.IntrospectionExtensions.GetTypeInfo(callParams[i].GetType())))
                {
                    return false;
                }
            }

            return true;
        }

        private DataServiceQuery CallLinqMethod(
            System.Linq.Expressions.Expression predicate,
            bool singleGenericParameter = false,
            [System.Runtime.CompilerServices.CallerMemberName] string methodName = null)
        {
            System.Type[] typeParams = singleGenericParameter ?
                new Type[] { predicate.Type.GenericTypeArguments[0] } : 
                predicate.Type.GenericTypeArguments;

            var callParams = new object[] { _inner, predicate };

            var typeInfo = System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(System.Linq.Queryable));
            var methodInfo =
                (from i in typeInfo.GetDeclaredMethods(methodName)
                 let parameters = i.GetParameters()
                 where i.GetGenericArguments().Length == typeParams.Length
                 let constructedMethod = i.MakeGenericMethod(typeParams)
                 where AllParametersAreAssignable(constructedMethod.GetParameters(), callParams)
                 select constructedMethod).First();

            return (DataServiceQuery)methodInfo.Invoke(null, callParams);
        }

        #endregion
    }

    public interface IPagedCollection<TElement>
    {
        global::System.Collections.Generic.IReadOnlyList<TElement> CurrentPage { get; }
        bool MorePagesAvailable { get; }
        global::System.Threading.Tasks.Task<IPagedCollection<TElement>> GetNextPageAsync();
    }
    
    public interface IPagedCollection
    {
        global::System.Collections.Generic.IReadOnlyList<object> CurrentPage { get; }
        bool MorePagesAvailable { get; }
        global::System.Threading.Tasks.Task<IPagedCollection> GetNextPageAsync();
    }

    internal class PagedCollection<TElement, TConcrete> : IPagedCollection, IPagedCollection<TElement> where TConcrete : TElement
    {
        private DataServiceContextWrapper _context;
        private DataServiceQueryContinuation<TConcrete> _continuation;
        private IReadOnlyList<TElement> _currentPage;

        // Creator - should be faster than Activator.CreateInstance
        public static PagedCollection<TElement, TConcrete> Create(DataServiceContextWrapper context,
            QueryOperationResponse<TConcrete> qor)
        {
            return new PagedCollection<TElement, TConcrete>(context, qor);
        }
                
        internal PagedCollection(DataServiceContextWrapper context,
            QueryOperationResponse<TConcrete> qor)
        {
            _context = context;
            _currentPage = (IReadOnlyList<TElement>)qor.ToList();
            _continuation = qor.GetContinuation();
        }

        public PagedCollection(DataServiceContextWrapper context, DataServiceCollection<TConcrete> collection)
        {
            _context = context;
            _currentPage = (IReadOnlyList<TElement>)collection;
            if (_currentPage != null)
            {
                _continuation = collection.Continuation;
            }
        }

        public bool MorePagesAvailable
        {
            get
            {
                return _continuation != null;
            }
        }

        public System.Collections.Generic.IReadOnlyList<TElement> CurrentPage
        {
            get
            {
                return _currentPage;
            }
        }

        public async System.Threading.Tasks.Task<IPagedCollection<TElement>> GetNextPageAsync()
        {
            if (_continuation != null)
            {
                var task =  _context.ExecuteAsync<TConcrete, TElement>(_continuation);

                return new PagedCollection<TElement, TConcrete>(_context, await task);
            }

            return (IPagedCollection<TElement>)null;
        }

        IReadOnlyList<object> IPagedCollection.CurrentPage
        {
            get { return (IReadOnlyList<object>)this.CurrentPage; }
        }

        async System.Threading.Tasks.Task<IPagedCollection> IPagedCollection.GetNextPageAsync()
        {
            var retval = await GetNextPageAsync();

            return (PagedCollection<TElement, TConcrete>)retval;
        }
    }

    public interface IStreamFetcher
    {
        string ContentType { get; }
        global::System.Threading.Tasks.Task<global::Microsoft.OData.Client.DataServiceStreamResponse> DownloadAsync();
		/// <param name="dontSave">true to delay saving until batch is saved; false to save immediately.</param>
        global::System.Threading.Tasks.Task UploadAsync(global::System.IO.Stream stream, string contentType, bool dontSave = false, bool closeStream = false);
    }
        
    internal class StreamFetcher : IStreamFetcher
    {
        private global::Microsoft.OData.Client.DataServiceStreamLink _link;
        private EntityBase _entity;
        private string _propertyName;
        private DataServiceContextWrapper _context;

        public string ContentType
        {
            get
            {
                return _link.ContentType;
            }
        }

        internal StreamFetcher(DataServiceContextWrapper context, EntityBase entity, string propertyName, global::Microsoft.OData.Client.DataServiceStreamLink link)
        {
            _context = context;
            _entity = entity;
            _link = link;
            _propertyName = propertyName;
        }

		/// <param name="dontSave">true to delay saving until batch is saved; false to save immediately.</param>
        public global::System.Threading.Tasks.Task UploadAsync(global::System.IO.Stream stream, string contentType, bool dontSave = false, bool closeStream = false)
        {
            var args = new global::Microsoft.OData.Client.DataServiceRequestArgs
            {
                ContentType = contentType
            };

            if (_link.ETag != null)
            {
                args.Headers.Add("If-Match", _link.ETag);
            }

            _context.SetSaveStream(_entity, _propertyName, stream, closeStream, args);

            _entity.OnPropertyChanged(_propertyName);

            return _entity.SaveAsNeeded(dontSave);
        }

        public global::System.Threading.Tasks.Task<global::Microsoft.OData.Client.DataServiceStreamResponse> DownloadAsync()
        {
            return _context.GetReadStreamAsync(_entity, _propertyName, ContentType);
        }
    }
}
namespace Microsoft.Office365.OutlookServices
{
	using System;
	using Microsoft.Office365.OutlookServices.Extensions;
    [Microsoft.Office365.OutlookServices.Extensions.LowerCaseProperty]
    public partial interface IOutlookServicesClient
    {
        global::Microsoft.Office365.OutlookServices.IUserCollection Users
        {
            get; 
        }

        global::Microsoft.Office365.OutlookServices.IUserFetcher Me
        {
            get; 
        }
    }

    public partial class OutlookServicesClient : IOutlookServicesClient
    {
        private const string _path = "";

        public Microsoft.Office365.OutlookServices.Extensions.DataServiceContextWrapper Context
        {
            get;
            private set;
        }

        internal Microsoft.Office365.OutlookServices.Extensions.DataServiceContextWrapper GetContext ()
        { 
            return Context;
        }

        private string GetPath(string propertyName)
        {
            return propertyName == null ? _path : _path + "/" + propertyName;
        }

        public OutlookServicesClient(global::System.Uri serviceRoot, global::System.Func<global::System.Threading.Tasks.Task<string>> accessTokenGetter)
        {
            Context = new Microsoft.Office365.OutlookServices.Extensions.DataServiceContextWrapper(serviceRoot, global::Microsoft.OData.Client.ODataProtocolVersion.V4, accessTokenGetter);
            Context.MergeOption = global::Microsoft.OData.Client.MergeOption.OverwriteChanges;
            Context.ResolveName = new global::System.Func<global::System.Type, string>(this.ResolveNameFromType);
            Context.ResolveType = new global::System.Func<string, global::System.Type>(this.ResolveTypeFromName);
            this.OnContextCreated();
            Context.Format.LoadServiceModel = GeneratedEdmModel.GetInstance;
            Context.Format.UseJson();
        }
        partial void OnContextCreated();
        /// <summary>
        /// Since the namespace configured for this service reference
        /// in Visual Studio is different from the one indicated in the
        /// server schema, use type-mappers to map between the two.
        /// </summary>
        private global::System.Type ResolveTypeFromName(string typeName)
        {
            global::System.Type resolvedType;

            resolvedType = Context.DefaultResolveTypeInternal(typeName, "Microsoft.OutlookServices", "Microsoft.Office365.OutlookServices");
            if (resolvedType != null)
            {
                return resolvedType;
            }

            return null;
        }
        /// <summary>
        /// Since the namespace configured for this service reference
        /// in Visual Studio is different from the one indicated in the
        /// server schema, use type-mappers to map between the two.
        /// </summary>
        private string ResolveNameFromType(global::System.Type clientType)
        {
            string resolvedType;

            resolvedType = Context.DefaultResolveNameInternal(clientType,  "Microsoft.OutlookServices", "Microsoft.Office365.OutlookServices");
            if (!string.IsNullOrEmpty(resolvedType))
            {
                return resolvedType;
            }

            return clientType.FullName;
        }

        // tag0003
        public IUserCollection Users
        {
            get
            {
                if ((this._Users == null))
                {
                    this._Users = new UserCollection(
                        Context != null ? Context.CreateQuery<User>(GetPath("Users")) : null,
                        Context, 
                        this, 
                        GetPath("Users"));
                }

                return this._Users;
            }
        }

        private IUserCollection _Users;
        /// <summary>
        /// There are no comments for Users in the schema.
        /// </summary>
        public void AddToUsers(User user)
        {
            Context.AddObject("Users", user);
        }
        
		
        /// <summary>
        /// There are no comments for Me in the schema.
        /// </summary>
        public IUserFetcher Me
        {
            get
            {
                if ((this._Me == null))
                {
                    this._Me = new UserFetcher();
                    this._Me.Initialize(Context, "Me");

                }
                return this._Me;
            }

			private set { this._Me = (UserFetcher)value; } 
        }
        private UserFetcher _Me;
        
        private abstract class GeneratedEdmModel
        {
            
            private static global::Microsoft.OData.Edm.IEdmModel ParsedModel = LoadModelFromString();
            
            private const string Edmx = @"<edmx:Edmx Version=""4.0"" xmlns:edmx=""http://docs.oasis-open.org/odata/ns/edmx"">
  <edmx:DataServices>
    <Schema Namespace=""Microsoft.OutlookServices"" xmlns=""http://docs.oasis-open.org/odata/ns/edm"">
      <EnumType Name=""DayOfWeek"">
        <Member Name=""Sunday"" Value=""0"" />
        <Member Name=""Monday"" Value=""1"" />
        <Member Name=""Tuesday"" Value=""2"" />
        <Member Name=""Wednesday"" Value=""3"" />
        <Member Name=""Thursday"" Value=""4"" />
        <Member Name=""Friday"" Value=""5"" />
        <Member Name=""Saturday"" Value=""6"" />
      </EnumType>
      <EnumType Name=""BodyType"">
        <Member Name=""Text"" Value=""0"" />
        <Member Name=""HTML"" Value=""1"" />
      </EnumType>
      <EnumType Name=""Importance"">
        <Member Name=""Low"" Value=""0"" />
        <Member Name=""Normal"" Value=""1"" />
        <Member Name=""High"" Value=""2"" />
      </EnumType>
      <EnumType Name=""AttendeeType"">
        <Member Name=""Required"" Value=""0"" />
        <Member Name=""Optional"" Value=""1"" />
        <Member Name=""Resource"" Value=""2"" />
      </EnumType>
      <EnumType Name=""ResponseType"">
        <Member Name=""None"" Value=""0"" />
        <Member Name=""Organizer"" Value=""1"" />
        <Member Name=""TentativelyAccepted"" Value=""2"" />
        <Member Name=""Accepted"" Value=""3"" />
        <Member Name=""Declined"" Value=""4"" />
        <Member Name=""NotResponded"" Value=""5"" />
      </EnumType>
      <EnumType Name=""EventType"">
        <Member Name=""SingleInstance"" Value=""0"" />
        <Member Name=""Occurrence"" Value=""1"" />
        <Member Name=""Exception"" Value=""2"" />
        <Member Name=""SeriesMaster"" Value=""3"" />
      </EnumType>
      <EnumType Name=""FreeBusyStatus"">
        <Member Name=""Free"" Value=""0"" />
        <Member Name=""Tentative"" Value=""1"" />
        <Member Name=""Busy"" Value=""2"" />
        <Member Name=""Oof"" Value=""3"" />
        <Member Name=""WorkingElsewhere"" Value=""4"" />
        <Member Name=""Unknown"" Value=""-1"" />
      </EnumType>
      <EnumType Name=""MeetingMessageType"">
        <Member Name=""None"" Value=""0"" />
        <Member Name=""MeetingRequest"" Value=""1"" />
        <Member Name=""MeetingCancelled"" Value=""2"" />
        <Member Name=""MeetingAccepted"" Value=""3"" />
        <Member Name=""MeetingTenativelyAccepted"" Value=""4"" />
        <Member Name=""MeetingDeclined"" Value=""5"" />
      </EnumType>
      <EnumType Name=""RecurrencePatternType"">
        <Member Name=""Daily"" Value=""0"" />
        <Member Name=""Weekly"" Value=""1"" />
        <Member Name=""AbsoluteMonthly"" Value=""2"" />
        <Member Name=""RelativeMonthly"" Value=""3"" />
        <Member Name=""AbsoluteYearly"" Value=""4"" />
        <Member Name=""RelativeYearly"" Value=""5"" />
      </EnumType>
      <EnumType Name=""RecurrenceRangeType"">
        <Member Name=""EndDate"" Value=""0"" />
        <Member Name=""NoEnd"" Value=""1"" />
        <Member Name=""Numbered"" Value=""2"" />
      </EnumType>
      <EnumType Name=""WeekIndex"">
        <Member Name=""First"" Value=""0"" />
        <Member Name=""Second"" Value=""1"" />
        <Member Name=""Third"" Value=""2"" />
        <Member Name=""Fourth"" Value=""3"" />
        <Member Name=""Last"" Value=""4"" />
      </EnumType>
      <ComplexType Name=""EmailAddress"">
        <Property Name=""Name"" Type=""Edm.String"" />
        <Property Name=""Address"" Type=""Edm.String"" />
      </ComplexType>
      <ComplexType Name=""Recipient"">
        <Property Name=""EmailAddress"" Type=""Microsoft.OutlookServices.EmailAddress"" />
      </ComplexType>
      <ComplexType Name=""Attendee"" BaseType=""Microsoft.OutlookServices.Recipient"">
        <Property Name=""Status"" Type=""Microsoft.OutlookServices.ResponseStatus"" />
        <Property Name=""Type"" Type=""Microsoft.OutlookServices.AttendeeType"" />
      </ComplexType>
      <ComplexType Name=""ItemBody"">
        <Property Name=""ContentType"" Type=""Microsoft.OutlookServices.BodyType"" />
        <Property Name=""Content"" Type=""Edm.String"" />
      </ComplexType>
      <ComplexType Name=""Location"">
        <Property Name=""DisplayName"" Type=""Edm.String"" />
      </ComplexType>
      <ComplexType Name=""ResponseStatus"">
        <Property Name=""Response"" Type=""Microsoft.OutlookServices.ResponseType"" />
        <Property Name=""Time"" Type=""Edm.DateTimeOffset"" />
      </ComplexType>
      <ComplexType Name=""PhysicalAddress"">
        <Property Name=""Street"" Type=""Edm.String"" />
        <Property Name=""City"" Type=""Edm.String"" />
        <Property Name=""State"" Type=""Edm.String"" />
        <Property Name=""CountryOrRegion"" Type=""Edm.String"" />
        <Property Name=""PostalCode"" Type=""Edm.String"" />
      </ComplexType>
      <ComplexType Name=""RecurrencePattern"">
        <Property Name=""Type"" Type=""Microsoft.OutlookServices.RecurrencePatternType"" />
        <Property Name=""Interval"" Type=""Edm.Int32"" Nullable=""false"" />
        <Property Name=""DayOfMonth"" Type=""Edm.Int32"" Nullable=""false"" />
        <Property Name=""Month"" Type=""Edm.Int32"" Nullable=""false"" />
        <Property Name=""DaysOfWeek"" Type=""Collection(Microsoft.OutlookServices.DayOfWeek)"" />
        <Property Name=""FirstDayOfWeek"" Type=""Microsoft.OutlookServices.DayOfWeek"" />
        <Property Name=""Index"" Type=""Microsoft.OutlookServices.WeekIndex"" />
      </ComplexType>
      <ComplexType Name=""RecurrenceRange"">
        <Property Name=""Type"" Type=""Microsoft.OutlookServices.RecurrenceRangeType"" />
        <Property Name=""StartDate"" Type=""Edm.DateTimeOffset"" />
        <Property Name=""EndDate"" Type=""Edm.DateTimeOffset"" />
        <Property Name=""NumberOfOccurrences"" Type=""Edm.Int32"" Nullable=""false"" />
      </ComplexType>
      <ComplexType Name=""PatternedRecurrence"">
        <Property Name=""Pattern"" Type=""Microsoft.OutlookServices.RecurrencePattern"" />
        <Property Name=""Range"" Type=""Microsoft.OutlookServices.RecurrenceRange"" />
      </ComplexType>
      <EntityType Name=""Entity"" Abstract=""true"">
        <Key>
          <PropertyRef Name=""Id"" />
        </Key>
        <Property Name=""Id"" Type=""Edm.String"" />
      </EntityType>
      <EntityType Name=""User"" BaseType=""Microsoft.OutlookServices.Entity"">
        <Property Name=""DisplayName"" Type=""Edm.String"" />
        <Property Name=""Alias"" Type=""Edm.String"" />
        <Property Name=""MailboxGuid"" Type=""Edm.Guid"" />
        <NavigationProperty Name=""Folders"" Type=""Collection(Microsoft.OutlookServices.Folder)"" ContainsTarget=""true"" />
        <NavigationProperty Name=""Messages"" Type=""Collection(Microsoft.OutlookServices.Message)"" ContainsTarget=""true"" />
        <NavigationProperty Name=""RootFolder"" Type=""Microsoft.OutlookServices.Folder"" ContainsTarget=""true"" />
        <NavigationProperty Name=""Calendars"" Type=""Collection(Microsoft.OutlookServices.Calendar)"" ContainsTarget=""true"" />
        <NavigationProperty Name=""Calendar"" Type=""Microsoft.OutlookServices.Calendar"" ContainsTarget=""true"" />
        <NavigationProperty Name=""CalendarGroups"" Type=""Collection(Microsoft.OutlookServices.CalendarGroup)"" ContainsTarget=""true"" />
        <NavigationProperty Name=""Events"" Type=""Collection(Microsoft.OutlookServices.Event)"" ContainsTarget=""true"" />
        <NavigationProperty Name=""CalendarView"" Type=""Collection(Microsoft.OutlookServices.Event)"" ContainsTarget=""true"" />
        <NavigationProperty Name=""Contacts"" Type=""Collection(Microsoft.OutlookServices.Contact)"" ContainsTarget=""true"" />
        <NavigationProperty Name=""ContactFolders"" Type=""Collection(Microsoft.OutlookServices.ContactFolder)"" ContainsTarget=""true"" />
      </EntityType>
      <Action Name=""SendMail"" IsBound=""true"" EntitySetPath=""bindingParameter"">
        <Parameter Name=""bindingParameter"" Type=""Microsoft.OutlookServices.User"" />
        <Parameter Name=""Message"" Type=""Microsoft.OutlookServices.Message"" Nullable=""false"" />
        <Parameter Name=""SaveToSentItems"" Type=""Edm.Boolean"" />
      </Action>
      <EntityType Name=""Folder"" BaseType=""Microsoft.OutlookServices.Entity"">
        <Property Name=""ParentFolderId"" Type=""Edm.String"" />
        <Property Name=""DisplayName"" Type=""Edm.String"" />
        <Property Name=""ChildFolderCount"" Type=""Edm.Int32"" />
        <NavigationProperty Name=""ChildFolders"" Type=""Collection(Microsoft.OutlookServices.Folder)"" ContainsTarget=""true"" />
        <NavigationProperty Name=""Messages"" Type=""Collection(Microsoft.OutlookServices.Message)"" ContainsTarget=""true"" />
      </EntityType>
      <Action Name=""Copy"" IsBound=""true"" EntitySetPath=""bindingParameter"">
        <Parameter Name=""bindingParameter"" Type=""Microsoft.OutlookServices.Folder"" />
        <Parameter Name=""DestinationId"" Type=""Edm.String"" />
        <ReturnType Type=""Microsoft.OutlookServices.Folder"" />
      </Action>
      <Action Name=""Move"" IsBound=""true"" EntitySetPath=""bindingParameter"">
        <Parameter Name=""bindingParameter"" Type=""Microsoft.OutlookServices.Folder"" />
        <Parameter Name=""DestinationId"" Type=""Edm.String"" />
        <ReturnType Type=""Microsoft.OutlookServices.Folder"" />
      </Action>
      <EntityType Name=""Item"" BaseType=""Microsoft.OutlookServices.Entity"" Abstract=""true"">
        <Property Name=""ChangeKey"" Type=""Edm.String"" />
        <Property Name=""Categories"" Type=""Collection(Edm.String)"" />
        <Property Name=""DateTimeCreated"" Type=""Edm.DateTimeOffset"" />
        <Property Name=""DateTimeLastModified"" Type=""Edm.DateTimeOffset"" />
      </EntityType>
      <EntityType Name=""Message"" BaseType=""Microsoft.OutlookServices.Item"">
        <Property Name=""Subject"" Type=""Edm.String"" />
        <Property Name=""Body"" Type=""Microsoft.OutlookServices.ItemBody"" />
        <Property Name=""BodyPreview"" Type=""Edm.String"" />
        <Property Name=""Importance"" Type=""Microsoft.OutlookServices.Importance"" />
        <Property Name=""HasAttachments"" Type=""Edm.Boolean"" />
        <Property Name=""ParentFolderId"" Type=""Edm.String"" />
        <Property Name=""From"" Type=""Microsoft.OutlookServices.Recipient"" />
        <Property Name=""Sender"" Type=""Microsoft.OutlookServices.Recipient"" />
        <Property Name=""ToRecipients"" Type=""Collection(Microsoft.OutlookServices.Recipient)"" />
        <Property Name=""CcRecipients"" Type=""Collection(Microsoft.OutlookServices.Recipient)"" />
        <Property Name=""BccRecipients"" Type=""Collection(Microsoft.OutlookServices.Recipient)"" />
        <Property Name=""ReplyTo"" Type=""Collection(Microsoft.OutlookServices.Recipient)"" />
        <Property Name=""ConversationId"" Type=""Edm.String"" />
        <Property Name=""UniqueBody"" Type=""Microsoft.OutlookServices.ItemBody"" />
        <Property Name=""DateTimeReceived"" Type=""Edm.DateTimeOffset"" />
        <Property Name=""DateTimeSent"" Type=""Edm.DateTimeOffset"" />
        <Property Name=""IsDeliveryReceiptRequested"" Type=""Edm.Boolean"" />
        <Property Name=""IsReadReceiptRequested"" Type=""Edm.Boolean"" />
        <Property Name=""IsDraft"" Type=""Edm.Boolean"" />
        <Property Name=""IsRead"" Type=""Edm.Boolean"" />
        <NavigationProperty Name=""Attachments"" Type=""Collection(Microsoft.OutlookServices.Attachment)"" ContainsTarget=""true"" />
      </EntityType>
      <Action Name=""Copy"" IsBound=""true"" EntitySetPath=""bindingParameter"">
        <Parameter Name=""bindingParameter"" Type=""Microsoft.OutlookServices.Message"" />
        <Parameter Name=""DestinationId"" Type=""Edm.String"" />
        <ReturnType Type=""Microsoft.OutlookServices.Message"" />
      </Action>
      <Action Name=""Move"" IsBound=""true"" EntitySetPath=""bindingParameter"">
        <Parameter Name=""bindingParameter"" Type=""Microsoft.OutlookServices.Message"" />
        <Parameter Name=""DestinationId"" Type=""Edm.String"" />
        <ReturnType Type=""Microsoft.OutlookServices.Message"" />
      </Action>
      <Action Name=""CreateReply"" IsBound=""true"" EntitySetPath=""bindingParameter"">
        <Parameter Name=""bindingParameter"" Type=""Microsoft.OutlookServices.Message"" />
        <ReturnType Type=""Microsoft.OutlookServices.Message"" />
      </Action>
      <Action Name=""CreateReplyAll"" IsBound=""true"" EntitySetPath=""bindingParameter"">
        <Parameter Name=""bindingParameter"" Type=""Microsoft.OutlookServices.Message"" />
        <ReturnType Type=""Microsoft.OutlookServices.Message"" />
      </Action>
      <Action Name=""CreateForward"" IsBound=""true"" EntitySetPath=""bindingParameter"">
        <Parameter Name=""bindingParameter"" Type=""Microsoft.OutlookServices.Message"" />
        <ReturnType Type=""Microsoft.OutlookServices.Message"" />
      </Action>
      <Action Name=""Reply"" IsBound=""true"" EntitySetPath=""bindingParameter"">
        <Parameter Name=""bindingParameter"" Type=""Microsoft.OutlookServices.Message"" />
        <Parameter Name=""Comment"" Type=""Edm.String"" />
      </Action>
      <Action Name=""ReplyAll"" IsBound=""true"" EntitySetPath=""bindingParameter"">
        <Parameter Name=""bindingParameter"" Type=""Microsoft.OutlookServices.Message"" />
        <Parameter Name=""Comment"" Type=""Edm.String"" />
      </Action>
      <Action Name=""Forward"" IsBound=""true"" EntitySetPath=""bindingParameter"">
        <Parameter Name=""bindingParameter"" Type=""Microsoft.OutlookServices.Message"" />
        <Parameter Name=""Comment"" Type=""Edm.String"" />
        <Parameter Name=""ToRecipients"" Type=""Collection(Microsoft.OutlookServices.Recipient)"" />
      </Action>
      <Action Name=""Send"" IsBound=""true"" EntitySetPath=""bindingParameter"">
        <Parameter Name=""bindingParameter"" Type=""Microsoft.OutlookServices.Message"" />
      </Action>
      <EntityType Name=""Attachment"" BaseType=""Microsoft.OutlookServices.Entity"" Abstract=""true"">
        <Property Name=""Name"" Type=""Edm.String"" />
        <Property Name=""ContentType"" Type=""Edm.String"" />
        <Property Name=""Size"" Type=""Edm.Int32"" Nullable=""false"" />
        <Property Name=""IsInline"" Type=""Edm.Boolean"" Nullable=""false"" />
        <Property Name=""DateTimeLastModified"" Type=""Edm.DateTimeOffset"" />
      </EntityType>
      <EntityType Name=""FileAttachment"" BaseType=""Microsoft.OutlookServices.Attachment"">
        <Property Name=""ContentId"" Type=""Edm.String"" />
        <Property Name=""ContentLocation"" Type=""Edm.String"" />
        <Property Name=""IsContactPhoto"" Type=""Edm.Boolean"" Nullable=""false"" />
        <Property Name=""ContentBytes"" Type=""Edm.Binary"" />
      </EntityType>
      <EntityType Name=""ItemAttachment"" BaseType=""Microsoft.OutlookServices.Attachment"">
        <NavigationProperty Name=""Item"" Type=""Microsoft.OutlookServices.Item"" ContainsTarget=""true"" />
      </EntityType>
      <EntityType Name=""Calendar"" BaseType=""Microsoft.OutlookServices.Entity"">
        <Property Name=""Name"" Type=""Edm.String"" />
        <Property Name=""ChangeKey"" Type=""Edm.String"" />
        <NavigationProperty Name=""CalendarView"" Type=""Collection(Microsoft.OutlookServices.Event)"" ContainsTarget=""true"" />
        <NavigationProperty Name=""Events"" Type=""Collection(Microsoft.OutlookServices.Event)"" ContainsTarget=""true"" />
      </EntityType>
      <EntityType Name=""CalendarGroup"" BaseType=""Microsoft.OutlookServices.Entity"">
        <Property Name=""Name"" Type=""Edm.String"" />
        <Property Name=""ChangeKey"" Type=""Edm.String"" />
        <Property Name=""ClassId"" Type=""Edm.Guid"" />
        <NavigationProperty Name=""Calendars"" Type=""Collection(Microsoft.OutlookServices.Calendar)"" ContainsTarget=""true"" />
      </EntityType>
      <EntityType Name=""Event"" BaseType=""Microsoft.OutlookServices.Item"">
        <Property Name=""Subject"" Type=""Edm.String"" />
        <Property Name=""Body"" Type=""Microsoft.OutlookServices.ItemBody"" />
        <Property Name=""BodyPreview"" Type=""Edm.String"" />
        <Property Name=""Importance"" Type=""Microsoft.OutlookServices.Importance"" />
        <Property Name=""HasAttachments"" Type=""Edm.Boolean"" />
        <Property Name=""Start"" Type=""Edm.DateTimeOffset"" />
        <Property Name=""End"" Type=""Edm.DateTimeOffset"" />
        <Property Name=""Location"" Type=""Microsoft.OutlookServices.Location"" />
        <Property Name=""ShowAs"" Type=""Microsoft.OutlookServices.FreeBusyStatus"" />
        <Property Name=""IsAllDay"" Type=""Edm.Boolean"" />
        <Property Name=""IsCancelled"" Type=""Edm.Boolean"" />
        <Property Name=""IsOrganizer"" Type=""Edm.Boolean"" />
        <Property Name=""ResponseRequested"" Type=""Edm.Boolean"" />
        <Property Name=""Type"" Type=""Microsoft.OutlookServices.EventType"" />
        <Property Name=""SeriesMasterId"" Type=""Edm.String"" />
        <Property Name=""Attendees"" Type=""Collection(Microsoft.OutlookServices.Attendee)"" />
        <Property Name=""Recurrence"" Type=""Microsoft.OutlookServices.PatternedRecurrence"" />
        <Property Name=""Organizer"" Type=""Microsoft.OutlookServices.Recipient"" />
        <NavigationProperty Name=""Attachments"" Type=""Collection(Microsoft.OutlookServices.Attachment)"" ContainsTarget=""true"" />
        <NavigationProperty Name=""Calendar"" Type=""Microsoft.OutlookServices.Calendar"" ContainsTarget=""true"" />
        <NavigationProperty Name=""Instances"" Type=""Collection(Microsoft.OutlookServices.Event)"" ContainsTarget=""true"" />
      </EntityType>
      <Action Name=""Accept"" IsBound=""true"" EntitySetPath=""bindingParameter"">
        <Parameter Name=""bindingParameter"" Type=""Microsoft.OutlookServices.Event"" />
        <Parameter Name=""Comment"" Type=""Edm.String"" />
      </Action>
      <Action Name=""Decline"" IsBound=""true"" EntitySetPath=""bindingParameter"">
        <Parameter Name=""bindingParameter"" Type=""Microsoft.OutlookServices.Event"" />
        <Parameter Name=""Comment"" Type=""Edm.String"" />
      </Action>
      <Action Name=""TentativelyAccept"" IsBound=""true"" EntitySetPath=""bindingParameter"">
        <Parameter Name=""bindingParameter"" Type=""Microsoft.OutlookServices.Event"" />
        <Parameter Name=""Comment"" Type=""Edm.String"" />
      </Action>
      <EntityType Name=""Contact"" BaseType=""Microsoft.OutlookServices.Item"">
        <Property Name=""ParentFolderId"" Type=""Edm.String"" />
        <Property Name=""Birthday"" Type=""Edm.DateTimeOffset"" />
        <Property Name=""FileAs"" Type=""Edm.String"" />
        <Property Name=""DisplayName"" Type=""Edm.String"" />
        <Property Name=""GivenName"" Type=""Edm.String"" />
        <Property Name=""Initials"" Type=""Edm.String"" />
        <Property Name=""MiddleName"" Type=""Edm.String"" />
        <Property Name=""NickName"" Type=""Edm.String"" />
        <Property Name=""Surname"" Type=""Edm.String"" />
        <Property Name=""Title"" Type=""Edm.String"" />
        <Property Name=""Generation"" Type=""Edm.String"" />
        <Property Name=""EmailAddresses"" Type=""Collection(Microsoft.OutlookServices.EmailAddress)"" />
        <Property Name=""ImAddresses"" Type=""Collection(Edm.String)"" />
        <Property Name=""JobTitle"" Type=""Edm.String"" />
        <Property Name=""CompanyName"" Type=""Edm.String"" />
        <Property Name=""Department"" Type=""Edm.String"" />
        <Property Name=""OfficeLocation"" Type=""Edm.String"" />
        <Property Name=""Profession"" Type=""Edm.String"" />
        <Property Name=""BusinessHomePage"" Type=""Edm.String"" />
        <Property Name=""AssistantName"" Type=""Edm.String"" />
        <Property Name=""Manager"" Type=""Edm.String"" />
        <Property Name=""HomePhones"" Type=""Collection(Edm.String)"" />
        <Property Name=""BusinessPhones"" Type=""Collection(Edm.String)"" />
        <Property Name=""MobilePhone1"" Type=""Edm.String"" />
        <Property Name=""HomeAddress"" Type=""Microsoft.OutlookServices.PhysicalAddress"" />
        <Property Name=""BusinessAddress"" Type=""Microsoft.OutlookServices.PhysicalAddress"" />
        <Property Name=""OtherAddress"" Type=""Microsoft.OutlookServices.PhysicalAddress"" />
        <Property Name=""YomiCompanyName"" Type=""Edm.String"" />
        <Property Name=""YomiGivenName"" Type=""Edm.String"" />
        <Property Name=""YomiSurname"" Type=""Edm.String"" />
      </EntityType>
      <EntityType Name=""ContactFolder"" BaseType=""Microsoft.OutlookServices.Entity"">
        <Property Name=""ParentFolderId"" Type=""Edm.String"" />
        <Property Name=""DisplayName"" Type=""Edm.String"" />
        <NavigationProperty Name=""Contacts"" Type=""Collection(Microsoft.OutlookServices.Contact)"" ContainsTarget=""true"" />
        <NavigationProperty Name=""ChildFolders"" Type=""Collection(Microsoft.OutlookServices.ContactFolder)"" ContainsTarget=""true"" />
      </EntityType>
      <EntityContainer Name=""EntityContainer"">
        <EntitySet Name=""Users"" EntityType=""Microsoft.OutlookServices.User"" />
        <Singleton Name=""Me"" Type=""Microsoft.OutlookServices.User"" />
      </EntityContainer>
    </Schema>
  </edmx:DataServices>
</edmx:Edmx>";
            
            public static global::Microsoft.OData.Edm.IEdmModel GetInstance()
            {
                return ParsedModel;
            }
            
            private static global::Microsoft.OData.Edm.IEdmModel LoadModelFromString()
            {
                global::System.Xml.XmlReader reader = CreateXmlReader(Edmx);
                try
                {
                    return global::Microsoft.OData.Edm.Csdl.EdmxReader.Parse(reader);
                }
                finally
                {
                    ((global::System.IDisposable)(reader)).Dispose();
                }
            }
            
            private static global::System.Xml.XmlReader CreateXmlReader(string edmxToParse)
            {
                return global::System.Xml.XmlReader.Create(new global::System.IO.StringReader(edmxToParse));
            }
        }
    }
    public partial class EmailAddress: Microsoft.Office365.OutlookServices.Extensions.ComplexTypeBase 
    {

        public EmailAddress() : base() 
        {

        }
        // tag0002
        
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if (this._Name != value)
                {
                    this._Name = value;
                    OnPropertyChanged("Name");
                }
            }
        }
        
        private string _Name;


        // tag0002
        
        public string Address
        {
            get
            {
                return this._Address;
            }
            set
            {
                if (this._Address != value)
                {
                    this._Address = value;
                    OnPropertyChanged("Address");
                }
            }
        }
        
        private string _Address;


    }

    public partial class Recipient: Microsoft.Office365.OutlookServices.Extensions.ComplexTypeBase 
    {

        public Recipient() : base() 
        {

        }
        // tag0002
        
        public global::Microsoft.Office365.OutlookServices.EmailAddress EmailAddress
        {
            get
            {
                return this._EmailAddress;
            }
            set
            {
                if (this._EmailAddress != value)
                {
                    this._EmailAddress = value;
                    OnPropertyChanged("EmailAddress");
                }
            }
        }
        
        private global::Microsoft.Office365.OutlookServices.EmailAddress _EmailAddress;


    }

    public partial class Attendee : Recipient 
    {

        public Attendee() : base() 
        {

        }
        // tag0002
        
        public global::Microsoft.Office365.OutlookServices.ResponseStatus Status
        {
            get
            {
                return this._Status;
            }
            set
            {
                if (this._Status != value)
                {
                    this._Status = value;
                    OnPropertyChanged("Status");
                }
            }
        }
        
        private global::Microsoft.Office365.OutlookServices.ResponseStatus _Status;


        // tag0002
        
        public global::Microsoft.Office365.OutlookServices.AttendeeType Type
        {
            get
            {
                return this._Type;
            }
            set
            {
                if (this._Type != value)
                {
                    this._Type = value;
                    OnPropertyChanged("Type");
                }
            }
        }
        
        private global::Microsoft.Office365.OutlookServices.AttendeeType _Type;


    }

    public partial class ItemBody: Microsoft.Office365.OutlookServices.Extensions.ComplexTypeBase 
    {

        public ItemBody() : base() 
        {

        }
        // tag0002
        
        public global::Microsoft.Office365.OutlookServices.BodyType ContentType
        {
            get
            {
                return this._ContentType;
            }
            set
            {
                if (this._ContentType != value)
                {
                    this._ContentType = value;
                    OnPropertyChanged("ContentType");
                }
            }
        }
        
        private global::Microsoft.Office365.OutlookServices.BodyType _ContentType;


        // tag0002
        
        public string Content
        {
            get
            {
                return this._Content;
            }
            set
            {
                if (this._Content != value)
                {
                    this._Content = value;
                    OnPropertyChanged("Content");
                }
            }
        }
        
        private string _Content;


    }

    public partial class Location: Microsoft.Office365.OutlookServices.Extensions.ComplexTypeBase 
    {

        public Location() : base() 
        {

        }
        // tag0002
        
        public string DisplayName
        {
            get
            {
                return this._DisplayName;
            }
            set
            {
                if (this._DisplayName != value)
                {
                    this._DisplayName = value;
                    OnPropertyChanged("DisplayName");
                }
            }
        }
        
        private string _DisplayName;


    }

    public partial class ResponseStatus: Microsoft.Office365.OutlookServices.Extensions.ComplexTypeBase 
    {

        public ResponseStatus() : base() 
        {

        }
        // tag0002
        
        public global::Microsoft.Office365.OutlookServices.ResponseType Response
        {
            get
            {
                return this._Response;
            }
            set
            {
                if (this._Response != value)
                {
                    this._Response = value;
                    OnPropertyChanged("Response");
                }
            }
        }
        
        private global::Microsoft.Office365.OutlookServices.ResponseType _Response;


        // tag0002
        
        public global::System.Nullable<global::System.DateTimeOffset> Time
        {
            get
            {
                return this._Time;
            }
            set
            {
                if (this._Time != value)
                {
                    this._Time = value;
                    OnPropertyChanged("Time");
                }
            }
        }
        
        private global::System.Nullable<global::System.DateTimeOffset> _Time;


    }

    public partial class PhysicalAddress: Microsoft.Office365.OutlookServices.Extensions.ComplexTypeBase 
    {

        public PhysicalAddress() : base() 
        {

        }
        // tag0002
        
        public string Street
        {
            get
            {
                return this._Street;
            }
            set
            {
                if (this._Street != value)
                {
                    this._Street = value;
                    OnPropertyChanged("Street");
                }
            }
        }
        
        private string _Street;


        // tag0002
        
        public string City
        {
            get
            {
                return this._City;
            }
            set
            {
                if (this._City != value)
                {
                    this._City = value;
                    OnPropertyChanged("City");
                }
            }
        }
        
        private string _City;


        // tag0002
        
        public string State
        {
            get
            {
                return this._State;
            }
            set
            {
                if (this._State != value)
                {
                    this._State = value;
                    OnPropertyChanged("State");
                }
            }
        }
        
        private string _State;


        // tag0002
        
        public string CountryOrRegion
        {
            get
            {
                return this._CountryOrRegion;
            }
            set
            {
                if (this._CountryOrRegion != value)
                {
                    this._CountryOrRegion = value;
                    OnPropertyChanged("CountryOrRegion");
                }
            }
        }
        
        private string _CountryOrRegion;


        // tag0002
        
        public string PostalCode
        {
            get
            {
                return this._PostalCode;
            }
            set
            {
                if (this._PostalCode != value)
                {
                    this._PostalCode = value;
                    OnPropertyChanged("PostalCode");
                }
            }
        }
        
        private string _PostalCode;


    }

    public partial class RecurrencePattern: Microsoft.Office365.OutlookServices.Extensions.ComplexTypeBase 
    {

        public RecurrencePattern() : base() 
        {

        }
        // tag0002
        
        public global::Microsoft.Office365.OutlookServices.RecurrencePatternType Type
        {
            get
            {
                return this._Type;
            }
            set
            {
                if (this._Type != value)
                {
                    this._Type = value;
                    OnPropertyChanged("Type");
                }
            }
        }
        
        private global::Microsoft.Office365.OutlookServices.RecurrencePatternType _Type;


        // tag0002
        
        public int Interval
        {
            get
            {
                return this._Interval;
            }
            set
            {
                if (this._Interval != value)
                {
                    this._Interval = value;
                    OnPropertyChanged("Interval");
                }
            }
        }
        
        private int _Interval;


        // tag0002
        
        public int DayOfMonth
        {
            get
            {
                return this._DayOfMonth;
            }
            set
            {
                if (this._DayOfMonth != value)
                {
                    this._DayOfMonth = value;
                    OnPropertyChanged("DayOfMonth");
                }
            }
        }
        
        private int _DayOfMonth;


        // tag0002
        
        public int Month
        {
            get
            {
                return this._Month;
            }
            set
            {
                if (this._Month != value)
                {
                    this._Month = value;
                    OnPropertyChanged("Month");
                }
            }
        }
        
        private int _Month;


        // tag0002
        
        public global::System.Collections.Generic.IList<global::Microsoft.Office365.OutlookServices.DayOfWeek> DaysOfWeek
        {
            get
            {
                if (this._DaysOfWeek == default(global::System.Collections.Generic.IList<global::Microsoft.Office365.OutlookServices.DayOfWeek>))
                {
                    this._DaysOfWeek = new NonEntityTypeCollectionImpl<global::Microsoft.Office365.OutlookServices.DayOfWeek>();
                    this._DaysOfWeek.SetContainer(() => GetContainingEntity("DaysOfWeek"));
                }

                return this._DaysOfWeek;
            }
            set
            {
                DaysOfWeek.Clear();
                if (value != null)
                {
                    foreach (var i in value) 
                    {
                        DaysOfWeek.Add(i);
                    }
                }
            }
        }
        
        private NonEntityTypeCollectionImpl<global::Microsoft.Office365.OutlookServices.DayOfWeek> _DaysOfWeek;


        // tag0002
        
        public global::Microsoft.Office365.OutlookServices.DayOfWeek FirstDayOfWeek
        {
            get
            {
                return this._FirstDayOfWeek;
            }
            set
            {
                if (this._FirstDayOfWeek != value)
                {
                    this._FirstDayOfWeek = value;
                    OnPropertyChanged("FirstDayOfWeek");
                }
            }
        }
        
        private global::Microsoft.Office365.OutlookServices.DayOfWeek _FirstDayOfWeek;


        // tag0002
        
        public global::Microsoft.Office365.OutlookServices.WeekIndex Index
        {
            get
            {
                return this._Index;
            }
            set
            {
                if (this._Index != value)
                {
                    this._Index = value;
                    OnPropertyChanged("Index");
                }
            }
        }
        
        private global::Microsoft.Office365.OutlookServices.WeekIndex _Index;


    }

    public partial class RecurrenceRange: Microsoft.Office365.OutlookServices.Extensions.ComplexTypeBase 
    {

        public RecurrenceRange() : base() 
        {

        }
        // tag0002
        
        public global::Microsoft.Office365.OutlookServices.RecurrenceRangeType Type
        {
            get
            {
                return this._Type;
            }
            set
            {
                if (this._Type != value)
                {
                    this._Type = value;
                    OnPropertyChanged("Type");
                }
            }
        }
        
        private global::Microsoft.Office365.OutlookServices.RecurrenceRangeType _Type;


        // tag0002
        
        public global::System.Nullable<global::System.DateTimeOffset> StartDate
        {
            get
            {
                return this._StartDate;
            }
            set
            {
                if (this._StartDate != value)
                {
                    this._StartDate = value;
                    OnPropertyChanged("StartDate");
                }
            }
        }
        
        private global::System.Nullable<global::System.DateTimeOffset> _StartDate;


        // tag0002
        
        public global::System.Nullable<global::System.DateTimeOffset> EndDate
        {
            get
            {
                return this._EndDate;
            }
            set
            {
                if (this._EndDate != value)
                {
                    this._EndDate = value;
                    OnPropertyChanged("EndDate");
                }
            }
        }
        
        private global::System.Nullable<global::System.DateTimeOffset> _EndDate;


        // tag0002
        
        public int NumberOfOccurrences
        {
            get
            {
                return this._NumberOfOccurrences;
            }
            set
            {
                if (this._NumberOfOccurrences != value)
                {
                    this._NumberOfOccurrences = value;
                    OnPropertyChanged("NumberOfOccurrences");
                }
            }
        }
        
        private int _NumberOfOccurrences;


    }

    public partial class PatternedRecurrence: Microsoft.Office365.OutlookServices.Extensions.ComplexTypeBase 
    {

        public PatternedRecurrence() : base() 
        {

        }
        // tag0002
        
        public global::Microsoft.Office365.OutlookServices.RecurrencePattern Pattern
        {
            get
            {
                return this._Pattern;
            }
            set
            {
                if (this._Pattern != value)
                {
                    this._Pattern = value;
                    OnPropertyChanged("Pattern");
                }
            }
        }
        
        private global::Microsoft.Office365.OutlookServices.RecurrencePattern _Pattern;


        // tag0002
        
        public global::Microsoft.Office365.OutlookServices.RecurrenceRange Range
        {
            get
            {
                return this._Range;
            }
            set
            {
                if (this._Range != value)
                {
                    this._Range = value;
                    OnPropertyChanged("Range");
                }
            }
        }
        
        private global::Microsoft.Office365.OutlookServices.RecurrenceRange _Range;


    }

    [Microsoft.Office365.OutlookServices.Extensions.LowerCaseProperty]
    public partial interface IEntityFetcher
    {
    }

    [Microsoft.Office365.OutlookServices.Extensions.LowerCaseProperty]
    public partial interface IEntity: Microsoft.Office365.OutlookServices.Extensions.IEntityBase
    {
        string Id
        {
            get; set;
        }
    }

    internal partial class EntityFetcher : Microsoft.Office365.OutlookServices.Extensions.RestShallowObjectFetcher , IEntityFetcher
    {
    }

    [global::Microsoft.OData.Client.Key("Id")]
    abstract public partial class Entity: global::Microsoft.Office365.OutlookServices.Extensions.EntityBase , IEntity, IEntityFetcher
    {
        public Entity() : base() 
        {

        }
        // tag0002
        
        public string Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this._Id = value;
                    OnPropertyChanged("Id");
                }
            }
        }
        
        private string _Id;


    }

    [Microsoft.Office365.OutlookServices.Extensions.LowerCaseProperty]
    public partial interface IUserFetcher : IEntityFetcher
    {
   
        new global::System.Threading.Tasks.Task<IUser> ExecuteAsync();

        new IUserFetcher Expand<TTarget>(System.Linq.Expressions.Expression<global::System.Func<IUser, TTarget>> navigationPropertyAccessor);

        global::Microsoft.Office365.OutlookServices.IFolderCollection Folders
        {
            get; 
        }

        global::Microsoft.Office365.OutlookServices.IMessageCollection Messages
        {
            get; 
        }

        global::Microsoft.Office365.OutlookServices.IFolderFetcher RootFolder
        {
            get; 
        }
        global::Microsoft.Office365.OutlookServices.ICalendarCollection Calendars
        {
            get; 
        }

        global::Microsoft.Office365.OutlookServices.ICalendarFetcher Calendar
        {
            get; 
        }
        global::Microsoft.Office365.OutlookServices.ICalendarGroupCollection CalendarGroups
        {
            get; 
        }

        global::Microsoft.Office365.OutlookServices.IEventCollection Events
        {
            get; 
        }

        global::Microsoft.Office365.OutlookServices.IEventCollection CalendarView
        {
            get; 
        }

        global::Microsoft.Office365.OutlookServices.IContactCollection Contacts
        {
            get; 
        }

        global::Microsoft.Office365.OutlookServices.IContactFolderCollection ContactFolders
        {
            get; 
        }

// tag0009
         global::System.Threading.Tasks.Task SendMailAsync(global::Microsoft.Office365.OutlookServices.IMessage Message, global::System.Nullable<bool> SaveToSentItems);
    }

    [Microsoft.Office365.OutlookServices.Extensions.LowerCaseProperty]
    public partial interface IUser:  IEntity
    {
        string DisplayName
        {
            get; set;
        }
        string Alias
        {
            get; set;
        }
        global::System.Nullable<global::System.Guid> MailboxGuid
        {
            get; set;
        }
        Microsoft.Office365.OutlookServices.Extensions.IPagedCollection<global::Microsoft.Office365.OutlookServices.IFolder> Folders
        {
            get; 
        }

        Microsoft.Office365.OutlookServices.Extensions.IPagedCollection<global::Microsoft.Office365.OutlookServices.IMessage> Messages
        {
            get; 
        }

        global::Microsoft.Office365.OutlookServices.IFolder RootFolder
        {
            get; set;
        }
        Microsoft.Office365.OutlookServices.Extensions.IPagedCollection<global::Microsoft.Office365.OutlookServices.ICalendar> Calendars
        {
            get; 
        }

        global::Microsoft.Office365.OutlookServices.ICalendar Calendar
        {
            get; set;
        }
        Microsoft.Office365.OutlookServices.Extensions.IPagedCollection<global::Microsoft.Office365.OutlookServices.ICalendarGroup> CalendarGroups
        {
            get; 
        }

        Microsoft.Office365.OutlookServices.Extensions.IPagedCollection<global::Microsoft.Office365.OutlookServices.IEvent> Events
        {
            get; 
        }

        Microsoft.Office365.OutlookServices.Extensions.IPagedCollection<global::Microsoft.Office365.OutlookServices.IEvent> CalendarView
        {
            get; 
        }

        Microsoft.Office365.OutlookServices.Extensions.IPagedCollection<global::Microsoft.Office365.OutlookServices.IContact> Contacts
        {
            get; 
        }

        Microsoft.Office365.OutlookServices.Extensions.IPagedCollection<global::Microsoft.Office365.OutlookServices.IContactFolder> ContactFolders
        {
            get; 
        }

// tag0009
         global::System.Threading.Tasks.Task SendMailAsync(global::Microsoft.Office365.OutlookServices.IMessage Message, global::System.Nullable<bool> SaveToSentItems);
    }

    internal partial class UserFetcher : EntityFetcher , IUserFetcher
    {

        // tag0003
        public global::Microsoft.Office365.OutlookServices.IFolderCollection Folders
        {
            get
            {
                if ((this._Folders == null))
                {
                    this._Folders = new global::Microsoft.Office365.OutlookServices.FolderCollection(
                        Context != null ? Context.CreateQuery<global::Microsoft.Office365.OutlookServices.Folder>(GetPath("Folders")) : null,
                        Context, 
                        this, 
                        GetPath("Folders"));
                }

                return this._Folders;
            }
        }

        private global::Microsoft.Office365.OutlookServices.IFolderCollection _Folders;

        // tag0003
        public global::Microsoft.Office365.OutlookServices.IMessageCollection Messages
        {
            get
            {
                if ((this._Messages == null))
                {
                    this._Messages = new global::Microsoft.Office365.OutlookServices.MessageCollection(
                        Context != null ? Context.CreateQuery<global::Microsoft.Office365.OutlookServices.Message>(GetPath("Messages")) : null,
                        Context, 
                        this, 
                        GetPath("Messages"));
                }

                return this._Messages;
            }
        }

        private global::Microsoft.Office365.OutlookServices.IMessageCollection _Messages;
        // tag 0004
        public global::Microsoft.Office365.OutlookServices.IFolderFetcher RootFolder
        {
            get
            {
                if ((this._RootFolder == null))
                {
                    this._RootFolder = new global::Microsoft.Office365.OutlookServices.FolderFetcher();
                    this._RootFolder.Initialize(this.Context, GetPath("RootFolder"));

                }
                return this._RootFolder;
            }
        }

        private global::Microsoft.Office365.OutlookServices.FolderFetcher _RootFolder;

        // tag0003
        public global::Microsoft.Office365.OutlookServices.ICalendarCollection Calendars
        {
            get
            {
                if ((this._Calendars == null))
                {
                    this._Calendars = new global::Microsoft.Office365.OutlookServices.CalendarCollection(
                        Context != null ? Context.CreateQuery<global::Microsoft.Office365.OutlookServices.Calendar>(GetPath("Calendars")) : null,
                        Context, 
                        this, 
                        GetPath("Calendars"));
                }

                return this._Calendars;
            }
        }

        private global::Microsoft.Office365.OutlookServices.ICalendarCollection _Calendars;
        // tag 0004
        public global::Microsoft.Office365.OutlookServices.ICalendarFetcher Calendar
        {
            get
            {
                if ((this._Calendar == null))
                {
                    this._Calendar = new global::Microsoft.Office365.OutlookServices.CalendarFetcher();
                    this._Calendar.Initialize(this.Context, GetPath("Calendar"));

                }
                return this._Calendar;
            }
        }

        private global::Microsoft.Office365.OutlookServices.CalendarFetcher _Calendar;

        // tag0003
        public global::Microsoft.Office365.OutlookServices.ICalendarGroupCollection CalendarGroups
        {
            get
            {
                if ((this._CalendarGroups == null))
                {
                    this._CalendarGroups = new global::Microsoft.Office365.OutlookServices.CalendarGroupCollection(
                        Context != null ? Context.CreateQuery<global::Microsoft.Office365.OutlookServices.CalendarGroup>(GetPath("CalendarGroups")) : null,
                        Context, 
                        this, 
                        GetPath("CalendarGroups"));
                }

                return this._CalendarGroups;
            }
        }

        private global::Microsoft.Office365.OutlookServices.ICalendarGroupCollection _CalendarGroups;

        // tag0003
        public global::Microsoft.Office365.OutlookServices.IEventCollection Events
        {
            get
            {
                if ((this._Events == null))
                {
                    this._Events = new global::Microsoft.Office365.OutlookServices.EventCollection(
                        Context != null ? Context.CreateQuery<global::Microsoft.Office365.OutlookServices.Event>(GetPath("Events")) : null,
                        Context, 
                        this, 
                        GetPath("Events"));
                }

                return this._Events;
            }
        }

        private global::Microsoft.Office365.OutlookServices.IEventCollection _Events;

        // tag0003
        public global::Microsoft.Office365.OutlookServices.IEventCollection CalendarView
        {
            get
            {
                if ((this._CalendarView == null))
                {
                    this._CalendarView = new global::Microsoft.Office365.OutlookServices.EventCollection(
                        Context != null ? Context.CreateQuery<global::Microsoft.Office365.OutlookServices.Event>(GetPath("CalendarView")) : null,
                        Context, 
                        this, 
                        GetPath("CalendarView"));
                }

                return this._CalendarView;
            }
        }

        private global::Microsoft.Office365.OutlookServices.IEventCollection _CalendarView;

        // tag0003
        public global::Microsoft.Office365.OutlookServices.IContactCollection Contacts
        {
            get
            {
                if ((this._Contacts == null))
                {
                    this._Contacts = new global::Microsoft.Office365.OutlookServices.ContactCollection(
                        Context != null ? Context.CreateQuery<global::Microsoft.Office365.OutlookServices.Contact>(GetPath("Contacts")) : null,
                        Context, 
                        this, 
                        GetPath("Contacts"));
                }

                return this._Contacts;
            }
        }

        private global::Microsoft.Office365.OutlookServices.IContactCollection _Contacts;

        // tag0003
        public global::Microsoft.Office365.OutlookServices.IContactFolderCollection ContactFolders
        {
            get
            {
                if ((this._ContactFolders == null))
                {
                    this._ContactFolders = new global::Microsoft.Office365.OutlookServices.ContactFolderCollection(
                        Context != null ? Context.CreateQuery<global::Microsoft.Office365.OutlookServices.ContactFolder>(GetPath("ContactFolders")) : null,
                        Context, 
                        this, 
                        GetPath("ContactFolders"));
                }

                return this._ContactFolders;
            }
        }

        private global::Microsoft.Office365.OutlookServices.IContactFolderCollection _ContactFolders;

        public new async global::System.Threading.Tasks.Task<IUser> ExecuteAsync()
        {
            return await EnsureQuery().ExecuteSingleAsync();
        }
         
        public new IUserFetcher Expand<TTarget>(System.Linq.Expressions.Expression<global::System.Func<IUser, TTarget>> navigationPropertyAccessor)
        {
            return new UserFetcher
            {
                _query = EnsureQuery().Expand(navigationPropertyAccessor)
            };
        }

        private IReadOnlyQueryableSet<IUser> EnsureQuery()
        {
            if (this._query == null)
            {
                this._query = new global::Microsoft.Office365.OutlookServices.Extensions.ReadOnlyQueryableSet<IUser>(Context.CreateQuery<User>(GetPath(null)), Context);
            }

            return this._query;
        }

        private global::Microsoft.Office365.OutlookServices.Extensions.IReadOnlyQueryableSet<IUser> _query;

        /// <summary>
        /// There are no comments for SendMail in the schema.
        /// </summary>
        public async  global::System.Threading.Tasks.Task SendMailAsync(global::Microsoft.Office365.OutlookServices.IMessage Message, global::System.Nullable<bool> SaveToSentItems)
        {
            var myUri = GetUrl();
            if (myUri == null)
            {
                throw new global::System.Exception("cannot find entity");
            }

            global::System.Uri requestUri = new global::System.Uri(myUri.ToString().TrimEnd('/') + "/" + "SendMail");
            await Context.ExecuteAsync(requestUri, "POST",
                new global::Microsoft.OData.Client.OperationParameter[] { new global::Microsoft.OData.Client.BodyOperationParameter("Message", Message), new global::Microsoft.OData.Client.BodyOperationParameter("SaveToSentItems", SaveToSentItems) });
        }
    }

    [global::Microsoft.OData.Client.Key("Id")]
    public partial class User : Entity , IUser, IUserFetcher
    {
        public User() : base() 
        {

        }
        // tag0002
        
        public string DisplayName
        {
            get
            {
                return this._DisplayName;
            }
            set
            {
                if (this._DisplayName != value)
                {
                    this._DisplayName = value;
                    OnPropertyChanged("DisplayName");
                }
            }
        }
        
        private string _DisplayName;


        // tag0002
        
        public string Alias
        {
            get
            {
                return this._Alias;
            }
            set
            {
                if (this._Alias != value)
                {
                    this._Alias = value;
                    OnPropertyChanged("Alias");
                }
            }
        }
        
        private string _Alias;


        // tag0002
        
        public global::System.Nullable<global::System.Guid> MailboxGuid
        {
            get
            {
                return this._MailboxGuid;
            }
            set
            {
                if (this._MailboxGuid != value)
                {
                    this._MailboxGuid = value;
                    OnPropertyChanged("MailboxGuid");
                }
            }
        }
        
        private global::System.Nullable<global::System.Guid> _MailboxGuid;


        // tag 0014
        global::Microsoft.Office365.OutlookServices.IFolderCollection Microsoft.Office365.OutlookServices.IUserFetcher.Folders
        {
            get
            {
                if (this._FoldersFetcher == null)
                {
                    this._FoldersFetcher = new global::Microsoft.Office365.OutlookServices.FolderCollection(
                        Context != null ? Context.CreateQuery<global::Microsoft.Office365.OutlookServices.Folder>(GetPath("Folders")) : null,
                        Context,
                        this,
                        GetPath("Folders"));
                }

                return this._FoldersFetcher;
            }
        }
        private global::Microsoft.Office365.OutlookServices.IFolderCollection _FoldersFetcher;


        // tag0013
        public global::System.Collections.Generic.IList<global::Microsoft.Office365.OutlookServices.Folder> Folders
        {
            get
            {
                if (this._Folders == null)
                {
                    this._Folders = new EntityCollectionImpl<global::Microsoft.Office365.OutlookServices.Folder>();
                    this._Folders.SetContainer(() => GetContainingEntity("Folders"));
                }

                return this._Folders;
            }
            set
            {
                _Folders.Clear();
                if (value != null)
                {
                    foreach (var i in value)
                    {
                        _Folders.Add(i);
                    }
                }
            }
        }

        Microsoft.Office365.OutlookServices.Extensions.IPagedCollection<global::Microsoft.Office365.OutlookServices.IFolder> Microsoft.Office365.OutlookServices.IUser.Folders
        {
            get
            {
                return new Microsoft.Office365.OutlookServices.Extensions.PagedCollection<global::Microsoft.Office365.OutlookServices.IFolder, global::Microsoft.Office365.OutlookServices.Folder>(Context, (EntityCollectionImpl<global::Microsoft.Office365.OutlookServices.Folder>) Folders);
            }
        }

        private EntityCollectionImpl<global::Microsoft.Office365.OutlookServices.Folder> _Folders;
        // tag 0014
        global::Microsoft.Office365.OutlookServices.IMessageCollection Microsoft.Office365.OutlookServices.IUserFetcher.Messages
        {
            get
            {
                if (this._MessagesFetcher == null)
                {
                    this._MessagesFetcher = new global::Microsoft.Office365.OutlookServices.MessageCollection(
                        Context != null ? Context.CreateQuery<global::Microsoft.Office365.OutlookServices.Message>(GetPath("Messages")) : null,
                        Context,
                        this,
                        GetPath("Messages"));
                }

                return this._MessagesFetcher;
            }
        }
        private global::Microsoft.Office365.OutlookServices.IMessageCollection _MessagesFetcher;


        // tag0013
        public global::System.Collections.Generic.IList<global::Microsoft.Office365.OutlookServices.Message> Messages
        {
            get
            {
                if (this._Messages == null)
                {
                    this._Messages = new EntityCollectionImpl<global::Microsoft.Office365.OutlookServices.Message>();
                    this._Messages.SetContainer(() => GetContainingEntity("Messages"));
                }

                return this._Messages;
            }
            set
            {
                _Messages.Clear();
                if (value != null)
                {
                    foreach (var i in value)
                    {
                        _Messages.Add(i);
                    }
                }
            }
        }

        Microsoft.Office365.OutlookServices.Extensions.IPagedCollection<global::Microsoft.Office365.OutlookServices.IMessage> Microsoft.Office365.OutlookServices.IUser.Messages
        {
            get
            {
                return new Microsoft.Office365.OutlookServices.Extensions.PagedCollection<global::Microsoft.Office365.OutlookServices.IMessage, global::Microsoft.Office365.OutlookServices.Message>(Context, (EntityCollectionImpl<global::Microsoft.Office365.OutlookServices.Message>) Messages);
            }
        }

        private EntityCollectionImpl<global::Microsoft.Office365.OutlookServices.Message> _Messages;
        // tag 0012
        global::Microsoft.Office365.OutlookServices.IFolder Microsoft.Office365.OutlookServices.IUser.RootFolder
        {
            get
            {
                return this.RootFolder;
            }
            set
            {
                if (this.RootFolder != value)
                {
                    this.RootFolder = (global::Microsoft.Office365.OutlookServices.Folder)value;
                }
            }
        }

        global::Microsoft.Office365.OutlookServices.IFolderFetcher Microsoft.Office365.OutlookServices.IUserFetcher.RootFolder
        {
            get
            {
                var retVal = new global::Microsoft.Office365.OutlookServices.FolderFetcher();
                retVal.Initialize(this.Context, GetPath("RootFolder"));
                return retVal;
            }
        }

        // tag0015
        public global::Microsoft.Office365.OutlookServices.Folder RootFolder
        {
            get
            {
                return this._RootFolder;
            }
            set
            {
                if (this._RootFolder != value)
                {
                    this._RootFolder = value;
                    if (Context != null && Context.GetEntityDescriptor(this) != null && (value == null || Context.GetEntityDescriptor(value) != null))
                    {
                        Context.SetLink(this, "RootFolder", value);
                    }
                }
            }
        }

        private global::Microsoft.Office365.OutlookServices.Folder _RootFolder;
        // tag 0014
        global::Microsoft.Office365.OutlookServices.ICalendarCollection Microsoft.Office365.OutlookServices.IUserFetcher.Calendars
        {
            get
            {
                if (this._CalendarsFetcher == null)
                {
                    this._CalendarsFetcher = new global::Microsoft.Office365.OutlookServices.CalendarCollection(
                        Context != null ? Context.CreateQuery<global::Microsoft.Office365.OutlookServices.Calendar>(GetPath("Calendars")) : null,
                        Context,
                        this,
                        GetPath("Calendars"));
                }

                return this._CalendarsFetcher;
            }
        }
        private global::Microsoft.Office365.OutlookServices.ICalendarCollection _CalendarsFetcher;


        // tag0013
        public global::System.Collections.Generic.IList<global::Microsoft.Office365.OutlookServices.Calendar> Calendars
        {
            get
            {
                if (this._Calendars == null)
                {
                    this._Calendars = new EntityCollectionImpl<global::Microsoft.Office365.OutlookServices.Calendar>();
                    this._Calendars.SetContainer(() => GetContainingEntity("Calendars"));
                }

                return this._Calendars;
            }
            set
            {
                _Calendars.Clear();
                if (value != null)
                {
                    foreach (var i in value)
                    {
                        _Calendars.Add(i);
                    }
                }
            }
        }

        Microsoft.Office365.OutlookServices.Extensions.IPagedCollection<global::Microsoft.Office365.OutlookServices.ICalendar> Microsoft.Office365.OutlookServices.IUser.Calendars
        {
            get
            {
                return new Microsoft.Office365.OutlookServices.Extensions.PagedCollection<global::Microsoft.Office365.OutlookServices.ICalendar, global::Microsoft.Office365.OutlookServices.Calendar>(Context, (EntityCollectionImpl<global::Microsoft.Office365.OutlookServices.Calendar>) Calendars);
            }
        }

        private EntityCollectionImpl<global::Microsoft.Office365.OutlookServices.Calendar> _Calendars;
        // tag 0012
        global::Microsoft.Office365.OutlookServices.ICalendar Microsoft.Office365.OutlookServices.IUser.Calendar
        {
            get
            {
                return this.Calendar;
            }
            set
            {
                if (this.Calendar != value)
                {
                    this.Calendar = (global::Microsoft.Office365.OutlookServices.Calendar)value;
                }
            }
        }

        global::Microsoft.Office365.OutlookServices.ICalendarFetcher Microsoft.Office365.OutlookServices.IUserFetcher.Calendar
        {
            get
            {
                var retVal = new global::Microsoft.Office365.OutlookServices.CalendarFetcher();
                retVal.Initialize(this.Context, GetPath("Calendar"));
                return retVal;
            }
        }

        // tag0015
        public global::Microsoft.Office365.OutlookServices.Calendar Calendar
        {
            get
            {
                return this._Calendar;
            }
            set
            {
                if (this._Calendar != value)
                {
                    this._Calendar = value;
                    if (Context != null && Context.GetEntityDescriptor(this) != null && (value == null || Context.GetEntityDescriptor(value) != null))
                    {
                        Context.SetLink(this, "Calendar", value);
                    }
                }
            }
        }

        private global::Microsoft.Office365.OutlookServices.Calendar _Calendar;
        // tag 0014
        global::Microsoft.Office365.OutlookServices.ICalendarGroupCollection Microsoft.Office365.OutlookServices.IUserFetcher.CalendarGroups
        {
            get
            {
                if (this._CalendarGroupsFetcher == null)
                {
                    this._CalendarGroupsFetcher = new global::Microsoft.Office365.OutlookServices.CalendarGroupCollection(
                        Context != null ? Context.CreateQuery<global::Microsoft.Office365.OutlookServices.CalendarGroup>(GetPath("CalendarGroups")) : null,
                        Context,
                        this,
                        GetPath("CalendarGroups"));
                }

                return this._CalendarGroupsFetcher;
            }
        }
        private global::Microsoft.Office365.OutlookServices.ICalendarGroupCollection _CalendarGroupsFetcher;


        // tag0013
        public global::System.Collections.Generic.IList<global::Microsoft.Office365.OutlookServices.CalendarGroup> CalendarGroups
        {
            get
            {
                if (this._CalendarGroups == null)
                {
                    this._CalendarGroups = new EntityCollectionImpl<global::Microsoft.Office365.OutlookServices.CalendarGroup>();
                    this._CalendarGroups.SetContainer(() => GetContainingEntity("CalendarGroups"));
                }

                return this._CalendarGroups;
            }
            set
            {
                _CalendarGroups.Clear();
                if (value != null)
                {
                    foreach (var i in value)
                    {
                        _CalendarGroups.Add(i);
                    }
                }
            }
        }

        Microsoft.Office365.OutlookServices.Extensions.IPagedCollection<global::Microsoft.Office365.OutlookServices.ICalendarGroup> Microsoft.Office365.OutlookServices.IUser.CalendarGroups
        {
            get
            {
                return new Microsoft.Office365.OutlookServices.Extensions.PagedCollection<global::Microsoft.Office365.OutlookServices.ICalendarGroup, global::Microsoft.Office365.OutlookServices.CalendarGroup>(Context, (EntityCollectionImpl<global::Microsoft.Office365.OutlookServices.CalendarGroup>) CalendarGroups);
            }
        }

        private EntityCollectionImpl<global::Microsoft.Office365.OutlookServices.CalendarGroup> _CalendarGroups;
        // tag 0014
        global::Microsoft.Office365.OutlookServices.IEventCollection Microsoft.Office365.OutlookServices.IUserFetcher.Events
        {
            get
            {
                if (this._EventsFetcher == null)
                {
                    this._EventsFetcher = new global::Microsoft.Office365.OutlookServices.EventCollection(
                        Context != null ? Context.CreateQuery<global::Microsoft.Office365.OutlookServices.Event>(GetPath("Events")) : null,
                        Context,
                        this,
                        GetPath("Events"));
                }

                return this._EventsFetcher;
            }
        }
        private global::Microsoft.Office365.OutlookServices.IEventCollection _EventsFetcher;


        // tag0013
        public global::System.Collections.Generic.IList<global::Microsoft.Office365.OutlookServices.Event> Events
        {
            get
            {
                if (this._Events == null)
                {
                    this._Events = new EntityCollectionImpl<global::Microsoft.Office365.OutlookServices.Event>();
                    this._Events.SetContainer(() => GetContainingEntity("Events"));
                }

                return this._Events;
            }
            set
            {
                _Events.Clear();
                if (value != null)
                {
                    foreach (var i in value)
                    {
                        _Events.Add(i);
                    }
                }
            }
        }

        Microsoft.Office365.OutlookServices.Extensions.IPagedCollection<global::Microsoft.Office365.OutlookServices.IEvent> Microsoft.Office365.OutlookServices.IUser.Events
        {
            get
            {
                return new Microsoft.Office365.OutlookServices.Extensions.PagedCollection<global::Microsoft.Office365.OutlookServices.IEvent, global::Microsoft.Office365.OutlookServices.Event>(Context, (EntityCollectionImpl<global::Microsoft.Office365.OutlookServices.Event>) Events);
            }
        }

        private EntityCollectionImpl<global::Microsoft.Office365.OutlookServices.Event> _Events;
        // tag 0014
        global::Microsoft.Office365.OutlookServices.IEventCollection Microsoft.Office365.OutlookServices.IUserFetcher.CalendarView
        {
            get
            {
                if (this._CalendarViewFetcher == null)
                {
                    this._CalendarViewFetcher = new global::Microsoft.Office365.OutlookServices.EventCollection(
                        Context != null ? Context.CreateQuery<global::Microsoft.Office365.OutlookServices.Event>(GetPath("CalendarView")) : null,
                        Context,
                        this,
                        GetPath("CalendarView"));
                }

                return this._CalendarViewFetcher;
            }
        }
        private global::Microsoft.Office365.OutlookServices.IEventCollection _CalendarViewFetcher;


        // tag0013
        public global::System.Collections.Generic.IList<global::Microsoft.Office365.OutlookServices.Event> CalendarView
        {
            get
            {
                if (this._CalendarView == null)
                {
                    this._CalendarView = new EntityCollectionImpl<global::Microsoft.Office365.OutlookServices.Event>();
                    this._CalendarView.SetContainer(() => GetContainingEntity("CalendarView"));
                }

                return this._CalendarView;
            }
            set
            {
                _CalendarView.Clear();
                if (value != null)
                {
                    foreach (var i in value)
                    {
                        _CalendarView.Add(i);
                    }
                }
            }
        }

        Microsoft.Office365.OutlookServices.Extensions.IPagedCollection<global::Microsoft.Office365.OutlookServices.IEvent> Microsoft.Office365.OutlookServices.IUser.CalendarView
        {
            get
            {
                return new Microsoft.Office365.OutlookServices.Extensions.PagedCollection<global::Microsoft.Office365.OutlookServices.IEvent, global::Microsoft.Office365.OutlookServices.Event>(Context, (EntityCollectionImpl<global::Microsoft.Office365.OutlookServices.Event>) CalendarView);
            }
        }

        private EntityCollectionImpl<global::Microsoft.Office365.OutlookServices.Event> _CalendarView;
        // tag 0014
        global::Microsoft.Office365.OutlookServices.IContactCollection Microsoft.Office365.OutlookServices.IUserFetcher.Contacts
        {
            get
            {
                if (this._ContactsFetcher == null)
                {
                    this._ContactsFetcher = new global::Microsoft.Office365.OutlookServices.ContactCollection(
                        Context != null ? Context.CreateQuery<global::Microsoft.Office365.OutlookServices.Contact>(GetPath("Contacts")) : null,
                        Context,
                        this,
                        GetPath("Contacts"));
                }

                return this._ContactsFetcher;
            }
        }
        private global::Microsoft.Office365.OutlookServices.IContactCollection _ContactsFetcher;


        // tag0013
        public global::System.Collections.Generic.IList<global::Microsoft.Office365.OutlookServices.Contact> Contacts
        {
            get
            {
                if (this._Contacts == null)
                {
                    this._Contacts = new EntityCollectionImpl<global::Microsoft.Office365.OutlookServices.Contact>();
                    this._Contacts.SetContainer(() => GetContainingEntity("Contacts"));
                }

                return this._Contacts;
            }
            set
            {
                _Contacts.Clear();
                if (value != null)
                {
                    foreach (var i in value)
                    {
                        _Contacts.Add(i);
                    }
                }
            }
        }

        Microsoft.Office365.OutlookServices.Extensions.IPagedCollection<global::Microsoft.Office365.OutlookServices.IContact> Microsoft.Office365.OutlookServices.IUser.Contacts
        {
            get
            {
                return new Microsoft.Office365.OutlookServices.Extensions.PagedCollection<global::Microsoft.Office365.OutlookServices.IContact, global::Microsoft.Office365.OutlookServices.Contact>(Context, (EntityCollectionImpl<global::Microsoft.Office365.OutlookServices.Contact>) Contacts);
            }
        }

        private EntityCollectionImpl<global::Microsoft.Office365.OutlookServices.Contact> _Contacts;
        // tag 0014
        global::Microsoft.Office365.OutlookServices.IContactFolderCollection Microsoft.Office365.OutlookServices.IUserFetcher.ContactFolders
        {
            get
            {
                if (this._ContactFoldersFetcher == null)
                {
                    this._ContactFoldersFetcher = new global::Microsoft.Office365.OutlookServices.ContactFolderCollection(
                        Context != null ? Context.CreateQuery<global::Microsoft.Office365.OutlookServices.ContactFolder>(GetPath("ContactFolders")) : null,
                        Context,
                        this,
                        GetPath("ContactFolders"));
                }

                return this._ContactFoldersFetcher;
            }
        }
        private global::Microsoft.Office365.OutlookServices.IContactFolderCollection _ContactFoldersFetcher;


        // tag0013
        public global::System.Collections.Generic.IList<global::Microsoft.Office365.OutlookServices.ContactFolder> ContactFolders
        {
            get
            {
                if (this._ContactFolders == null)
                {
                    this._ContactFolders = new EntityCollectionImpl<global::Microsoft.Office365.OutlookServices.ContactFolder>();
                    this._ContactFolders.SetContainer(() => GetContainingEntity("ContactFolders"));
                }

                return this._ContactFolders;
            }
            set
            {
                _ContactFolders.Clear();
                if (value != null)
                {
                    foreach (var i in value)
                    {
                        _ContactFolders.Add(i);
                    }
                }
            }
        }

        Microsoft.Office365.OutlookServices.Extensions.IPagedCollection<global::Microsoft.Office365.OutlookServices.IContactFolder> Microsoft.Office365.OutlookServices.IUser.ContactFolders
        {
            get
            {
                return new Microsoft.Office365.OutlookServices.Extensions.PagedCollection<global::Microsoft.Office365.OutlookServices.IContactFolder, global::Microsoft.Office365.OutlookServices.ContactFolder>(Context, (EntityCollectionImpl<global::Microsoft.Office365.OutlookServices.ContactFolder>) ContactFolders);
            }
        }

        private EntityCollectionImpl<global::Microsoft.Office365.OutlookServices.ContactFolder> _ContactFolders;
        /// <summary>
        /// There are no comments for SendMail in the schema.
        /// </summary>
        public async  global::System.Threading.Tasks.Task SendMailAsync(global::Microsoft.Office365.OutlookServices.IMessage Message, global::System.Nullable<bool> SaveToSentItems)
        {
            var myUri = GetUrl();
            if (myUri == null)
            {
                throw new global::System.Exception("cannot find entity");
            }

            global::System.Uri requestUri = new global::System.Uri(myUri.ToString().TrimEnd('/') + "/" + "SendMail");
            await Context.ExecuteAsync(requestUri, "POST",
                new global::Microsoft.OData.Client.OperationParameter[] { new global::Microsoft.OData.Client.BodyOperationParameter("Message", Message), new global::Microsoft.OData.Client.BodyOperationParameter("SaveToSentItems", SaveToSentItems) });
        }

        global::System.Threading.Tasks.Task<IUser> IUserFetcher.ExecuteAsync()
        {
            var tsc = new global::System.Threading.Tasks.TaskCompletionSource<IUser> ();
            tsc.SetResult(this);
            return tsc.Task;
        }

        IUserFetcher IUserFetcher.Expand<TTarget>(System.Linq.Expressions.Expression<global::System.Func<IUser, TTarget>> navigationPropertyAccessor)
        {
            return this;
        }
    }

    [Microsoft.Office365.OutlookServices.Extensions.LowerCaseProperty]
    public partial interface IFolderFetcher : IEntityFetcher
    {
   
        new global::System.Threading.Tasks.Task<IFolder> ExecuteAsync();

        new IFolderFetcher Expand<TTarget>(System.Linq.Expressions.Expression<global::System.Func<IFolder, TTarget>> navigationPropertyAccessor);

        global::Microsoft.Office365.OutlookServices.IFolderCollection ChildFolders
        {
            get; 
        }

        global::Microsoft.Office365.OutlookServices.IMessageCollection Messages
        {
            get; 
        }

// tag0009
        global::System.Threading.Tasks.Task<global::Microsoft.Office365.OutlookServices.IFolder> CopyAsync(string DestinationId);
// tag0009
        global::System.Threading.Tasks.Task<global::Microsoft.Office365.OutlookServices.IFolder> MoveAsync(string DestinationId);
    }

    [Microsoft.Office365.OutlookServices.Extensions.LowerCaseProperty]
    public partial interface IFolder:  IEntity
    {
        string ParentFolderId
        {
            get; set;
        }
        string DisplayName
        {
            get; set;
        }
        global::System.Nullable<int> ChildFolderCount
        {
            get; set;
        }
        Microsoft.Office365.OutlookServices.Extensions.IPagedCollection<global::Microsoft.Office365.OutlookServices.IFolder> ChildFolders
        {
            get; 
        }

        Microsoft.Office365.OutlookServices.Extensions.IPagedCollection<global::Microsoft.Office365.OutlookServices.IMessage> Messages
        {
            get; 
        }

// tag0009
        global::System.Threading.Tasks.Task<global::Microsoft.Office365.OutlookServices.IFolder> CopyAsync(string DestinationId);
// tag0009
        global::System.Threading.Tasks.Task<global::Microsoft.Office365.OutlookServices.IFolder> MoveAsync(string DestinationId);
    }

    internal partial class FolderFetcher : EntityFetcher , IFolderFetcher
    {

        // tag0003
        public global::Microsoft.Office365.OutlookServices.IFolderCollection ChildFolders
        {
            get
            {
                if ((this._ChildFolders == null))
                {
                    this._ChildFolders = new global::Microsoft.Office365.OutlookServices.FolderCollection(
                        Context != null ? Context.CreateQuery<global::Microsoft.Office365.OutlookServices.Folder>(GetPath("ChildFolders")) : null,
                        Context, 
                        this, 
                        GetPath("ChildFolders"));
                }

                return this._ChildFolders;
            }
        }

        private global::Microsoft.Office365.OutlookServices.IFolderCollection _ChildFolders;

        // tag0003
        public global::Microsoft.Office365.OutlookServices.IMessageCollection Messages
        {
            get
            {
                if ((this._Messages == null))
                {
                    this._Messages = new global::Microsoft.Office365.OutlookServices.MessageCollection(
                        Context != null ? Context.CreateQuery<global::Microsoft.Office365.OutlookServices.Message>(GetPath("Messages")) : null,
                        Context, 
                        this, 
                        GetPath("Messages"));
                }

                return this._Messages;
            }
        }

        private global::Microsoft.Office365.OutlookServices.IMessageCollection _Messages;

        public new async global::System.Threading.Tasks.Task<IFolder> ExecuteAsync()
        {
            return await EnsureQuery().ExecuteSingleAsync();
        }
         
        public new IFolderFetcher Expand<TTarget>(System.Linq.Expressions.Expression<global::System.Func<IFolder, TTarget>> navigationPropertyAccessor)
        {
            return new FolderFetcher
            {
                _query = EnsureQuery().Expand(navigationPropertyAccessor)
            };
        }

        private IReadOnlyQueryableSet<IFolder> EnsureQuery()
        {
            if (this._query == null)
            {
                this._query = new global::Microsoft.Office365.OutlookServices.Extensions.ReadOnlyQueryableSet<IFolder>(Context.CreateQuery<Folder>(GetPath(null)), Context);
            }

            return this._query;
        }

        private global::Microsoft.Office365.OutlookServices.Extensions.IReadOnlyQueryableSet<IFolder> _query;

        /// <summary>
        /// There are no comments for Copy in the schema.
        /// </summary>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Office365.OutlookServices.IFolder> CopyAsync(string DestinationId)
        {
			 if (Context == null) throw new InvalidOperationException("Not Initialized");

            var myUri = GetUrl();
            if (myUri == null)
            {
                throw new global::System.Exception("cannot find entity");
            }

            global::System.Uri requestUri = new global::System.Uri(myUri.ToString().TrimEnd('/') + "/" + "Copy");
            return global::System.Linq.Enumerable.Single(
                await Context.ExecuteAsync<global::Microsoft.Office365.OutlookServices.Folder>(requestUri, "POST", true,
                new global::Microsoft.OData.Client.OperationParameter[] { new global::Microsoft.OData.Client.BodyOperationParameter("DestinationId", DestinationId) }));
        }
        /// <summary>
        /// There are no comments for Move in the schema.
        /// </summary>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Office365.OutlookServices.IFolder> MoveAsync(string DestinationId)
        {
			 if (Context == null) throw new InvalidOperationException("Not Initialized");

            var myUri = GetUrl();
            if (myUri == null)
            {
                throw new global::System.Exception("cannot find entity");
            }

            global::System.Uri requestUri = new global::System.Uri(myUri.ToString().TrimEnd('/') + "/" + "Move");
            return global::System.Linq.Enumerable.Single(
                await Context.ExecuteAsync<global::Microsoft.Office365.OutlookServices.Folder>(requestUri, "POST", true,
                new global::Microsoft.OData.Client.OperationParameter[] { new global::Microsoft.OData.Client.BodyOperationParameter("DestinationId", DestinationId) }));
        }
    }

    [global::Microsoft.OData.Client.Key("Id")]
    public partial class Folder : Entity , IFolder, IFolderFetcher
    {
        public Folder() : base() 
        {

        }
        // tag0002
        
        public string ParentFolderId
        {
            get
            {
                return this._ParentFolderId;
            }
            set
            {
                if (this._ParentFolderId != value)
                {
                    this._ParentFolderId = value;
                    OnPropertyChanged("ParentFolderId");
                }
            }
        }
        
        private string _ParentFolderId;


        // tag0002
        
        public string DisplayName
        {
            get
            {
                return this._DisplayName;
            }
            set
            {
                if (this._DisplayName != value)
                {
                    this._DisplayName = value;
                    OnPropertyChanged("DisplayName");
                }
            }
        }
        
        private string _DisplayName;


        // tag0002
        
        public global::System.Nullable<int> ChildFolderCount
        {
            get
            {
                return this._ChildFolderCount;
            }
            set
            {
                if (this._ChildFolderCount != value)
                {
                    this._ChildFolderCount = value;
                    OnPropertyChanged("ChildFolderCount");
                }
            }
        }
        
        private global::System.Nullable<int> _ChildFolderCount;


        // tag 0014
        global::Microsoft.Office365.OutlookServices.IFolderCollection Microsoft.Office365.OutlookServices.IFolderFetcher.ChildFolders
        {
            get
            {
                if (this._ChildFoldersFetcher == null)
                {
                    this._ChildFoldersFetcher = new global::Microsoft.Office365.OutlookServices.FolderCollection(
                        Context != null ? Context.CreateQuery<global::Microsoft.Office365.OutlookServices.Folder>(GetPath("ChildFolders")) : null,
                        Context,
                        this,
                        GetPath("ChildFolders"));
                }

                return this._ChildFoldersFetcher;
            }
        }
        private global::Microsoft.Office365.OutlookServices.IFolderCollection _ChildFoldersFetcher;


        // tag0013
        public global::System.Collections.Generic.IList<global::Microsoft.Office365.OutlookServices.Folder> ChildFolders
        {
            get
            {
                if (this._ChildFolders == null)
                {
                    this._ChildFolders = new EntityCollectionImpl<global::Microsoft.Office365.OutlookServices.Folder>();
                    this._ChildFolders.SetContainer(() => GetContainingEntity("ChildFolders"));
                }

                return this._ChildFolders;
            }
            set
            {
                _ChildFolders.Clear();
                if (value != null)
                {
                    foreach (var i in value)
                    {
                        _ChildFolders.Add(i);
                    }
                }
            }
        }

        Microsoft.Office365.OutlookServices.Extensions.IPagedCollection<global::Microsoft.Office365.OutlookServices.IFolder> Microsoft.Office365.OutlookServices.IFolder.ChildFolders
        {
            get
            {
                return new Microsoft.Office365.OutlookServices.Extensions.PagedCollection<global::Microsoft.Office365.OutlookServices.IFolder, global::Microsoft.Office365.OutlookServices.Folder>(Context, (EntityCollectionImpl<global::Microsoft.Office365.OutlookServices.Folder>) ChildFolders);
            }
        }

        private EntityCollectionImpl<global::Microsoft.Office365.OutlookServices.Folder> _ChildFolders;
        // tag 0014
        global::Microsoft.Office365.OutlookServices.IMessageCollection Microsoft.Office365.OutlookServices.IFolderFetcher.Messages
        {
            get
            {
                if (this._MessagesFetcher == null)
                {
                    this._MessagesFetcher = new global::Microsoft.Office365.OutlookServices.MessageCollection(
                        Context != null ? Context.CreateQuery<global::Microsoft.Office365.OutlookServices.Message>(GetPath("Messages")) : null,
                        Context,
                        this,
                        GetPath("Messages"));
                }

                return this._MessagesFetcher;
            }
        }
        private global::Microsoft.Office365.OutlookServices.IMessageCollection _MessagesFetcher;


        // tag0013
        public global::System.Collections.Generic.IList<global::Microsoft.Office365.OutlookServices.Message> Messages
        {
            get
            {
                if (this._Messages == null)
                {
                    this._Messages = new EntityCollectionImpl<global::Microsoft.Office365.OutlookServices.Message>();
                    this._Messages.SetContainer(() => GetContainingEntity("Messages"));
                }

                return this._Messages;
            }
            set
            {
                _Messages.Clear();
                if (value != null)
                {
                    foreach (var i in value)
                    {
                        _Messages.Add(i);
                    }
                }
            }
        }

        Microsoft.Office365.OutlookServices.Extensions.IPagedCollection<global::Microsoft.Office365.OutlookServices.IMessage> Microsoft.Office365.OutlookServices.IFolder.Messages
        {
            get
            {
                return new Microsoft.Office365.OutlookServices.Extensions.PagedCollection<global::Microsoft.Office365.OutlookServices.IMessage, global::Microsoft.Office365.OutlookServices.Message>(Context, (EntityCollectionImpl<global::Microsoft.Office365.OutlookServices.Message>) Messages);
            }
        }

        private EntityCollectionImpl<global::Microsoft.Office365.OutlookServices.Message> _Messages;
        /// <summary>
        /// There are no comments for Copy in the schema.
        /// </summary>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Office365.OutlookServices.IFolder> CopyAsync(string DestinationId)
        {
			 if (Context == null) throw new InvalidOperationException("Not Initialized");

            var myUri = GetUrl();
            if (myUri == null)
            {
                throw new global::System.Exception("cannot find entity");
            }

            global::System.Uri requestUri = new global::System.Uri(myUri.ToString().TrimEnd('/') + "/" + "Copy");
            return global::System.Linq.Enumerable.Single(
                await Context.ExecuteAsync<global::Microsoft.Office365.OutlookServices.Folder>(requestUri, "POST", true,
                new global::Microsoft.OData.Client.OperationParameter[] { new global::Microsoft.OData.Client.BodyOperationParameter("DestinationId", DestinationId) }));
        }
        /// <summary>
        /// There are no comments for Move in the schema.
        /// </summary>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Office365.OutlookServices.IFolder> MoveAsync(string DestinationId)
        {
			 if (Context == null) throw new InvalidOperationException("Not Initialized");

            var myUri = GetUrl();
            if (myUri == null)
            {
                throw new global::System.Exception("cannot find entity");
            }

            global::System.Uri requestUri = new global::System.Uri(myUri.ToString().TrimEnd('/') + "/" + "Move");
            return global::System.Linq.Enumerable.Single(
                await Context.ExecuteAsync<global::Microsoft.Office365.OutlookServices.Folder>(requestUri, "POST", true,
                new global::Microsoft.OData.Client.OperationParameter[] { new global::Microsoft.OData.Client.BodyOperationParameter("DestinationId", DestinationId) }));
        }

        global::System.Threading.Tasks.Task<IFolder> IFolderFetcher.ExecuteAsync()
        {
            var tsc = new global::System.Threading.Tasks.TaskCompletionSource<IFolder> ();
            tsc.SetResult(this);
            return tsc.Task;
        }

        IFolderFetcher IFolderFetcher.Expand<TTarget>(System.Linq.Expressions.Expression<global::System.Func<IFolder, TTarget>> navigationPropertyAccessor)
        {
            return this;
        }
    }

    [Microsoft.Office365.OutlookServices.Extensions.LowerCaseProperty]
    public partial interface IItemFetcher : IEntityFetcher
    {
    }

    [Microsoft.Office365.OutlookServices.Extensions.LowerCaseProperty]
    public partial interface IItem:  IEntity
    {
        string ChangeKey
        {
            get; set;
        }
        global::System.Collections.Generic.IList<string> Categories
        {
            get; 
        }
        global::System.Nullable<global::System.DateTimeOffset> DateTimeCreated
        {
            get; set;
        }
        global::System.Nullable<global::System.DateTimeOffset> DateTimeLastModified
        {
            get; set;
        }
    }

    internal partial class ItemFetcher : EntityFetcher , IItemFetcher
    {
    }

    [global::Microsoft.OData.Client.Key("Id")]
    abstract public partial class Item : Entity , IItem, IItemFetcher
    {
        public Item() : base() 
        {

        }
        // tag0002
        
        public string ChangeKey
        {
            get
            {
                return this._ChangeKey;
            }
            set
            {
                if (this._ChangeKey != value)
                {
                    this._ChangeKey = value;
                    OnPropertyChanged("ChangeKey");
                }
            }
        }
        
        private string _ChangeKey;


        // tag0002
        
        public global::System.Collections.Generic.IList<string> Categories
        {
            get
            {
                if (this._Categories == default(global::System.Collections.Generic.IList<string>))
                {
                    this._Categories = new NonEntityTypeCollectionImpl<string>();
                    this._Categories.SetContainer(() => GetContainingEntity("Categories"));
                }

                return this._Categories;
            }
            set
            {
                Categories.Clear();
                if (value != null)
                {
                    foreach (var i in value) 
                    {
                        Categories.Add(i);
                    }
                }
            }
        }
        
        private NonEntityTypeCollectionImpl<string> _Categories;


        // tag0002
        
        public global::System.Nullable<global::System.DateTimeOffset> DateTimeCreated
        {
            get
            {
                return this._DateTimeCreated;
            }
            set
            {
                if (this._DateTimeCreated != value)
                {
                    this._DateTimeCreated = value;
                    OnPropertyChanged("DateTimeCreated");
                }
            }
        }
        
        private global::System.Nullable<global::System.DateTimeOffset> _DateTimeCreated;


        // tag0002
        
        public global::System.Nullable<global::System.DateTimeOffset> DateTimeLastModified
        {
            get
            {
                return this._DateTimeLastModified;
            }
            set
            {
                if (this._DateTimeLastModified != value)
                {
                    this._DateTimeLastModified = value;
                    OnPropertyChanged("DateTimeLastModified");
                }
            }
        }
        
        private global::System.Nullable<global::System.DateTimeOffset> _DateTimeLastModified;


    }

    [Microsoft.Office365.OutlookServices.Extensions.LowerCaseProperty]
    public partial interface IMessageFetcher : IItemFetcher
    {
   
        new global::System.Threading.Tasks.Task<IMessage> ExecuteAsync();

        new IMessageFetcher Expand<TTarget>(System.Linq.Expressions.Expression<global::System.Func<IMessage, TTarget>> navigationPropertyAccessor);

        global::Microsoft.Office365.OutlookServices.IAttachmentCollection Attachments
        {
            get; 
        }

// tag0009
        global::System.Threading.Tasks.Task<global::Microsoft.Office365.OutlookServices.IMessage> CopyAsync(string DestinationId);
// tag0009
        global::System.Threading.Tasks.Task<global::Microsoft.Office365.OutlookServices.IMessage> MoveAsync(string DestinationId);
// tag0009
        global::System.Threading.Tasks.Task<global::Microsoft.Office365.OutlookServices.IMessage> CreateReplyAsync();
// tag0009
        global::System.Threading.Tasks.Task<global::Microsoft.Office365.OutlookServices.IMessage> CreateReplyAllAsync();
// tag0009
        global::System.Threading.Tasks.Task<global::Microsoft.Office365.OutlookServices.IMessage> CreateForwardAsync();
// tag0009
         global::System.Threading.Tasks.Task ReplyAsync(string Comment);
// tag0009
         global::System.Threading.Tasks.Task ReplyAllAsync(string Comment);
// tag0009
         global::System.Threading.Tasks.Task ForwardAsync(string Comment, global::System.Collections.Generic.ICollection<global::Microsoft.Office365.OutlookServices.Recipient> ToRecipients);
// tag0009
         global::System.Threading.Tasks.Task SendAsync();
    }

    [Microsoft.Office365.OutlookServices.Extensions.LowerCaseProperty]
    public partial interface IMessage:  IItem
    {
        string Subject
        {
            get; set;
        }
        global::Microsoft.Office365.OutlookServices.ItemBody Body
        {
            get; set;
        }
        string BodyPreview
        {
            get; set;
        }
        global::Microsoft.Office365.OutlookServices.Importance Importance
        {
            get; set;
        }
        global::System.Nullable<bool> HasAttachments
        {
            get; set;
        }
        string ParentFolderId
        {
            get; set;
        }
        global::Microsoft.Office365.OutlookServices.Recipient From
        {
            get; set;
        }
        global::Microsoft.Office365.OutlookServices.Recipient Sender
        {
            get; set;
        }
        global::System.Collections.Generic.IList<global::Microsoft.Office365.OutlookServices.Recipient> ToRecipients
        {
            get; 
        }
        global::System.Collections.Generic.IList<global::Microsoft.Office365.OutlookServices.Recipient> CcRecipients
        {
            get; 
        }
        global::System.Collections.Generic.IList<global::Microsoft.Office365.OutlookServices.Recipient> BccRecipients
        {
            get; 
        }
        global::System.Collections.Generic.IList<global::Microsoft.Office365.OutlookServices.Recipient> ReplyTo
        {
            get; 
        }
        string ConversationId
        {
            get; set;
        }
        global::Microsoft.Office365.OutlookServices.ItemBody UniqueBody
        {
            get; set;
        }
        global::System.Nullable<global::System.DateTimeOffset> DateTimeReceived
        {
            get; set;
        }
        global::System.Nullable<global::System.DateTimeOffset> DateTimeSent
        {
            get; set;
        }
        global::System.Nullable<bool> IsDeliveryReceiptRequested
        {
            get; set;
        }
        global::System.Nullable<bool> IsReadReceiptRequested
        {
            get; set;
        }
        global::System.Nullable<bool> IsDraft
        {
            get; set;
        }
        global::System.Nullable<bool> IsRead
        {
            get; set;
        }
        Microsoft.Office365.OutlookServices.Extensions.IPagedCollection<global::Microsoft.Office365.OutlookServices.IAttachment> Attachments
        {
            get; 
        }

// tag0009
        global::System.Threading.Tasks.Task<global::Microsoft.Office365.OutlookServices.IMessage> CopyAsync(string DestinationId);
// tag0009
        global::System.Threading.Tasks.Task<global::Microsoft.Office365.OutlookServices.IMessage> MoveAsync(string DestinationId);
// tag0009
        global::System.Threading.Tasks.Task<global::Microsoft.Office365.OutlookServices.IMessage> CreateReplyAsync();
// tag0009
        global::System.Threading.Tasks.Task<global::Microsoft.Office365.OutlookServices.IMessage> CreateReplyAllAsync();
// tag0009
        global::System.Threading.Tasks.Task<global::Microsoft.Office365.OutlookServices.IMessage> CreateForwardAsync();
// tag0009
         global::System.Threading.Tasks.Task ReplyAsync(string Comment);
// tag0009
         global::System.Threading.Tasks.Task ReplyAllAsync(string Comment);
// tag0009
         global::System.Threading.Tasks.Task ForwardAsync(string Comment, global::System.Collections.Generic.ICollection<global::Microsoft.Office365.OutlookServices.Recipient> ToRecipients);
// tag0009
         global::System.Threading.Tasks.Task SendAsync();
    }

    internal partial class MessageFetcher : ItemFetcher , IMessageFetcher
    {

        // tag0003
        public global::Microsoft.Office365.OutlookServices.IAttachmentCollection Attachments
        {
            get
            {
                if ((this._Attachments == null))
                {
                    this._Attachments = new global::Microsoft.Office365.OutlookServices.AttachmentCollection(
                        Context != null ? Context.CreateQuery<global::Microsoft.Office365.OutlookServices.Attachment>(GetPath("Attachments")) : null,
                        Context, 
                        this, 
                        GetPath("Attachments"));
                }

                return this._Attachments;
            }
        }

        private global::Microsoft.Office365.OutlookServices.IAttachmentCollection _Attachments;

        public new async global::System.Threading.Tasks.Task<IMessage> ExecuteAsync()
        {
            return await EnsureQuery().ExecuteSingleAsync();
        }
         
        public new IMessageFetcher Expand<TTarget>(System.Linq.Expressions.Expression<global::System.Func<IMessage, TTarget>> navigationPropertyAccessor)
        {
            return new MessageFetcher
            {
                _query = EnsureQuery().Expand(navigationPropertyAccessor)
            };
        }

        private IReadOnlyQueryableSet<IMessage> EnsureQuery()
        {
            if (this._query == null)
            {
                this._query = new global::Microsoft.Office365.OutlookServices.Extensions.ReadOnlyQueryableSet<IMessage>(Context.CreateQuery<Message>(GetPath(null)), Context);
            }

            return this._query;
        }

        private global::Microsoft.Office365.OutlookServices.Extensions.IReadOnlyQueryableSet<IMessage> _query;

        /// <summary>
        /// There are no comments for Copy in the schema.
        /// </summary>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Office365.OutlookServices.IMessage> CopyAsync(string DestinationId)
        {
			 if (Context == null) throw new InvalidOperationException("Not Initialized");

            var myUri = GetUrl();
            if (myUri == null)
            {
                throw new global::System.Exception("cannot find entity");
            }

            global::System.Uri requestUri = new global::System.Uri(myUri.ToString().TrimEnd('/') + "/" + "Copy");
            return global::System.Linq.Enumerable.Single(
                await Context.ExecuteAsync<global::Microsoft.Office365.OutlookServices.Message>(requestUri, "POST", true,
                new global::Microsoft.OData.Client.OperationParameter[] { new global::Microsoft.OData.Client.BodyOperationParameter("DestinationId", DestinationId) }));
        }
        /// <summary>
        /// There are no comments for Move in the schema.
        /// </summary>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Office365.OutlookServices.IMessage> MoveAsync(string DestinationId)
        {
			 if (Context == null) throw new InvalidOperationException("Not Initialized");

            var myUri = GetUrl();
            if (myUri == null)
            {
                throw new global::System.Exception("cannot find entity");
            }

            global::System.Uri requestUri = new global::System.Uri(myUri.ToString().TrimEnd('/') + "/" + "Move");
            return global::System.Linq.Enumerable.Single(
                await Context.ExecuteAsync<global::Microsoft.Office365.OutlookServices.Message>(requestUri, "POST", true,
                new global::Microsoft.OData.Client.OperationParameter[] { new global::Microsoft.OData.Client.BodyOperationParameter("DestinationId", DestinationId) }));
        }
        /// <summary>
        /// There are no comments for CreateReply in the schema.
        /// </summary>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Office365.OutlookServices.IMessage> CreateReplyAsync()
        {
			 if (Context == null) throw new InvalidOperationException("Not Initialized");

            var myUri = GetUrl();
            if (myUri == null)
            {
                throw new global::System.Exception("cannot find entity");
            }

            global::System.Uri requestUri = new global::System.Uri(myUri.ToString().TrimEnd('/') + "/" + "CreateReply");
            return global::System.Linq.Enumerable.Single(
                await Context.ExecuteAsync<global::Microsoft.Office365.OutlookServices.Message>(requestUri, "POST", true,
                new global::Microsoft.OData.Client.OperationParameter[] {  }));
        }
        /// <summary>
        /// There are no comments for CreateReplyAll in the schema.
        /// </summary>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Office365.OutlookServices.IMessage> CreateReplyAllAsync()
        {
			 if (Context == null) throw new InvalidOperationException("Not Initialized");

            var myUri = GetUrl();
            if (myUri == null)
            {
                throw new global::System.Exception("cannot find entity");
            }

            global::System.Uri requestUri = new global::System.Uri(myUri.ToString().TrimEnd('/') + "/" + "CreateReplyAll");
            return global::System.Linq.Enumerable.Single(
                await Context.ExecuteAsync<global::Microsoft.Office365.OutlookServices.Message>(requestUri, "POST", true,
                new global::Microsoft.OData.Client.OperationParameter[] {  }));
        }
        /// <summary>
        /// There are no comments for CreateForward in the schema.
        /// </summary>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Office365.OutlookServices.IMessage> CreateForwardAsync()
        {
			 if (Context == null) throw new InvalidOperationException("Not Initialized");

            var myUri = GetUrl();
            if (myUri == null)
            {
                throw new global::System.Exception("cannot find entity");
            }

            global::System.Uri requestUri = new global::System.Uri(myUri.ToString().TrimEnd('/') + "/" + "CreateForward");
            return global::System.Linq.Enumerable.Single(
                await Context.ExecuteAsync<global::Microsoft.Office365.OutlookServices.Message>(requestUri, "POST", true,
                new global::Microsoft.OData.Client.OperationParameter[] {  }));
        }
        /// <summary>
        /// There are no comments for Reply in the schema.
        /// </summary>
        public async  global::System.Threading.Tasks.Task ReplyAsync(string Comment)
        {
            var myUri = GetUrl();
            if (myUri == null)
            {
                throw new global::System.Exception("cannot find entity");
            }

            global::System.Uri requestUri = new global::System.Uri(myUri.ToString().TrimEnd('/') + "/" + "Reply");
            await Context.ExecuteAsync(requestUri, "POST",
                new global::Microsoft.OData.Client.OperationParameter[] { new global::Microsoft.OData.Client.BodyOperationParameter("Comment", Comment) });
        }
        /// <summary>
        /// There are no comments for ReplyAll in the schema.
        /// </summary>
        public async  global::System.Threading.Tasks.Task ReplyAllAsync(string Comment)
        {
            var myUri = GetUrl();
            if (myUri == null)
            {
                throw new global::System.Exception("cannot find entity");
            }

            global::System.Uri requestUri = new global::System.Uri(myUri.ToString().TrimEnd('/') + "/" + "ReplyAll");
            await Context.ExecuteAsync(requestUri, "POST",
                new global::Microsoft.OData.Client.OperationParameter[] { new global::Microsoft.OData.Client.BodyOperationParameter("Comment", Comment) });
        }
        /// <summary>
        /// There are no comments for Forward in the schema.
        /// </summary>
        public async  global::System.Threading.Tasks.Task ForwardAsync(string Comment, global::System.Collections.Generic.ICollection<global::Microsoft.Office365.OutlookServices.Recipient> ToRecipients)
        {
            var myUri = GetUrl();
            if (myUri == null)
            {
                throw new global::System.Exception("cannot find entity");
            }

            global::System.Uri requestUri = new global::System.Uri(myUri.ToString().TrimEnd('/') + "/" + "Forward");
            await Context.ExecuteAsync(requestUri, "POST",
                new global::Microsoft.OData.Client.OperationParameter[] { new global::Microsoft.OData.Client.BodyOperationParameter("Comment", Comment), new global::Microsoft.OData.Client.BodyOperationParameter("ToRecipients", ToRecipients) });
        }
        /// <summary>
        /// There are no comments for Send in the schema.
        /// </summary>
        public async  global::System.Threading.Tasks.Task SendAsync()
        {
            var myUri = GetUrl();
            if (myUri == null)
            {
                throw new global::System.Exception("cannot find entity");
            }

            global::System.Uri requestUri = new global::System.Uri(myUri.ToString().TrimEnd('/') + "/" + "Send");
            await Context.ExecuteAsync(requestUri, "POST",
                new global::Microsoft.OData.Client.OperationParameter[] {  });
        }
    }

    [global::Microsoft.OData.Client.Key("Id")]
    public partial class Message : Item , IMessage, IMessageFetcher
    {
        public Message() : base() 
        {

        }
        // tag0002
        
        public string Subject
        {
            get
            {
                return this._Subject;
            }
            set
            {
                if (this._Subject != value)
                {
                    this._Subject = value;
                    OnPropertyChanged("Subject");
                }
            }
        }
        
        private string _Subject;


        // tag0002
        
        public global::Microsoft.Office365.OutlookServices.ItemBody Body
        {
            get
            {
                return this._Body;
            }
            set
            {
                if (this._Body != value)
                {
                    this._Body = value;
                    OnPropertyChanged("Body");
                }
            }
        }
        
        private global::Microsoft.Office365.OutlookServices.ItemBody _Body;


        // tag0002
        
        public string BodyPreview
        {
            get
            {
                return this._BodyPreview;
            }
            set
            {
                if (this._BodyPreview != value)
                {
                    this._BodyPreview = value;
                    OnPropertyChanged("BodyPreview");
                }
            }
        }
        
        private string _BodyPreview;


        // tag0002
        
        public global::Microsoft.Office365.OutlookServices.Importance Importance
        {
            get
            {
                return this._Importance;
            }
            set
            {
                if (this._Importance != value)
                {
                    this._Importance = value;
                    OnPropertyChanged("Importance");
                }
            }
        }
        
        private global::Microsoft.Office365.OutlookServices.Importance _Importance;


        // tag0002
        
        public global::System.Nullable<bool> HasAttachments
        {
            get
            {
                return this._HasAttachments;
            }
            set
            {
                if (this._HasAttachments != value)
                {
                    this._HasAttachments = value;
                    OnPropertyChanged("HasAttachments");
                }
            }
        }
        
        private global::System.Nullable<bool> _HasAttachments;


        // tag0002
        
        public string ParentFolderId
        {
            get
            {
                return this._ParentFolderId;
            }
            set
            {
                if (this._ParentFolderId != value)
                {
                    this._ParentFolderId = value;
                    OnPropertyChanged("ParentFolderId");
                }
            }
        }
        
        private string _ParentFolderId;


        // tag0002
        
        public global::Microsoft.Office365.OutlookServices.Recipient From
        {
            get
            {
                return this._From;
            }
            set
            {
                if (this._From != value)
                {
                    this._From = value;
                    OnPropertyChanged("From");
                }
            }
        }
        
        private global::Microsoft.Office365.OutlookServices.Recipient _From;


        // tag0002
        
        public global::Microsoft.Office365.OutlookServices.Recipient Sender
        {
            get
            {
                return this._Sender;
            }
            set
            {
                if (this._Sender != value)
                {
                    this._Sender = value;
                    OnPropertyChanged("Sender");
                }
            }
        }
        
        private global::Microsoft.Office365.OutlookServices.Recipient _Sender;


        // tag0002
        
        public global::System.Collections.Generic.IList<global::Microsoft.Office365.OutlookServices.Recipient> ToRecipients
        {
            get
            {
                if (this._ToRecipients == default(global::System.Collections.Generic.IList<global::Microsoft.Office365.OutlookServices.Recipient>))
                {
                    this._ToRecipients = new NonEntityTypeCollectionImpl<global::Microsoft.Office365.OutlookServices.Recipient>();
                    this._ToRecipients.SetContainer(() => GetContainingEntity("ToRecipients"));
                }

                return this._ToRecipients;
            }
            set
            {
                ToRecipients.Clear();
                if (value != null)
                {
                    foreach (var i in value) 
                    {
                        ToRecipients.Add(i);
                    }
                }
            }
        }
        
        private NonEntityTypeCollectionImpl<global::Microsoft.Office365.OutlookServices.Recipient> _ToRecipients;


        // tag0002
        
        public global::System.Collections.Generic.IList<global::Microsoft.Office365.OutlookServices.Recipient> CcRecipients
        {
            get
            {
                if (this._CcRecipients == default(global::System.Collections.Generic.IList<global::Microsoft.Office365.OutlookServices.Recipient>))
                {
                    this._CcRecipients = new NonEntityTypeCollectionImpl<global::Microsoft.Office365.OutlookServices.Recipient>();
                    this._CcRecipients.SetContainer(() => GetContainingEntity("CcRecipients"));
                }

                return this._CcRecipients;
            }
            set
            {
                CcRecipients.Clear();
                if (value != null)
                {
                    foreach (var i in value) 
                    {
                        CcRecipients.Add(i);
                    }
                }
            }
        }
        
        private NonEntityTypeCollectionImpl<global::Microsoft.Office365.OutlookServices.Recipient> _CcRecipients;


        // tag0002
        
        public global::System.Collections.Generic.IList<global::Microsoft.Office365.OutlookServices.Recipient> BccRecipients
        {
            get
            {
                if (this._BccRecipients == default(global::System.Collections.Generic.IList<global::Microsoft.Office365.OutlookServices.Recipient>))
                {
                    this._BccRecipients = new NonEntityTypeCollectionImpl<global::Microsoft.Office365.OutlookServices.Recipient>();
                    this._BccRecipients.SetContainer(() => GetContainingEntity("BccRecipients"));
                }

                return this._BccRecipients;
            }
            set
            {
                BccRecipients.Clear();
                if (value != null)
                {
                    foreach (var i in value) 
                    {
                        BccRecipients.Add(i);
                    }
                }
            }
        }
        
        private NonEntityTypeCollectionImpl<global::Microsoft.Office365.OutlookServices.Recipient> _BccRecipients;


        // tag0002
        
        public global::System.Collections.Generic.IList<global::Microsoft.Office365.OutlookServices.Recipient> ReplyTo
        {
            get
            {
                if (this._ReplyTo == default(global::System.Collections.Generic.IList<global::Microsoft.Office365.OutlookServices.Recipient>))
                {
                    this._ReplyTo = new NonEntityTypeCollectionImpl<global::Microsoft.Office365.OutlookServices.Recipient>();
                    this._ReplyTo.SetContainer(() => GetContainingEntity("ReplyTo"));
                }

                return this._ReplyTo;
            }
            set
            {
                ReplyTo.Clear();
                if (value != null)
                {
                    foreach (var i in value) 
                    {
                        ReplyTo.Add(i);
                    }
                }
            }
        }
        
        private NonEntityTypeCollectionImpl<global::Microsoft.Office365.OutlookServices.Recipient> _ReplyTo;


        // tag0002
        
        public string ConversationId
        {
            get
            {
                return this._ConversationId;
            }
            set
            {
                if (this._ConversationId != value)
                {
                    this._ConversationId = value;
                    OnPropertyChanged("ConversationId");
                }
            }
        }
        
        private string _ConversationId;


        // tag0002
        
        public global::Microsoft.Office365.OutlookServices.ItemBody UniqueBody
        {
            get
            {
                return this._UniqueBody;
            }
            set
            {
                if (this._UniqueBody != value)
                {
                    this._UniqueBody = value;
                    OnPropertyChanged("UniqueBody");
                }
            }
        }
        
        private global::Microsoft.Office365.OutlookServices.ItemBody _UniqueBody;


        // tag0002
        
        public global::System.Nullable<global::System.DateTimeOffset> DateTimeReceived
        {
            get
            {
                return this._DateTimeReceived;
            }
            set
            {
                if (this._DateTimeReceived != value)
                {
                    this._DateTimeReceived = value;
                    OnPropertyChanged("DateTimeReceived");
                }
            }
        }
        
        private global::System.Nullable<global::System.DateTimeOffset> _DateTimeReceived;


        // tag0002
        
        public global::System.Nullable<global::System.DateTimeOffset> DateTimeSent
        {
            get
            {
                return this._DateTimeSent;
            }
            set
            {
                if (this._DateTimeSent != value)
                {
                    this._DateTimeSent = value;
                    OnPropertyChanged("DateTimeSent");
                }
            }
        }
        
        private global::System.Nullable<global::System.DateTimeOffset> _DateTimeSent;


        // tag0002
        
        public global::System.Nullable<bool> IsDeliveryReceiptRequested
        {
            get
            {
                return this._IsDeliveryReceiptRequested;
            }
            set
            {
                if (this._IsDeliveryReceiptRequested != value)
                {
                    this._IsDeliveryReceiptRequested = value;
                    OnPropertyChanged("IsDeliveryReceiptRequested");
                }
            }
        }
        
        private global::System.Nullable<bool> _IsDeliveryReceiptRequested;


        // tag0002
        
        public global::System.Nullable<bool> IsReadReceiptRequested
        {
            get
            {
                return this._IsReadReceiptRequested;
            }
            set
            {
                if (this._IsReadReceiptRequested != value)
                {
                    this._IsReadReceiptRequested = value;
                    OnPropertyChanged("IsReadReceiptRequested");
                }
            }
        }
        
        private global::System.Nullable<bool> _IsReadReceiptRequested;


        // tag0002
        
        public global::System.Nullable<bool> IsDraft
        {
            get
            {
                return this._IsDraft;
            }
            set
            {
                if (this._IsDraft != value)
                {
                    this._IsDraft = value;
                    OnPropertyChanged("IsDraft");
                }
            }
        }
        
        private global::System.Nullable<bool> _IsDraft;


        // tag0002
        
        public global::System.Nullable<bool> IsRead
        {
            get
            {
                return this._IsRead;
            }
            set
            {
                if (this._IsRead != value)
                {
                    this._IsRead = value;
                    OnPropertyChanged("IsRead");
                }
            }
        }
        
        private global::System.Nullable<bool> _IsRead;


        // tag 0014
        global::Microsoft.Office365.OutlookServices.IAttachmentCollection Microsoft.Office365.OutlookServices.IMessageFetcher.Attachments
        {
            get
            {
                if (this._AttachmentsFetcher == null)
                {
                    this._AttachmentsFetcher = new global::Microsoft.Office365.OutlookServices.AttachmentCollection(
                        Context != null ? Context.CreateQuery<global::Microsoft.Office365.OutlookServices.Attachment>(GetPath("Attachments")) : null,
                        Context,
                        this,
                        GetPath("Attachments"));
                }

                return this._AttachmentsFetcher;
            }
        }
        private global::Microsoft.Office365.OutlookServices.IAttachmentCollection _AttachmentsFetcher;


        // tag0013
        public global::System.Collections.Generic.IList<global::Microsoft.Office365.OutlookServices.Attachment> Attachments
        {
            get
            {
                if (this._Attachments == null)
                {
                    this._Attachments = new EntityCollectionImpl<global::Microsoft.Office365.OutlookServices.Attachment>();
                    this._Attachments.SetContainer(() => GetContainingEntity("Attachments"));
                }

                return this._Attachments;
            }
            set
            {
                _Attachments.Clear();
                if (value != null)
                {
                    foreach (var i in value)
                    {
                        _Attachments.Add(i);
                    }
                }
            }
        }

        Microsoft.Office365.OutlookServices.Extensions.IPagedCollection<global::Microsoft.Office365.OutlookServices.IAttachment> Microsoft.Office365.OutlookServices.IMessage.Attachments
        {
            get
            {
                return new Microsoft.Office365.OutlookServices.Extensions.PagedCollection<global::Microsoft.Office365.OutlookServices.IAttachment, global::Microsoft.Office365.OutlookServices.Attachment>(Context, (EntityCollectionImpl<global::Microsoft.Office365.OutlookServices.Attachment>) Attachments);
            }
        }

        private EntityCollectionImpl<global::Microsoft.Office365.OutlookServices.Attachment> _Attachments;
        /// <summary>
        /// There are no comments for Copy in the schema.
        /// </summary>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Office365.OutlookServices.IMessage> CopyAsync(string DestinationId)
        {
			 if (Context == null) throw new InvalidOperationException("Not Initialized");

            var myUri = GetUrl();
            if (myUri == null)
            {
                throw new global::System.Exception("cannot find entity");
            }

            global::System.Uri requestUri = new global::System.Uri(myUri.ToString().TrimEnd('/') + "/" + "Copy");
            return global::System.Linq.Enumerable.Single(
                await Context.ExecuteAsync<global::Microsoft.Office365.OutlookServices.Message>(requestUri, "POST", true,
                new global::Microsoft.OData.Client.OperationParameter[] { new global::Microsoft.OData.Client.BodyOperationParameter("DestinationId", DestinationId) }));
        }
        /// <summary>
        /// There are no comments for Move in the schema.
        /// </summary>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Office365.OutlookServices.IMessage> MoveAsync(string DestinationId)
        {
			 if (Context == null) throw new InvalidOperationException("Not Initialized");

            var myUri = GetUrl();
            if (myUri == null)
            {
                throw new global::System.Exception("cannot find entity");
            }

            global::System.Uri requestUri = new global::System.Uri(myUri.ToString().TrimEnd('/') + "/" + "Move");
            return global::System.Linq.Enumerable.Single(
                await Context.ExecuteAsync<global::Microsoft.Office365.OutlookServices.Message>(requestUri, "POST", true,
                new global::Microsoft.OData.Client.OperationParameter[] { new global::Microsoft.OData.Client.BodyOperationParameter("DestinationId", DestinationId) }));
        }
        /// <summary>
        /// There are no comments for CreateReply in the schema.
        /// </summary>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Office365.OutlookServices.IMessage> CreateReplyAsync()
        {
			 if (Context == null) throw new InvalidOperationException("Not Initialized");

            var myUri = GetUrl();
            if (myUri == null)
            {
                throw new global::System.Exception("cannot find entity");
            }

            global::System.Uri requestUri = new global::System.Uri(myUri.ToString().TrimEnd('/') + "/" + "CreateReply");
            return global::System.Linq.Enumerable.Single(
                await Context.ExecuteAsync<global::Microsoft.Office365.OutlookServices.Message>(requestUri, "POST", true,
                new global::Microsoft.OData.Client.OperationParameter[] {  }));
        }
        /// <summary>
        /// There are no comments for CreateReplyAll in the schema.
        /// </summary>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Office365.OutlookServices.IMessage> CreateReplyAllAsync()
        {
			 if (Context == null) throw new InvalidOperationException("Not Initialized");

            var myUri = GetUrl();
            if (myUri == null)
            {
                throw new global::System.Exception("cannot find entity");
            }

            global::System.Uri requestUri = new global::System.Uri(myUri.ToString().TrimEnd('/') + "/" + "CreateReplyAll");
            return global::System.Linq.Enumerable.Single(
                await Context.ExecuteAsync<global::Microsoft.Office365.OutlookServices.Message>(requestUri, "POST", true,
                new global::Microsoft.OData.Client.OperationParameter[] {  }));
        }
        /// <summary>
        /// There are no comments for CreateForward in the schema.
        /// </summary>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Office365.OutlookServices.IMessage> CreateForwardAsync()
        {
			 if (Context == null) throw new InvalidOperationException("Not Initialized");

            var myUri = GetUrl();
            if (myUri == null)
            {
                throw new global::System.Exception("cannot find entity");
            }

            global::System.Uri requestUri = new global::System.Uri(myUri.ToString().TrimEnd('/') + "/" + "CreateForward");
            return global::System.Linq.Enumerable.Single(
                await Context.ExecuteAsync<global::Microsoft.Office365.OutlookServices.Message>(requestUri, "POST", true,
                new global::Microsoft.OData.Client.OperationParameter[] {  }));
        }
        /// <summary>
        /// There are no comments for Reply in the schema.
        /// </summary>
        public async  global::System.Threading.Tasks.Task ReplyAsync(string Comment)
        {
            var myUri = GetUrl();
            if (myUri == null)
            {
                throw new global::System.Exception("cannot find entity");
            }

            global::System.Uri requestUri = new global::System.Uri(myUri.ToString().TrimEnd('/') + "/" + "Reply");
            await Context.ExecuteAsync(requestUri, "POST",
                new global::Microsoft.OData.Client.OperationParameter[] { new global::Microsoft.OData.Client.BodyOperationParameter("Comment", Comment) });
        }
        /// <summary>
        /// There are no comments for ReplyAll in the schema.
        /// </summary>
        public async  global::System.Threading.Tasks.Task ReplyAllAsync(string Comment)
        {
            var myUri = GetUrl();
            if (myUri == null)
            {
                throw new global::System.Exception("cannot find entity");
            }

            global::System.Uri requestUri = new global::System.Uri(myUri.ToString().TrimEnd('/') + "/" + "ReplyAll");
            await Context.ExecuteAsync(requestUri, "POST",
                new global::Microsoft.OData.Client.OperationParameter[] { new global::Microsoft.OData.Client.BodyOperationParameter("Comment", Comment) });
        }
        /// <summary>
        /// There are no comments for Forward in the schema.
        /// </summary>
        public async  global::System.Threading.Tasks.Task ForwardAsync(string Comment, global::System.Collections.Generic.ICollection<global::Microsoft.Office365.OutlookServices.Recipient> ToRecipients)
        {
            var myUri = GetUrl();
            if (myUri == null)
            {
                throw new global::System.Exception("cannot find entity");
            }

            global::System.Uri requestUri = new global::System.Uri(myUri.ToString().TrimEnd('/') + "/" + "Forward");
            await Context.ExecuteAsync(requestUri, "POST",
                new global::Microsoft.OData.Client.OperationParameter[] { new global::Microsoft.OData.Client.BodyOperationParameter("Comment", Comment), new global::Microsoft.OData.Client.BodyOperationParameter("ToRecipients", ToRecipients) });
        }
        /// <summary>
        /// There are no comments for Send in the schema.
        /// </summary>
        public async  global::System.Threading.Tasks.Task SendAsync()
        {
            var myUri = GetUrl();
            if (myUri == null)
            {
                throw new global::System.Exception("cannot find entity");
            }

            global::System.Uri requestUri = new global::System.Uri(myUri.ToString().TrimEnd('/') + "/" + "Send");
            await Context.ExecuteAsync(requestUri, "POST",
                new global::Microsoft.OData.Client.OperationParameter[] {  });
        }

        global::System.Threading.Tasks.Task<IMessage> IMessageFetcher.ExecuteAsync()
        {
            var tsc = new global::System.Threading.Tasks.TaskCompletionSource<IMessage> ();
            tsc.SetResult(this);
            return tsc.Task;
        }

        IMessageFetcher IMessageFetcher.Expand<TTarget>(System.Linq.Expressions.Expression<global::System.Func<IMessage, TTarget>> navigationPropertyAccessor)
        {
            return this;
        }
    }

    [Microsoft.Office365.OutlookServices.Extensions.LowerCaseProperty]
    public partial interface IAttachmentFetcher : IEntityFetcher
    {
    }

    [Microsoft.Office365.OutlookServices.Extensions.LowerCaseProperty]
    public partial interface IAttachment:  IEntity
    {
        string Name
        {
            get; set;
        }
        string ContentType
        {
            get; set;
        }
        int Size
        {
            get; set;
        }
        bool IsInline
        {
            get; set;
        }
        global::System.Nullable<global::System.DateTimeOffset> DateTimeLastModified
        {
            get; set;
        }
    }

    internal partial class AttachmentFetcher : EntityFetcher , IAttachmentFetcher
    {
    }

    [global::Microsoft.OData.Client.Key("Id")]
    abstract public partial class Attachment : Entity , IAttachment, IAttachmentFetcher
    {
        public Attachment() : base() 
        {

        }
        // tag0002
        
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if (this._Name != value)
                {
                    this._Name = value;
                    OnPropertyChanged("Name");
                }
            }
        }
        
        private string _Name;


        // tag0002
        
        public string ContentType
        {
            get
            {
                return this._ContentType;
            }
            set
            {
                if (this._ContentType != value)
                {
                    this._ContentType = value;
                    OnPropertyChanged("ContentType");
                }
            }
        }
        
        private string _ContentType;


        // tag0002
        
        public int Size
        {
            get
            {
                return this._Size;
            }
            set
            {
                if (this._Size != value)
                {
                    this._Size = value;
                    OnPropertyChanged("Size");
                }
            }
        }
        
        private int _Size;


        // tag0002
        
        public bool IsInline
        {
            get
            {
                return this._IsInline;
            }
            set
            {
                if (this._IsInline != value)
                {
                    this._IsInline = value;
                    OnPropertyChanged("IsInline");
                }
            }
        }
        
        private bool _IsInline;


        // tag0002
        
        public global::System.Nullable<global::System.DateTimeOffset> DateTimeLastModified
        {
            get
            {
                return this._DateTimeLastModified;
            }
            set
            {
                if (this._DateTimeLastModified != value)
                {
                    this._DateTimeLastModified = value;
                    OnPropertyChanged("DateTimeLastModified");
                }
            }
        }
        
        private global::System.Nullable<global::System.DateTimeOffset> _DateTimeLastModified;


    }

    [Microsoft.Office365.OutlookServices.Extensions.LowerCaseProperty]
    public partial interface IFileAttachmentFetcher : IAttachmentFetcher
    {
   
        new global::System.Threading.Tasks.Task<IFileAttachment> ExecuteAsync();

        new IFileAttachmentFetcher Expand<TTarget>(System.Linq.Expressions.Expression<global::System.Func<IFileAttachment, TTarget>> navigationPropertyAccessor);

    }

    [Microsoft.Office365.OutlookServices.Extensions.LowerCaseProperty]
    public partial interface IFileAttachment:  IAttachment
    {
        string ContentId
        {
            get; set;
        }
        string ContentLocation
        {
            get; set;
        }
        bool IsContactPhoto
        {
            get; set;
        }
        byte[] ContentBytes
        {
            get; set;
        }
    }

    internal partial class FileAttachmentFetcher : AttachmentFetcher , IFileAttachmentFetcher
    {

        public new async global::System.Threading.Tasks.Task<IFileAttachment> ExecuteAsync()
        {
            return await EnsureQuery().ExecuteSingleAsync();
        }
         
        public new IFileAttachmentFetcher Expand<TTarget>(System.Linq.Expressions.Expression<global::System.Func<IFileAttachment, TTarget>> navigationPropertyAccessor)
        {
            return new FileAttachmentFetcher
            {
                _query = EnsureQuery().Expand(navigationPropertyAccessor)
            };
        }

        private IReadOnlyQueryableSet<IFileAttachment> EnsureQuery()
        {
            if (this._query == null)
            {
                this._query = new global::Microsoft.Office365.OutlookServices.Extensions.ReadOnlyQueryableSet<IFileAttachment>(Context.CreateQuery<FileAttachment>(GetPath(null)), Context);
            }

            return this._query;
        }

        private global::Microsoft.Office365.OutlookServices.Extensions.IReadOnlyQueryableSet<IFileAttachment> _query;

    }

    [global::Microsoft.OData.Client.Key("Id")]
    public partial class FileAttachment : Attachment , IFileAttachment, IFileAttachmentFetcher
    {
        public FileAttachment() : base() 
        {

        }
        // tag0002
        
        public string ContentId
        {
            get
            {
                return this._ContentId;
            }
            set
            {
                if (this._ContentId != value)
                {
                    this._ContentId = value;
                    OnPropertyChanged("ContentId");
                }
            }
        }
        
        private string _ContentId;


        // tag0002
        
        public string ContentLocation
        {
            get
            {
                return this._ContentLocation;
            }
            set
            {
                if (this._ContentLocation != value)
                {
                    this._ContentLocation = value;
                    OnPropertyChanged("ContentLocation");
                }
            }
        }
        
        private string _ContentLocation;


        // tag0002
        
        public bool IsContactPhoto
        {
            get
            {
                return this._IsContactPhoto;
            }
            set
            {
                if (this._IsContactPhoto != value)
                {
                    this._IsContactPhoto = value;
                    OnPropertyChanged("IsContactPhoto");
                }
            }
        }
        
        private bool _IsContactPhoto;


        // tag0002
        
        public byte[] ContentBytes
        {
            get
            {
                return this._ContentBytes;
            }
            set
            {
                if (this._ContentBytes != value)
                {
                    this._ContentBytes = value;
                    OnPropertyChanged("ContentBytes");
                }
            }
        }
        
        private byte[] _ContentBytes;



        global::System.Threading.Tasks.Task<IFileAttachment> IFileAttachmentFetcher.ExecuteAsync()
        {
            var tsc = new global::System.Threading.Tasks.TaskCompletionSource<IFileAttachment> ();
            tsc.SetResult(this);
            return tsc.Task;
        }

        IFileAttachmentFetcher IFileAttachmentFetcher.Expand<TTarget>(System.Linq.Expressions.Expression<global::System.Func<IFileAttachment, TTarget>> navigationPropertyAccessor)
        {
            return this;
        }
    }

    [Microsoft.Office365.OutlookServices.Extensions.LowerCaseProperty]
    public partial interface IItemAttachmentFetcher : IAttachmentFetcher
    {
   
        new global::System.Threading.Tasks.Task<IItemAttachment> ExecuteAsync();

        new IItemAttachmentFetcher Expand<TTarget>(System.Linq.Expressions.Expression<global::System.Func<IItemAttachment, TTarget>> navigationPropertyAccessor);

        global::Microsoft.Office365.OutlookServices.IItemFetcher Item
        {
            get; 
        }
    }

    [Microsoft.Office365.OutlookServices.Extensions.LowerCaseProperty]
    public partial interface IItemAttachment:  IAttachment
    {
        global::Microsoft.Office365.OutlookServices.IItem Item
        {
            get; set;
        }
    }

    internal partial class ItemAttachmentFetcher : AttachmentFetcher , IItemAttachmentFetcher
    {
        // tag 0004
        public global::Microsoft.Office365.OutlookServices.IItemFetcher Item
        {
            get
            {
                if ((this._Item == null))
                {
                    this._Item = new global::Microsoft.Office365.OutlookServices.ItemFetcher();
                    this._Item.Initialize(this.Context, GetPath("Item"));

                }
                return this._Item;
            }
        }

        private global::Microsoft.Office365.OutlookServices.ItemFetcher _Item;

        public new async global::System.Threading.Tasks.Task<IItemAttachment> ExecuteAsync()
        {
            return await EnsureQuery().ExecuteSingleAsync();
        }
         
        public new IItemAttachmentFetcher Expand<TTarget>(System.Linq.Expressions.Expression<global::System.Func<IItemAttachment, TTarget>> navigationPropertyAccessor)
        {
            return new ItemAttachmentFetcher
            {
                _query = EnsureQuery().Expand(navigationPropertyAccessor)
            };
        }

        private IReadOnlyQueryableSet<IItemAttachment> EnsureQuery()
        {
            if (this._query == null)
            {
                this._query = new global::Microsoft.Office365.OutlookServices.Extensions.ReadOnlyQueryableSet<IItemAttachment>(Context.CreateQuery<ItemAttachment>(GetPath(null)), Context);
            }

            return this._query;
        }

        private global::Microsoft.Office365.OutlookServices.Extensions.IReadOnlyQueryableSet<IItemAttachment> _query;

    }

    [global::Microsoft.OData.Client.Key("Id")]
    public partial class ItemAttachment : Attachment , IItemAttachment, IItemAttachmentFetcher
    {
        public ItemAttachment() : base() 
        {

        }
        // tag 0012
        global::Microsoft.Office365.OutlookServices.IItem Microsoft.Office365.OutlookServices.IItemAttachment.Item
        {
            get
            {
                return this.Item;
            }
            set
            {
                if (this.Item != value)
                {
                    this.Item = (global::Microsoft.Office365.OutlookServices.Item)value;
                }
            }
        }

        global::Microsoft.Office365.OutlookServices.IItemFetcher Microsoft.Office365.OutlookServices.IItemAttachmentFetcher.Item
        {
            get
            {
                var retVal = new global::Microsoft.Office365.OutlookServices.ItemFetcher();
                retVal.Initialize(this.Context, GetPath("Item"));
                return retVal;
            }
        }

        // tag0015
        public global::Microsoft.Office365.OutlookServices.Item Item
        {
            get
            {
                return this._Item;
            }
            set
            {
                if (this._Item != value)
                {
                    this._Item = value;
                    if (Context != null && Context.GetEntityDescriptor(this) != null && (value == null || Context.GetEntityDescriptor(value) != null))
                    {
                        Context.SetLink(this, "Item", value);
                    }
                }
            }
        }

        private global::Microsoft.Office365.OutlookServices.Item _Item;

        global::System.Threading.Tasks.Task<IItemAttachment> IItemAttachmentFetcher.ExecuteAsync()
        {
            var tsc = new global::System.Threading.Tasks.TaskCompletionSource<IItemAttachment> ();
            tsc.SetResult(this);
            return tsc.Task;
        }

        IItemAttachmentFetcher IItemAttachmentFetcher.Expand<TTarget>(System.Linq.Expressions.Expression<global::System.Func<IItemAttachment, TTarget>> navigationPropertyAccessor)
        {
            return this;
        }
    }

    [Microsoft.Office365.OutlookServices.Extensions.LowerCaseProperty]
    public partial interface ICalendarFetcher : IEntityFetcher
    {
   
        new global::System.Threading.Tasks.Task<ICalendar> ExecuteAsync();

        new ICalendarFetcher Expand<TTarget>(System.Linq.Expressions.Expression<global::System.Func<ICalendar, TTarget>> navigationPropertyAccessor);

        global::Microsoft.Office365.OutlookServices.IEventCollection CalendarView
        {
            get; 
        }

        global::Microsoft.Office365.OutlookServices.IEventCollection Events
        {
            get; 
        }

    }

    [Microsoft.Office365.OutlookServices.Extensions.LowerCaseProperty]
    public partial interface ICalendar:  IEntity
    {
        string Name
        {
            get; set;
        }
        string ChangeKey
        {
            get; set;
        }
        Microsoft.Office365.OutlookServices.Extensions.IPagedCollection<global::Microsoft.Office365.OutlookServices.IEvent> CalendarView
        {
            get; 
        }

        Microsoft.Office365.OutlookServices.Extensions.IPagedCollection<global::Microsoft.Office365.OutlookServices.IEvent> Events
        {
            get; 
        }

    }

    internal partial class CalendarFetcher : EntityFetcher , ICalendarFetcher
    {

        // tag0003
        public global::Microsoft.Office365.OutlookServices.IEventCollection CalendarView
        {
            get
            {
                if ((this._CalendarView == null))
                {
                    this._CalendarView = new global::Microsoft.Office365.OutlookServices.EventCollection(
                        Context != null ? Context.CreateQuery<global::Microsoft.Office365.OutlookServices.Event>(GetPath("CalendarView")) : null,
                        Context, 
                        this, 
                        GetPath("CalendarView"));
                }

                return this._CalendarView;
            }
        }

        private global::Microsoft.Office365.OutlookServices.IEventCollection _CalendarView;

        // tag0003
        public global::Microsoft.Office365.OutlookServices.IEventCollection Events
        {
            get
            {
                if ((this._Events == null))
                {
                    this._Events = new global::Microsoft.Office365.OutlookServices.EventCollection(
                        Context != null ? Context.CreateQuery<global::Microsoft.Office365.OutlookServices.Event>(GetPath("Events")) : null,
                        Context, 
                        this, 
                        GetPath("Events"));
                }

                return this._Events;
            }
        }

        private global::Microsoft.Office365.OutlookServices.IEventCollection _Events;

        public new async global::System.Threading.Tasks.Task<ICalendar> ExecuteAsync()
        {
            return await EnsureQuery().ExecuteSingleAsync();
        }
         
        public new ICalendarFetcher Expand<TTarget>(System.Linq.Expressions.Expression<global::System.Func<ICalendar, TTarget>> navigationPropertyAccessor)
        {
            return new CalendarFetcher
            {
                _query = EnsureQuery().Expand(navigationPropertyAccessor)
            };
        }

        private IReadOnlyQueryableSet<ICalendar> EnsureQuery()
        {
            if (this._query == null)
            {
                this._query = new global::Microsoft.Office365.OutlookServices.Extensions.ReadOnlyQueryableSet<ICalendar>(Context.CreateQuery<Calendar>(GetPath(null)), Context);
            }

            return this._query;
        }

        private global::Microsoft.Office365.OutlookServices.Extensions.IReadOnlyQueryableSet<ICalendar> _query;

    }

    [global::Microsoft.OData.Client.Key("Id")]
    public partial class Calendar : Entity , ICalendar, ICalendarFetcher
    {
        public Calendar() : base() 
        {

        }
        // tag0002
        
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if (this._Name != value)
                {
                    this._Name = value;
                    OnPropertyChanged("Name");
                }
            }
        }
        
        private string _Name;


        // tag0002
        
        public string ChangeKey
        {
            get
            {
                return this._ChangeKey;
            }
            set
            {
                if (this._ChangeKey != value)
                {
                    this._ChangeKey = value;
                    OnPropertyChanged("ChangeKey");
                }
            }
        }
        
        private string _ChangeKey;


        // tag 0014
        global::Microsoft.Office365.OutlookServices.IEventCollection Microsoft.Office365.OutlookServices.ICalendarFetcher.CalendarView
        {
            get
            {
                if (this._CalendarViewFetcher == null)
                {
                    this._CalendarViewFetcher = new global::Microsoft.Office365.OutlookServices.EventCollection(
                        Context != null ? Context.CreateQuery<global::Microsoft.Office365.OutlookServices.Event>(GetPath("CalendarView")) : null,
                        Context,
                        this,
                        GetPath("CalendarView"));
                }

                return this._CalendarViewFetcher;
            }
        }
        private global::Microsoft.Office365.OutlookServices.IEventCollection _CalendarViewFetcher;


        // tag0013
        public global::System.Collections.Generic.IList<global::Microsoft.Office365.OutlookServices.Event> CalendarView
        {
            get
            {
                if (this._CalendarView == null)
                {
                    this._CalendarView = new EntityCollectionImpl<global::Microsoft.Office365.OutlookServices.Event>();
                    this._CalendarView.SetContainer(() => GetContainingEntity("CalendarView"));
                }

                return this._CalendarView;
            }
            set
            {
                _CalendarView.Clear();
                if (value != null)
                {
                    foreach (var i in value)
                    {
                        _CalendarView.Add(i);
                    }
                }
            }
        }

        Microsoft.Office365.OutlookServices.Extensions.IPagedCollection<global::Microsoft.Office365.OutlookServices.IEvent> Microsoft.Office365.OutlookServices.ICalendar.CalendarView
        {
            get
            {
                return new Microsoft.Office365.OutlookServices.Extensions.PagedCollection<global::Microsoft.Office365.OutlookServices.IEvent, global::Microsoft.Office365.OutlookServices.Event>(Context, (EntityCollectionImpl<global::Microsoft.Office365.OutlookServices.Event>) CalendarView);
            }
        }

        private EntityCollectionImpl<global::Microsoft.Office365.OutlookServices.Event> _CalendarView;
        // tag 0014
        global::Microsoft.Office365.OutlookServices.IEventCollection Microsoft.Office365.OutlookServices.ICalendarFetcher.Events
        {
            get
            {
                if (this._EventsFetcher == null)
                {
                    this._EventsFetcher = new global::Microsoft.Office365.OutlookServices.EventCollection(
                        Context != null ? Context.CreateQuery<global::Microsoft.Office365.OutlookServices.Event>(GetPath("Events")) : null,
                        Context,
                        this,
                        GetPath("Events"));
                }

                return this._EventsFetcher;
            }
        }
        private global::Microsoft.Office365.OutlookServices.IEventCollection _EventsFetcher;


        // tag0013
        public global::System.Collections.Generic.IList<global::Microsoft.Office365.OutlookServices.Event> Events
        {
            get
            {
                if (this._Events == null)
                {
                    this._Events = new EntityCollectionImpl<global::Microsoft.Office365.OutlookServices.Event>();
                    this._Events.SetContainer(() => GetContainingEntity("Events"));
                }

                return this._Events;
            }
            set
            {
                _Events.Clear();
                if (value != null)
                {
                    foreach (var i in value)
                    {
                        _Events.Add(i);
                    }
                }
            }
        }

        Microsoft.Office365.OutlookServices.Extensions.IPagedCollection<global::Microsoft.Office365.OutlookServices.IEvent> Microsoft.Office365.OutlookServices.ICalendar.Events
        {
            get
            {
                return new Microsoft.Office365.OutlookServices.Extensions.PagedCollection<global::Microsoft.Office365.OutlookServices.IEvent, global::Microsoft.Office365.OutlookServices.Event>(Context, (EntityCollectionImpl<global::Microsoft.Office365.OutlookServices.Event>) Events);
            }
        }

        private EntityCollectionImpl<global::Microsoft.Office365.OutlookServices.Event> _Events;

        global::System.Threading.Tasks.Task<ICalendar> ICalendarFetcher.ExecuteAsync()
        {
            var tsc = new global::System.Threading.Tasks.TaskCompletionSource<ICalendar> ();
            tsc.SetResult(this);
            return tsc.Task;
        }

        ICalendarFetcher ICalendarFetcher.Expand<TTarget>(System.Linq.Expressions.Expression<global::System.Func<ICalendar, TTarget>> navigationPropertyAccessor)
        {
            return this;
        }
    }

    [Microsoft.Office365.OutlookServices.Extensions.LowerCaseProperty]
    public partial interface ICalendarGroupFetcher : IEntityFetcher
    {
   
        new global::System.Threading.Tasks.Task<ICalendarGroup> ExecuteAsync();

        new ICalendarGroupFetcher Expand<TTarget>(System.Linq.Expressions.Expression<global::System.Func<ICalendarGroup, TTarget>> navigationPropertyAccessor);

        global::Microsoft.Office365.OutlookServices.ICalendarCollection Calendars
        {
            get; 
        }

    }

    [Microsoft.Office365.OutlookServices.Extensions.LowerCaseProperty]
    public partial interface ICalendarGroup:  IEntity
    {
        string Name
        {
            get; set;
        }
        string ChangeKey
        {
            get; set;
        }
        global::System.Nullable<global::System.Guid> ClassId
        {
            get; set;
        }
        Microsoft.Office365.OutlookServices.Extensions.IPagedCollection<global::Microsoft.Office365.OutlookServices.ICalendar> Calendars
        {
            get; 
        }

    }

    internal partial class CalendarGroupFetcher : EntityFetcher , ICalendarGroupFetcher
    {

        // tag0003
        public global::Microsoft.Office365.OutlookServices.ICalendarCollection Calendars
        {
            get
            {
                if ((this._Calendars == null))
                {
                    this._Calendars = new global::Microsoft.Office365.OutlookServices.CalendarCollection(
                        Context != null ? Context.CreateQuery<global::Microsoft.Office365.OutlookServices.Calendar>(GetPath("Calendars")) : null,
                        Context, 
                        this, 
                        GetPath("Calendars"));
                }

                return this._Calendars;
            }
        }

        private global::Microsoft.Office365.OutlookServices.ICalendarCollection _Calendars;

        public new async global::System.Threading.Tasks.Task<ICalendarGroup> ExecuteAsync()
        {
            return await EnsureQuery().ExecuteSingleAsync();
        }
         
        public new ICalendarGroupFetcher Expand<TTarget>(System.Linq.Expressions.Expression<global::System.Func<ICalendarGroup, TTarget>> navigationPropertyAccessor)
        {
            return new CalendarGroupFetcher
            {
                _query = EnsureQuery().Expand(navigationPropertyAccessor)
            };
        }

        private IReadOnlyQueryableSet<ICalendarGroup> EnsureQuery()
        {
            if (this._query == null)
            {
                this._query = new global::Microsoft.Office365.OutlookServices.Extensions.ReadOnlyQueryableSet<ICalendarGroup>(Context.CreateQuery<CalendarGroup>(GetPath(null)), Context);
            }

            return this._query;
        }

        private global::Microsoft.Office365.OutlookServices.Extensions.IReadOnlyQueryableSet<ICalendarGroup> _query;

    }

    [global::Microsoft.OData.Client.Key("Id")]
    public partial class CalendarGroup : Entity , ICalendarGroup, ICalendarGroupFetcher
    {
        public CalendarGroup() : base() 
        {

        }
        // tag0002
        
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if (this._Name != value)
                {
                    this._Name = value;
                    OnPropertyChanged("Name");
                }
            }
        }
        
        private string _Name;


        // tag0002
        
        public string ChangeKey
        {
            get
            {
                return this._ChangeKey;
            }
            set
            {
                if (this._ChangeKey != value)
                {
                    this._ChangeKey = value;
                    OnPropertyChanged("ChangeKey");
                }
            }
        }
        
        private string _ChangeKey;


        // tag0002
        
        public global::System.Nullable<global::System.Guid> ClassId
        {
            get
            {
                return this._ClassId;
            }
            set
            {
                if (this._ClassId != value)
                {
                    this._ClassId = value;
                    OnPropertyChanged("ClassId");
                }
            }
        }
        
        private global::System.Nullable<global::System.Guid> _ClassId;


        // tag 0014
        global::Microsoft.Office365.OutlookServices.ICalendarCollection Microsoft.Office365.OutlookServices.ICalendarGroupFetcher.Calendars
        {
            get
            {
                if (this._CalendarsFetcher == null)
                {
                    this._CalendarsFetcher = new global::Microsoft.Office365.OutlookServices.CalendarCollection(
                        Context != null ? Context.CreateQuery<global::Microsoft.Office365.OutlookServices.Calendar>(GetPath("Calendars")) : null,
                        Context,
                        this,
                        GetPath("Calendars"));
                }

                return this._CalendarsFetcher;
            }
        }
        private global::Microsoft.Office365.OutlookServices.ICalendarCollection _CalendarsFetcher;


        // tag0013
        public global::System.Collections.Generic.IList<global::Microsoft.Office365.OutlookServices.Calendar> Calendars
        {
            get
            {
                if (this._Calendars == null)
                {
                    this._Calendars = new EntityCollectionImpl<global::Microsoft.Office365.OutlookServices.Calendar>();
                    this._Calendars.SetContainer(() => GetContainingEntity("Calendars"));
                }

                return this._Calendars;
            }
            set
            {
                _Calendars.Clear();
                if (value != null)
                {
                    foreach (var i in value)
                    {
                        _Calendars.Add(i);
                    }
                }
            }
        }

        Microsoft.Office365.OutlookServices.Extensions.IPagedCollection<global::Microsoft.Office365.OutlookServices.ICalendar> Microsoft.Office365.OutlookServices.ICalendarGroup.Calendars
        {
            get
            {
                return new Microsoft.Office365.OutlookServices.Extensions.PagedCollection<global::Microsoft.Office365.OutlookServices.ICalendar, global::Microsoft.Office365.OutlookServices.Calendar>(Context, (EntityCollectionImpl<global::Microsoft.Office365.OutlookServices.Calendar>) Calendars);
            }
        }

        private EntityCollectionImpl<global::Microsoft.Office365.OutlookServices.Calendar> _Calendars;

        global::System.Threading.Tasks.Task<ICalendarGroup> ICalendarGroupFetcher.ExecuteAsync()
        {
            var tsc = new global::System.Threading.Tasks.TaskCompletionSource<ICalendarGroup> ();
            tsc.SetResult(this);
            return tsc.Task;
        }

        ICalendarGroupFetcher ICalendarGroupFetcher.Expand<TTarget>(System.Linq.Expressions.Expression<global::System.Func<ICalendarGroup, TTarget>> navigationPropertyAccessor)
        {
            return this;
        }
    }

    [Microsoft.Office365.OutlookServices.Extensions.LowerCaseProperty]
    public partial interface IEventFetcher : IItemFetcher
    {
   
        new global::System.Threading.Tasks.Task<IEvent> ExecuteAsync();

        new IEventFetcher Expand<TTarget>(System.Linq.Expressions.Expression<global::System.Func<IEvent, TTarget>> navigationPropertyAccessor);

        global::Microsoft.Office365.OutlookServices.IAttachmentCollection Attachments
        {
            get; 
        }

        global::Microsoft.Office365.OutlookServices.ICalendarFetcher Calendar
        {
            get; 
        }
        global::Microsoft.Office365.OutlookServices.IEventCollection Instances
        {
            get; 
        }

// tag0009
         global::System.Threading.Tasks.Task AcceptAsync(string Comment);
// tag0009
         global::System.Threading.Tasks.Task DeclineAsync(string Comment);
// tag0009
         global::System.Threading.Tasks.Task TentativelyAcceptAsync(string Comment);
    }

    [Microsoft.Office365.OutlookServices.Extensions.LowerCaseProperty]
    public partial interface IEvent:  IItem
    {
        string Subject
        {
            get; set;
        }
        global::Microsoft.Office365.OutlookServices.ItemBody Body
        {
            get; set;
        }
        string BodyPreview
        {
            get; set;
        }
        global::Microsoft.Office365.OutlookServices.Importance Importance
        {
            get; set;
        }
        global::System.Nullable<bool> HasAttachments
        {
            get; set;
        }
        global::System.Nullable<global::System.DateTimeOffset> Start
        {
            get; set;
        }
        global::System.Nullable<global::System.DateTimeOffset> End
        {
            get; set;
        }
        global::Microsoft.Office365.OutlookServices.Location Location
        {
            get; set;
        }
        global::Microsoft.Office365.OutlookServices.FreeBusyStatus ShowAs
        {
            get; set;
        }
        global::System.Nullable<bool> IsAllDay
        {
            get; set;
        }
        global::System.Nullable<bool> IsCancelled
        {
            get; set;
        }
        global::System.Nullable<bool> IsOrganizer
        {
            get; set;
        }
        global::System.Nullable<bool> ResponseRequested
        {
            get; set;
        }
        global::Microsoft.Office365.OutlookServices.EventType Type
        {
            get; set;
        }
        string SeriesMasterId
        {
            get; set;
        }
        global::System.Collections.Generic.IList<global::Microsoft.Office365.OutlookServices.Attendee> Attendees
        {
            get; 
        }
        global::Microsoft.Office365.OutlookServices.PatternedRecurrence Recurrence
        {
            get; set;
        }
        global::Microsoft.Office365.OutlookServices.Recipient Organizer
        {
            get; set;
        }
        Microsoft.Office365.OutlookServices.Extensions.IPagedCollection<global::Microsoft.Office365.OutlookServices.IAttachment> Attachments
        {
            get; 
        }

        global::Microsoft.Office365.OutlookServices.ICalendar Calendar
        {
            get; set;
        }
        Microsoft.Office365.OutlookServices.Extensions.IPagedCollection<global::Microsoft.Office365.OutlookServices.IEvent> Instances
        {
            get; 
        }

// tag0009
         global::System.Threading.Tasks.Task AcceptAsync(string Comment);
// tag0009
         global::System.Threading.Tasks.Task DeclineAsync(string Comment);
// tag0009
         global::System.Threading.Tasks.Task TentativelyAcceptAsync(string Comment);
    }

    internal partial class EventFetcher : ItemFetcher , IEventFetcher
    {

        // tag0003
        public global::Microsoft.Office365.OutlookServices.IAttachmentCollection Attachments
        {
            get
            {
                if ((this._Attachments == null))
                {
                    this._Attachments = new global::Microsoft.Office365.OutlookServices.AttachmentCollection(
                        Context != null ? Context.CreateQuery<global::Microsoft.Office365.OutlookServices.Attachment>(GetPath("Attachments")) : null,
                        Context, 
                        this, 
                        GetPath("Attachments"));
                }

                return this._Attachments;
            }
        }

        private global::Microsoft.Office365.OutlookServices.IAttachmentCollection _Attachments;
        // tag 0004
        public global::Microsoft.Office365.OutlookServices.ICalendarFetcher Calendar
        {
            get
            {
                if ((this._Calendar == null))
                {
                    this._Calendar = new global::Microsoft.Office365.OutlookServices.CalendarFetcher();
                    this._Calendar.Initialize(this.Context, GetPath("Calendar"));

                }
                return this._Calendar;
            }
        }

        private global::Microsoft.Office365.OutlookServices.CalendarFetcher _Calendar;

        // tag0003
        public global::Microsoft.Office365.OutlookServices.IEventCollection Instances
        {
            get
            {
                if ((this._Instances == null))
                {
                    this._Instances = new global::Microsoft.Office365.OutlookServices.EventCollection(
                        Context != null ? Context.CreateQuery<global::Microsoft.Office365.OutlookServices.Event>(GetPath("Instances")) : null,
                        Context, 
                        this, 
                        GetPath("Instances"));
                }

                return this._Instances;
            }
        }

        private global::Microsoft.Office365.OutlookServices.IEventCollection _Instances;

        public new async global::System.Threading.Tasks.Task<IEvent> ExecuteAsync()
        {
            return await EnsureQuery().ExecuteSingleAsync();
        }
         
        public new IEventFetcher Expand<TTarget>(System.Linq.Expressions.Expression<global::System.Func<IEvent, TTarget>> navigationPropertyAccessor)
        {
            return new EventFetcher
            {
                _query = EnsureQuery().Expand(navigationPropertyAccessor)
            };
        }

        private IReadOnlyQueryableSet<IEvent> EnsureQuery()
        {
            if (this._query == null)
            {
                this._query = new global::Microsoft.Office365.OutlookServices.Extensions.ReadOnlyQueryableSet<IEvent>(Context.CreateQuery<Event>(GetPath(null)), Context);
            }

            return this._query;
        }

        private global::Microsoft.Office365.OutlookServices.Extensions.IReadOnlyQueryableSet<IEvent> _query;

        /// <summary>
        /// There are no comments for Accept in the schema.
        /// </summary>
        public async  global::System.Threading.Tasks.Task AcceptAsync(string Comment)
        {
            var myUri = GetUrl();
            if (myUri == null)
            {
                throw new global::System.Exception("cannot find entity");
            }

            global::System.Uri requestUri = new global::System.Uri(myUri.ToString().TrimEnd('/') + "/" + "Accept");
            await Context.ExecuteAsync(requestUri, "POST",
                new global::Microsoft.OData.Client.OperationParameter[] { new global::Microsoft.OData.Client.BodyOperationParameter("Comment", Comment) });
        }
        /// <summary>
        /// There are no comments for Decline in the schema.
        /// </summary>
        public async  global::System.Threading.Tasks.Task DeclineAsync(string Comment)
        {
            var myUri = GetUrl();
            if (myUri == null)
            {
                throw new global::System.Exception("cannot find entity");
            }

            global::System.Uri requestUri = new global::System.Uri(myUri.ToString().TrimEnd('/') + "/" + "Decline");
            await Context.ExecuteAsync(requestUri, "POST",
                new global::Microsoft.OData.Client.OperationParameter[] { new global::Microsoft.OData.Client.BodyOperationParameter("Comment", Comment) });
        }
        /// <summary>
        /// There are no comments for TentativelyAccept in the schema.
        /// </summary>
        public async  global::System.Threading.Tasks.Task TentativelyAcceptAsync(string Comment)
        {
            var myUri = GetUrl();
            if (myUri == null)
            {
                throw new global::System.Exception("cannot find entity");
            }

            global::System.Uri requestUri = new global::System.Uri(myUri.ToString().TrimEnd('/') + "/" + "TentativelyAccept");
            await Context.ExecuteAsync(requestUri, "POST",
                new global::Microsoft.OData.Client.OperationParameter[] { new global::Microsoft.OData.Client.BodyOperationParameter("Comment", Comment) });
        }
    }

    [global::Microsoft.OData.Client.Key("Id")]
    public partial class Event : Item , IEvent, IEventFetcher
    {
        public Event() : base() 
        {

        }
        // tag0002
        
        public string Subject
        {
            get
            {
                return this._Subject;
            }
            set
            {
                if (this._Subject != value)
                {
                    this._Subject = value;
                    OnPropertyChanged("Subject");
                }
            }
        }
        
        private string _Subject;


        // tag0002
        
        public global::Microsoft.Office365.OutlookServices.ItemBody Body
        {
            get
            {
                return this._Body;
            }
            set
            {
                if (this._Body != value)
                {
                    this._Body = value;
                    OnPropertyChanged("Body");
                }
            }
        }
        
        private global::Microsoft.Office365.OutlookServices.ItemBody _Body;


        // tag0002
        
        public string BodyPreview
        {
            get
            {
                return this._BodyPreview;
            }
            set
            {
                if (this._BodyPreview != value)
                {
                    this._BodyPreview = value;
                    OnPropertyChanged("BodyPreview");
                }
            }
        }
        
        private string _BodyPreview;


        // tag0002
        
        public global::Microsoft.Office365.OutlookServices.Importance Importance
        {
            get
            {
                return this._Importance;
            }
            set
            {
                if (this._Importance != value)
                {
                    this._Importance = value;
                    OnPropertyChanged("Importance");
                }
            }
        }
        
        private global::Microsoft.Office365.OutlookServices.Importance _Importance;


        // tag0002
        
        public global::System.Nullable<bool> HasAttachments
        {
            get
            {
                return this._HasAttachments;
            }
            set
            {
                if (this._HasAttachments != value)
                {
                    this._HasAttachments = value;
                    OnPropertyChanged("HasAttachments");
                }
            }
        }
        
        private global::System.Nullable<bool> _HasAttachments;


        // tag0002
        
        public global::System.Nullable<global::System.DateTimeOffset> Start
        {
            get
            {
                return this._Start;
            }
            set
            {
                if (this._Start != value)
                {
                    this._Start = value;
                    OnPropertyChanged("Start");
                }
            }
        }
        
        private global::System.Nullable<global::System.DateTimeOffset> _Start;


        // tag0002
        
        public global::System.Nullable<global::System.DateTimeOffset> End
        {
            get
            {
                return this._End;
            }
            set
            {
                if (this._End != value)
                {
                    this._End = value;
                    OnPropertyChanged("End");
                }
            }
        }
        
        private global::System.Nullable<global::System.DateTimeOffset> _End;


        // tag0002
        
        public global::Microsoft.Office365.OutlookServices.Location Location
        {
            get
            {
                return this._Location;
            }
            set
            {
                if (this._Location != value)
                {
                    this._Location = value;
                    OnPropertyChanged("Location");
                }
            }
        }
        
        private global::Microsoft.Office365.OutlookServices.Location _Location;


        // tag0002
        
        public global::Microsoft.Office365.OutlookServices.FreeBusyStatus ShowAs
        {
            get
            {
                return this._ShowAs;
            }
            set
            {
                if (this._ShowAs != value)
                {
                    this._ShowAs = value;
                    OnPropertyChanged("ShowAs");
                }
            }
        }
        
        private global::Microsoft.Office365.OutlookServices.FreeBusyStatus _ShowAs;


        // tag0002
        
        public global::System.Nullable<bool> IsAllDay
        {
            get
            {
                return this._IsAllDay;
            }
            set
            {
                if (this._IsAllDay != value)
                {
                    this._IsAllDay = value;
                    OnPropertyChanged("IsAllDay");
                }
            }
        }
        
        private global::System.Nullable<bool> _IsAllDay;


        // tag0002
        
        public global::System.Nullable<bool> IsCancelled
        {
            get
            {
                return this._IsCancelled;
            }
            set
            {
                if (this._IsCancelled != value)
                {
                    this._IsCancelled = value;
                    OnPropertyChanged("IsCancelled");
                }
            }
        }
        
        private global::System.Nullable<bool> _IsCancelled;


        // tag0002
        
        public global::System.Nullable<bool> IsOrganizer
        {
            get
            {
                return this._IsOrganizer;
            }
            set
            {
                if (this._IsOrganizer != value)
                {
                    this._IsOrganizer = value;
                    OnPropertyChanged("IsOrganizer");
                }
            }
        }
        
        private global::System.Nullable<bool> _IsOrganizer;


        // tag0002
        
        public global::System.Nullable<bool> ResponseRequested
        {
            get
            {
                return this._ResponseRequested;
            }
            set
            {
                if (this._ResponseRequested != value)
                {
                    this._ResponseRequested = value;
                    OnPropertyChanged("ResponseRequested");
                }
            }
        }
        
        private global::System.Nullable<bool> _ResponseRequested;


        // tag0002
        
        public global::Microsoft.Office365.OutlookServices.EventType Type
        {
            get
            {
                return this._Type;
            }
            set
            {
                if (this._Type != value)
                {
                    this._Type = value;
                    OnPropertyChanged("Type");
                }
            }
        }
        
        private global::Microsoft.Office365.OutlookServices.EventType _Type;


        // tag0002
        
        public string SeriesMasterId
        {
            get
            {
                return this._SeriesMasterId;
            }
            set
            {
                if (this._SeriesMasterId != value)
                {
                    this._SeriesMasterId = value;
                    OnPropertyChanged("SeriesMasterId");
                }
            }
        }
        
        private string _SeriesMasterId;


        // tag0002
        
        public global::System.Collections.Generic.IList<global::Microsoft.Office365.OutlookServices.Attendee> Attendees
        {
            get
            {
                if (this._Attendees == default(global::System.Collections.Generic.IList<global::Microsoft.Office365.OutlookServices.Attendee>))
                {
                    this._Attendees = new NonEntityTypeCollectionImpl<global::Microsoft.Office365.OutlookServices.Attendee>();
                    this._Attendees.SetContainer(() => GetContainingEntity("Attendees"));
                }

                return this._Attendees;
            }
            set
            {
                Attendees.Clear();
                if (value != null)
                {
                    foreach (var i in value) 
                    {
                        Attendees.Add(i);
                    }
                }
            }
        }
        
        private NonEntityTypeCollectionImpl<global::Microsoft.Office365.OutlookServices.Attendee> _Attendees;


        // tag0002
        
        public global::Microsoft.Office365.OutlookServices.PatternedRecurrence Recurrence
        {
            get
            {
                return this._Recurrence;
            }
            set
            {
                if (this._Recurrence != value)
                {
                    this._Recurrence = value;
                    OnPropertyChanged("Recurrence");
                }
            }
        }
        
        private global::Microsoft.Office365.OutlookServices.PatternedRecurrence _Recurrence;


        // tag0002
        
        public global::Microsoft.Office365.OutlookServices.Recipient Organizer
        {
            get
            {
                return this._Organizer;
            }
            set
            {
                if (this._Organizer != value)
                {
                    this._Organizer = value;
                    OnPropertyChanged("Organizer");
                }
            }
        }
        
        private global::Microsoft.Office365.OutlookServices.Recipient _Organizer;


        // tag 0014
        global::Microsoft.Office365.OutlookServices.IAttachmentCollection Microsoft.Office365.OutlookServices.IEventFetcher.Attachments
        {
            get
            {
                if (this._AttachmentsFetcher == null)
                {
                    this._AttachmentsFetcher = new global::Microsoft.Office365.OutlookServices.AttachmentCollection(
                        Context != null ? Context.CreateQuery<global::Microsoft.Office365.OutlookServices.Attachment>(GetPath("Attachments")) : null,
                        Context,
                        this,
                        GetPath("Attachments"));
                }

                return this._AttachmentsFetcher;
            }
        }
        private global::Microsoft.Office365.OutlookServices.IAttachmentCollection _AttachmentsFetcher;


        // tag0013
        public global::System.Collections.Generic.IList<global::Microsoft.Office365.OutlookServices.Attachment> Attachments
        {
            get
            {
                if (this._Attachments == null)
                {
                    this._Attachments = new EntityCollectionImpl<global::Microsoft.Office365.OutlookServices.Attachment>();
                    this._Attachments.SetContainer(() => GetContainingEntity("Attachments"));
                }

                return this._Attachments;
            }
            set
            {
                _Attachments.Clear();
                if (value != null)
                {
                    foreach (var i in value)
                    {
                        _Attachments.Add(i);
                    }
                }
            }
        }

        Microsoft.Office365.OutlookServices.Extensions.IPagedCollection<global::Microsoft.Office365.OutlookServices.IAttachment> Microsoft.Office365.OutlookServices.IEvent.Attachments
        {
            get
            {
                return new Microsoft.Office365.OutlookServices.Extensions.PagedCollection<global::Microsoft.Office365.OutlookServices.IAttachment, global::Microsoft.Office365.OutlookServices.Attachment>(Context, (EntityCollectionImpl<global::Microsoft.Office365.OutlookServices.Attachment>) Attachments);
            }
        }

        private EntityCollectionImpl<global::Microsoft.Office365.OutlookServices.Attachment> _Attachments;
        // tag 0012
        global::Microsoft.Office365.OutlookServices.ICalendar Microsoft.Office365.OutlookServices.IEvent.Calendar
        {
            get
            {
                return this.Calendar;
            }
            set
            {
                if (this.Calendar != value)
                {
                    this.Calendar = (global::Microsoft.Office365.OutlookServices.Calendar)value;
                }
            }
        }

        global::Microsoft.Office365.OutlookServices.ICalendarFetcher Microsoft.Office365.OutlookServices.IEventFetcher.Calendar
        {
            get
            {
                var retVal = new global::Microsoft.Office365.OutlookServices.CalendarFetcher();
                retVal.Initialize(this.Context, GetPath("Calendar"));
                return retVal;
            }
        }

        // tag0015
        public global::Microsoft.Office365.OutlookServices.Calendar Calendar
        {
            get
            {
                return this._Calendar;
            }
            set
            {
                if (this._Calendar != value)
                {
                    this._Calendar = value;
                    if (Context != null && Context.GetEntityDescriptor(this) != null && (value == null || Context.GetEntityDescriptor(value) != null))
                    {
                        Context.SetLink(this, "Calendar", value);
                    }
                }
            }
        }

        private global::Microsoft.Office365.OutlookServices.Calendar _Calendar;
        // tag 0014
        global::Microsoft.Office365.OutlookServices.IEventCollection Microsoft.Office365.OutlookServices.IEventFetcher.Instances
        {
            get
            {
                if (this._InstancesFetcher == null)
                {
                    this._InstancesFetcher = new global::Microsoft.Office365.OutlookServices.EventCollection(
                        Context != null ? Context.CreateQuery<global::Microsoft.Office365.OutlookServices.Event>(GetPath("Instances")) : null,
                        Context,
                        this,
                        GetPath("Instances"));
                }

                return this._InstancesFetcher;
            }
        }
        private global::Microsoft.Office365.OutlookServices.IEventCollection _InstancesFetcher;


        // tag0013
        public global::System.Collections.Generic.IList<global::Microsoft.Office365.OutlookServices.Event> Instances
        {
            get
            {
                if (this._Instances == null)
                {
                    this._Instances = new EntityCollectionImpl<global::Microsoft.Office365.OutlookServices.Event>();
                    this._Instances.SetContainer(() => GetContainingEntity("Instances"));
                }

                return this._Instances;
            }
            set
            {
                _Instances.Clear();
                if (value != null)
                {
                    foreach (var i in value)
                    {
                        _Instances.Add(i);
                    }
                }
            }
        }

        Microsoft.Office365.OutlookServices.Extensions.IPagedCollection<global::Microsoft.Office365.OutlookServices.IEvent> Microsoft.Office365.OutlookServices.IEvent.Instances
        {
            get
            {
                return new Microsoft.Office365.OutlookServices.Extensions.PagedCollection<global::Microsoft.Office365.OutlookServices.IEvent, global::Microsoft.Office365.OutlookServices.Event>(Context, (EntityCollectionImpl<global::Microsoft.Office365.OutlookServices.Event>) Instances);
            }
        }

        private EntityCollectionImpl<global::Microsoft.Office365.OutlookServices.Event> _Instances;
        /// <summary>
        /// There are no comments for Accept in the schema.
        /// </summary>
        public async  global::System.Threading.Tasks.Task AcceptAsync(string Comment)
        {
            var myUri = GetUrl();
            if (myUri == null)
            {
                throw new global::System.Exception("cannot find entity");
            }

            global::System.Uri requestUri = new global::System.Uri(myUri.ToString().TrimEnd('/') + "/" + "Accept");
            await Context.ExecuteAsync(requestUri, "POST",
                new global::Microsoft.OData.Client.OperationParameter[] { new global::Microsoft.OData.Client.BodyOperationParameter("Comment", Comment) });
        }
        /// <summary>
        /// There are no comments for Decline in the schema.
        /// </summary>
        public async  global::System.Threading.Tasks.Task DeclineAsync(string Comment)
        {
            var myUri = GetUrl();
            if (myUri == null)
            {
                throw new global::System.Exception("cannot find entity");
            }

            global::System.Uri requestUri = new global::System.Uri(myUri.ToString().TrimEnd('/') + "/" + "Decline");
            await Context.ExecuteAsync(requestUri, "POST",
                new global::Microsoft.OData.Client.OperationParameter[] { new global::Microsoft.OData.Client.BodyOperationParameter("Comment", Comment) });
        }
        /// <summary>
        /// There are no comments for TentativelyAccept in the schema.
        /// </summary>
        public async  global::System.Threading.Tasks.Task TentativelyAcceptAsync(string Comment)
        {
            var myUri = GetUrl();
            if (myUri == null)
            {
                throw new global::System.Exception("cannot find entity");
            }

            global::System.Uri requestUri = new global::System.Uri(myUri.ToString().TrimEnd('/') + "/" + "TentativelyAccept");
            await Context.ExecuteAsync(requestUri, "POST",
                new global::Microsoft.OData.Client.OperationParameter[] { new global::Microsoft.OData.Client.BodyOperationParameter("Comment", Comment) });
        }

        global::System.Threading.Tasks.Task<IEvent> IEventFetcher.ExecuteAsync()
        {
            var tsc = new global::System.Threading.Tasks.TaskCompletionSource<IEvent> ();
            tsc.SetResult(this);
            return tsc.Task;
        }

        IEventFetcher IEventFetcher.Expand<TTarget>(System.Linq.Expressions.Expression<global::System.Func<IEvent, TTarget>> navigationPropertyAccessor)
        {
            return this;
        }
    }

    [Microsoft.Office365.OutlookServices.Extensions.LowerCaseProperty]
    public partial interface IContactFetcher : IItemFetcher
    {
   
        new global::System.Threading.Tasks.Task<IContact> ExecuteAsync();

        new IContactFetcher Expand<TTarget>(System.Linq.Expressions.Expression<global::System.Func<IContact, TTarget>> navigationPropertyAccessor);

    }

    [Microsoft.Office365.OutlookServices.Extensions.LowerCaseProperty]
    public partial interface IContact:  IItem
    {
        string ParentFolderId
        {
            get; set;
        }
        global::System.Nullable<global::System.DateTimeOffset> Birthday
        {
            get; set;
        }
        string FileAs
        {
            get; set;
        }
        string DisplayName
        {
            get; set;
        }
        string GivenName
        {
            get; set;
        }
        string Initials
        {
            get; set;
        }
        string MiddleName
        {
            get; set;
        }
        string NickName
        {
            get; set;
        }
        string Surname
        {
            get; set;
        }
        string Title
        {
            get; set;
        }
        string Generation
        {
            get; set;
        }
        global::System.Collections.Generic.IList<global::Microsoft.Office365.OutlookServices.EmailAddress> EmailAddresses
        {
            get; 
        }
        global::System.Collections.Generic.IList<string> ImAddresses
        {
            get; 
        }
        string JobTitle
        {
            get; set;
        }
        string CompanyName
        {
            get; set;
        }
        string Department
        {
            get; set;
        }
        string OfficeLocation
        {
            get; set;
        }
        string Profession
        {
            get; set;
        }
        string BusinessHomePage
        {
            get; set;
        }
        string AssistantName
        {
            get; set;
        }
        string Manager
        {
            get; set;
        }
        global::System.Collections.Generic.IList<string> HomePhones
        {
            get; 
        }
        global::System.Collections.Generic.IList<string> BusinessPhones
        {
            get; 
        }
        string MobilePhone1
        {
            get; set;
        }
        global::Microsoft.Office365.OutlookServices.PhysicalAddress HomeAddress
        {
            get; set;
        }
        global::Microsoft.Office365.OutlookServices.PhysicalAddress BusinessAddress
        {
            get; set;
        }
        global::Microsoft.Office365.OutlookServices.PhysicalAddress OtherAddress
        {
            get; set;
        }
        string YomiCompanyName
        {
            get; set;
        }
        string YomiGivenName
        {
            get; set;
        }
        string YomiSurname
        {
            get; set;
        }
    }

    internal partial class ContactFetcher : ItemFetcher , IContactFetcher
    {

        public new async global::System.Threading.Tasks.Task<IContact> ExecuteAsync()
        {
            return await EnsureQuery().ExecuteSingleAsync();
        }
         
        public new IContactFetcher Expand<TTarget>(System.Linq.Expressions.Expression<global::System.Func<IContact, TTarget>> navigationPropertyAccessor)
        {
            return new ContactFetcher
            {
                _query = EnsureQuery().Expand(navigationPropertyAccessor)
            };
        }

        private IReadOnlyQueryableSet<IContact> EnsureQuery()
        {
            if (this._query == null)
            {
                this._query = new global::Microsoft.Office365.OutlookServices.Extensions.ReadOnlyQueryableSet<IContact>(Context.CreateQuery<Contact>(GetPath(null)), Context);
            }

            return this._query;
        }

        private global::Microsoft.Office365.OutlookServices.Extensions.IReadOnlyQueryableSet<IContact> _query;

    }

    [global::Microsoft.OData.Client.Key("Id")]
    public partial class Contact : Item , IContact, IContactFetcher
    {
        public Contact() : base() 
        {

        }
        // tag0002
        
        public string ParentFolderId
        {
            get
            {
                return this._ParentFolderId;
            }
            set
            {
                if (this._ParentFolderId != value)
                {
                    this._ParentFolderId = value;
                    OnPropertyChanged("ParentFolderId");
                }
            }
        }
        
        private string _ParentFolderId;


        // tag0002
        
        public global::System.Nullable<global::System.DateTimeOffset> Birthday
        {
            get
            {
                return this._Birthday;
            }
            set
            {
                if (this._Birthday != value)
                {
                    this._Birthday = value;
                    OnPropertyChanged("Birthday");
                }
            }
        }
        
        private global::System.Nullable<global::System.DateTimeOffset> _Birthday;


        // tag0002
        
        public string FileAs
        {
            get
            {
                return this._FileAs;
            }
            set
            {
                if (this._FileAs != value)
                {
                    this._FileAs = value;
                    OnPropertyChanged("FileAs");
                }
            }
        }
        
        private string _FileAs;


        // tag0002
        
        public string DisplayName
        {
            get
            {
                return this._DisplayName;
            }
            set
            {
                if (this._DisplayName != value)
                {
                    this._DisplayName = value;
                    OnPropertyChanged("DisplayName");
                }
            }
        }
        
        private string _DisplayName;


        // tag0002
        
        public string GivenName
        {
            get
            {
                return this._GivenName;
            }
            set
            {
                if (this._GivenName != value)
                {
                    this._GivenName = value;
                    OnPropertyChanged("GivenName");
                }
            }
        }
        
        private string _GivenName;


        // tag0002
        
        public string Initials
        {
            get
            {
                return this._Initials;
            }
            set
            {
                if (this._Initials != value)
                {
                    this._Initials = value;
                    OnPropertyChanged("Initials");
                }
            }
        }
        
        private string _Initials;


        // tag0002
        
        public string MiddleName
        {
            get
            {
                return this._MiddleName;
            }
            set
            {
                if (this._MiddleName != value)
                {
                    this._MiddleName = value;
                    OnPropertyChanged("MiddleName");
                }
            }
        }
        
        private string _MiddleName;


        // tag0002
        
        public string NickName
        {
            get
            {
                return this._NickName;
            }
            set
            {
                if (this._NickName != value)
                {
                    this._NickName = value;
                    OnPropertyChanged("NickName");
                }
            }
        }
        
        private string _NickName;


        // tag0002
        
        public string Surname
        {
            get
            {
                return this._Surname;
            }
            set
            {
                if (this._Surname != value)
                {
                    this._Surname = value;
                    OnPropertyChanged("Surname");
                }
            }
        }
        
        private string _Surname;


        // tag0002
        
        public string Title
        {
            get
            {
                return this._Title;
            }
            set
            {
                if (this._Title != value)
                {
                    this._Title = value;
                    OnPropertyChanged("Title");
                }
            }
        }
        
        private string _Title;


        // tag0002
        
        public string Generation
        {
            get
            {
                return this._Generation;
            }
            set
            {
                if (this._Generation != value)
                {
                    this._Generation = value;
                    OnPropertyChanged("Generation");
                }
            }
        }
        
        private string _Generation;


        // tag0002
        
        public global::System.Collections.Generic.IList<global::Microsoft.Office365.OutlookServices.EmailAddress> EmailAddresses
        {
            get
            {
                if (this._EmailAddresses == default(global::System.Collections.Generic.IList<global::Microsoft.Office365.OutlookServices.EmailAddress>))
                {
                    this._EmailAddresses = new NonEntityTypeCollectionImpl<global::Microsoft.Office365.OutlookServices.EmailAddress>();
                    this._EmailAddresses.SetContainer(() => GetContainingEntity("EmailAddresses"));
                }

                return this._EmailAddresses;
            }
            set
            {
                EmailAddresses.Clear();
                if (value != null)
                {
                    foreach (var i in value) 
                    {
                        EmailAddresses.Add(i);
                    }
                }
            }
        }
        
        private NonEntityTypeCollectionImpl<global::Microsoft.Office365.OutlookServices.EmailAddress> _EmailAddresses;


        // tag0002
        
        public global::System.Collections.Generic.IList<string> ImAddresses
        {
            get
            {
                if (this._ImAddresses == default(global::System.Collections.Generic.IList<string>))
                {
                    this._ImAddresses = new NonEntityTypeCollectionImpl<string>();
                    this._ImAddresses.SetContainer(() => GetContainingEntity("ImAddresses"));
                }

                return this._ImAddresses;
            }
            set
            {
                ImAddresses.Clear();
                if (value != null)
                {
                    foreach (var i in value) 
                    {
                        ImAddresses.Add(i);
                    }
                }
            }
        }
        
        private NonEntityTypeCollectionImpl<string> _ImAddresses;


        // tag0002
        
        public string JobTitle
        {
            get
            {
                return this._JobTitle;
            }
            set
            {
                if (this._JobTitle != value)
                {
                    this._JobTitle = value;
                    OnPropertyChanged("JobTitle");
                }
            }
        }
        
        private string _JobTitle;


        // tag0002
        
        public string CompanyName
        {
            get
            {
                return this._CompanyName;
            }
            set
            {
                if (this._CompanyName != value)
                {
                    this._CompanyName = value;
                    OnPropertyChanged("CompanyName");
                }
            }
        }
        
        private string _CompanyName;


        // tag0002
        
        public string Department
        {
            get
            {
                return this._Department;
            }
            set
            {
                if (this._Department != value)
                {
                    this._Department = value;
                    OnPropertyChanged("Department");
                }
            }
        }
        
        private string _Department;


        // tag0002
        
        public string OfficeLocation
        {
            get
            {
                return this._OfficeLocation;
            }
            set
            {
                if (this._OfficeLocation != value)
                {
                    this._OfficeLocation = value;
                    OnPropertyChanged("OfficeLocation");
                }
            }
        }
        
        private string _OfficeLocation;


        // tag0002
        
        public string Profession
        {
            get
            {
                return this._Profession;
            }
            set
            {
                if (this._Profession != value)
                {
                    this._Profession = value;
                    OnPropertyChanged("Profession");
                }
            }
        }
        
        private string _Profession;


        // tag0002
        
        public string BusinessHomePage
        {
            get
            {
                return this._BusinessHomePage;
            }
            set
            {
                if (this._BusinessHomePage != value)
                {
                    this._BusinessHomePage = value;
                    OnPropertyChanged("BusinessHomePage");
                }
            }
        }
        
        private string _BusinessHomePage;


        // tag0002
        
        public string AssistantName
        {
            get
            {
                return this._AssistantName;
            }
            set
            {
                if (this._AssistantName != value)
                {
                    this._AssistantName = value;
                    OnPropertyChanged("AssistantName");
                }
            }
        }
        
        private string _AssistantName;


        // tag0002
        
        public string Manager
        {
            get
            {
                return this._Manager;
            }
            set
            {
                if (this._Manager != value)
                {
                    this._Manager = value;
                    OnPropertyChanged("Manager");
                }
            }
        }
        
        private string _Manager;


        // tag0002
        
        public global::System.Collections.Generic.IList<string> HomePhones
        {
            get
            {
                if (this._HomePhones == default(global::System.Collections.Generic.IList<string>))
                {
                    this._HomePhones = new NonEntityTypeCollectionImpl<string>();
                    this._HomePhones.SetContainer(() => GetContainingEntity("HomePhones"));
                }

                return this._HomePhones;
            }
            set
            {
                HomePhones.Clear();
                if (value != null)
                {
                    foreach (var i in value) 
                    {
                        HomePhones.Add(i);
                    }
                }
            }
        }
        
        private NonEntityTypeCollectionImpl<string> _HomePhones;


        // tag0002
        
        public global::System.Collections.Generic.IList<string> BusinessPhones
        {
            get
            {
                if (this._BusinessPhones == default(global::System.Collections.Generic.IList<string>))
                {
                    this._BusinessPhones = new NonEntityTypeCollectionImpl<string>();
                    this._BusinessPhones.SetContainer(() => GetContainingEntity("BusinessPhones"));
                }

                return this._BusinessPhones;
            }
            set
            {
                BusinessPhones.Clear();
                if (value != null)
                {
                    foreach (var i in value) 
                    {
                        BusinessPhones.Add(i);
                    }
                }
            }
        }
        
        private NonEntityTypeCollectionImpl<string> _BusinessPhones;


        // tag0002
        
        public string MobilePhone1
        {
            get
            {
                return this._MobilePhone1;
            }
            set
            {
                if (this._MobilePhone1 != value)
                {
                    this._MobilePhone1 = value;
                    OnPropertyChanged("MobilePhone1");
                }
            }
        }
        
        private string _MobilePhone1;


        // tag0002
        
        public global::Microsoft.Office365.OutlookServices.PhysicalAddress HomeAddress
        {
            get
            {
                return this._HomeAddress;
            }
            set
            {
                if (this._HomeAddress != value)
                {
                    this._HomeAddress = value;
                    OnPropertyChanged("HomeAddress");
                }
            }
        }
        
        private global::Microsoft.Office365.OutlookServices.PhysicalAddress _HomeAddress;


        // tag0002
        
        public global::Microsoft.Office365.OutlookServices.PhysicalAddress BusinessAddress
        {
            get
            {
                return this._BusinessAddress;
            }
            set
            {
                if (this._BusinessAddress != value)
                {
                    this._BusinessAddress = value;
                    OnPropertyChanged("BusinessAddress");
                }
            }
        }
        
        private global::Microsoft.Office365.OutlookServices.PhysicalAddress _BusinessAddress;


        // tag0002
        
        public global::Microsoft.Office365.OutlookServices.PhysicalAddress OtherAddress
        {
            get
            {
                return this._OtherAddress;
            }
            set
            {
                if (this._OtherAddress != value)
                {
                    this._OtherAddress = value;
                    OnPropertyChanged("OtherAddress");
                }
            }
        }
        
        private global::Microsoft.Office365.OutlookServices.PhysicalAddress _OtherAddress;


        // tag0002
        
        public string YomiCompanyName
        {
            get
            {
                return this._YomiCompanyName;
            }
            set
            {
                if (this._YomiCompanyName != value)
                {
                    this._YomiCompanyName = value;
                    OnPropertyChanged("YomiCompanyName");
                }
            }
        }
        
        private string _YomiCompanyName;


        // tag0002
        
        public string YomiGivenName
        {
            get
            {
                return this._YomiGivenName;
            }
            set
            {
                if (this._YomiGivenName != value)
                {
                    this._YomiGivenName = value;
                    OnPropertyChanged("YomiGivenName");
                }
            }
        }
        
        private string _YomiGivenName;


        // tag0002
        
        public string YomiSurname
        {
            get
            {
                return this._YomiSurname;
            }
            set
            {
                if (this._YomiSurname != value)
                {
                    this._YomiSurname = value;
                    OnPropertyChanged("YomiSurname");
                }
            }
        }
        
        private string _YomiSurname;



        global::System.Threading.Tasks.Task<IContact> IContactFetcher.ExecuteAsync()
        {
            var tsc = new global::System.Threading.Tasks.TaskCompletionSource<IContact> ();
            tsc.SetResult(this);
            return tsc.Task;
        }

        IContactFetcher IContactFetcher.Expand<TTarget>(System.Linq.Expressions.Expression<global::System.Func<IContact, TTarget>> navigationPropertyAccessor)
        {
            return this;
        }
    }

    [Microsoft.Office365.OutlookServices.Extensions.LowerCaseProperty]
    public partial interface IContactFolderFetcher : IEntityFetcher
    {
   
        new global::System.Threading.Tasks.Task<IContactFolder> ExecuteAsync();

        new IContactFolderFetcher Expand<TTarget>(System.Linq.Expressions.Expression<global::System.Func<IContactFolder, TTarget>> navigationPropertyAccessor);

        global::Microsoft.Office365.OutlookServices.IContactCollection Contacts
        {
            get; 
        }

        global::Microsoft.Office365.OutlookServices.IContactFolderCollection ChildFolders
        {
            get; 
        }

    }

    [Microsoft.Office365.OutlookServices.Extensions.LowerCaseProperty]
    public partial interface IContactFolder:  IEntity
    {
        string ParentFolderId
        {
            get; set;
        }
        string DisplayName
        {
            get; set;
        }
        Microsoft.Office365.OutlookServices.Extensions.IPagedCollection<global::Microsoft.Office365.OutlookServices.IContact> Contacts
        {
            get; 
        }

        Microsoft.Office365.OutlookServices.Extensions.IPagedCollection<global::Microsoft.Office365.OutlookServices.IContactFolder> ChildFolders
        {
            get; 
        }

    }

    internal partial class ContactFolderFetcher : EntityFetcher , IContactFolderFetcher
    {

        // tag0003
        public global::Microsoft.Office365.OutlookServices.IContactCollection Contacts
        {
            get
            {
                if ((this._Contacts == null))
                {
                    this._Contacts = new global::Microsoft.Office365.OutlookServices.ContactCollection(
                        Context != null ? Context.CreateQuery<global::Microsoft.Office365.OutlookServices.Contact>(GetPath("Contacts")) : null,
                        Context, 
                        this, 
                        GetPath("Contacts"));
                }

                return this._Contacts;
            }
        }

        private global::Microsoft.Office365.OutlookServices.IContactCollection _Contacts;

        // tag0003
        public global::Microsoft.Office365.OutlookServices.IContactFolderCollection ChildFolders
        {
            get
            {
                if ((this._ChildFolders == null))
                {
                    this._ChildFolders = new global::Microsoft.Office365.OutlookServices.ContactFolderCollection(
                        Context != null ? Context.CreateQuery<global::Microsoft.Office365.OutlookServices.ContactFolder>(GetPath("ChildFolders")) : null,
                        Context, 
                        this, 
                        GetPath("ChildFolders"));
                }

                return this._ChildFolders;
            }
        }

        private global::Microsoft.Office365.OutlookServices.IContactFolderCollection _ChildFolders;

        public new async global::System.Threading.Tasks.Task<IContactFolder> ExecuteAsync()
        {
            return await EnsureQuery().ExecuteSingleAsync();
        }
         
        public new IContactFolderFetcher Expand<TTarget>(System.Linq.Expressions.Expression<global::System.Func<IContactFolder, TTarget>> navigationPropertyAccessor)
        {
            return new ContactFolderFetcher
            {
                _query = EnsureQuery().Expand(navigationPropertyAccessor)
            };
        }

        private IReadOnlyQueryableSet<IContactFolder> EnsureQuery()
        {
            if (this._query == null)
            {
                this._query = new global::Microsoft.Office365.OutlookServices.Extensions.ReadOnlyQueryableSet<IContactFolder>(Context.CreateQuery<ContactFolder>(GetPath(null)), Context);
            }

            return this._query;
        }

        private global::Microsoft.Office365.OutlookServices.Extensions.IReadOnlyQueryableSet<IContactFolder> _query;

    }

    [global::Microsoft.OData.Client.Key("Id")]
    public partial class ContactFolder : Entity , IContactFolder, IContactFolderFetcher
    {
        public ContactFolder() : base() 
        {

        }
        // tag0002
        
        public string ParentFolderId
        {
            get
            {
                return this._ParentFolderId;
            }
            set
            {
                if (this._ParentFolderId != value)
                {
                    this._ParentFolderId = value;
                    OnPropertyChanged("ParentFolderId");
                }
            }
        }
        
        private string _ParentFolderId;


        // tag0002
        
        public string DisplayName
        {
            get
            {
                return this._DisplayName;
            }
            set
            {
                if (this._DisplayName != value)
                {
                    this._DisplayName = value;
                    OnPropertyChanged("DisplayName");
                }
            }
        }
        
        private string _DisplayName;


        // tag 0014
        global::Microsoft.Office365.OutlookServices.IContactCollection Microsoft.Office365.OutlookServices.IContactFolderFetcher.Contacts
        {
            get
            {
                if (this._ContactsFetcher == null)
                {
                    this._ContactsFetcher = new global::Microsoft.Office365.OutlookServices.ContactCollection(
                        Context != null ? Context.CreateQuery<global::Microsoft.Office365.OutlookServices.Contact>(GetPath("Contacts")) : null,
                        Context,
                        this,
                        GetPath("Contacts"));
                }

                return this._ContactsFetcher;
            }
        }
        private global::Microsoft.Office365.OutlookServices.IContactCollection _ContactsFetcher;


        // tag0013
        public global::System.Collections.Generic.IList<global::Microsoft.Office365.OutlookServices.Contact> Contacts
        {
            get
            {
                if (this._Contacts == null)
                {
                    this._Contacts = new EntityCollectionImpl<global::Microsoft.Office365.OutlookServices.Contact>();
                    this._Contacts.SetContainer(() => GetContainingEntity("Contacts"));
                }

                return this._Contacts;
            }
            set
            {
                _Contacts.Clear();
                if (value != null)
                {
                    foreach (var i in value)
                    {
                        _Contacts.Add(i);
                    }
                }
            }
        }

        Microsoft.Office365.OutlookServices.Extensions.IPagedCollection<global::Microsoft.Office365.OutlookServices.IContact> Microsoft.Office365.OutlookServices.IContactFolder.Contacts
        {
            get
            {
                return new Microsoft.Office365.OutlookServices.Extensions.PagedCollection<global::Microsoft.Office365.OutlookServices.IContact, global::Microsoft.Office365.OutlookServices.Contact>(Context, (EntityCollectionImpl<global::Microsoft.Office365.OutlookServices.Contact>) Contacts);
            }
        }

        private EntityCollectionImpl<global::Microsoft.Office365.OutlookServices.Contact> _Contacts;
        // tag 0014
        global::Microsoft.Office365.OutlookServices.IContactFolderCollection Microsoft.Office365.OutlookServices.IContactFolderFetcher.ChildFolders
        {
            get
            {
                if (this._ChildFoldersFetcher == null)
                {
                    this._ChildFoldersFetcher = new global::Microsoft.Office365.OutlookServices.ContactFolderCollection(
                        Context != null ? Context.CreateQuery<global::Microsoft.Office365.OutlookServices.ContactFolder>(GetPath("ChildFolders")) : null,
                        Context,
                        this,
                        GetPath("ChildFolders"));
                }

                return this._ChildFoldersFetcher;
            }
        }
        private global::Microsoft.Office365.OutlookServices.IContactFolderCollection _ChildFoldersFetcher;


        // tag0013
        public global::System.Collections.Generic.IList<global::Microsoft.Office365.OutlookServices.ContactFolder> ChildFolders
        {
            get
            {
                if (this._ChildFolders == null)
                {
                    this._ChildFolders = new EntityCollectionImpl<global::Microsoft.Office365.OutlookServices.ContactFolder>();
                    this._ChildFolders.SetContainer(() => GetContainingEntity("ChildFolders"));
                }

                return this._ChildFolders;
            }
            set
            {
                _ChildFolders.Clear();
                if (value != null)
                {
                    foreach (var i in value)
                    {
                        _ChildFolders.Add(i);
                    }
                }
            }
        }

        Microsoft.Office365.OutlookServices.Extensions.IPagedCollection<global::Microsoft.Office365.OutlookServices.IContactFolder> Microsoft.Office365.OutlookServices.IContactFolder.ChildFolders
        {
            get
            {
                return new Microsoft.Office365.OutlookServices.Extensions.PagedCollection<global::Microsoft.Office365.OutlookServices.IContactFolder, global::Microsoft.Office365.OutlookServices.ContactFolder>(Context, (EntityCollectionImpl<global::Microsoft.Office365.OutlookServices.ContactFolder>) ChildFolders);
            }
        }

        private EntityCollectionImpl<global::Microsoft.Office365.OutlookServices.ContactFolder> _ChildFolders;

        global::System.Threading.Tasks.Task<IContactFolder> IContactFolderFetcher.ExecuteAsync()
        {
            var tsc = new global::System.Threading.Tasks.TaskCompletionSource<IContactFolder> ();
            tsc.SetResult(this);
            return tsc.Task;
        }

        IContactFolderFetcher IContactFolderFetcher.Expand<TTarget>(System.Linq.Expressions.Expression<global::System.Func<IContactFolder, TTarget>> navigationPropertyAccessor)
        {
            return this;
        }
    }

    /// <summary>
    /// There are no comments for DayOfWeek in the schema.
    /// </summary>
    public enum DayOfWeek
    {
        Sunday = 0,
        Monday = 1,
        Tuesday = 2,
        Wednesday = 3,
        Thursday = 4,
        Friday = 5,
        Saturday = 6
    }
    /// <summary>
    /// There are no comments for BodyType in the schema.
    /// </summary>
    public enum BodyType
    {
        Text = 0,
        HTML = 1
    }
    /// <summary>
    /// There are no comments for Importance in the schema.
    /// </summary>
    public enum Importance
    {
        Low = 0,
        Normal = 1,
        High = 2
    }
    /// <summary>
    /// There are no comments for AttendeeType in the schema.
    /// </summary>
    public enum AttendeeType
    {
        Required = 0,
        Optional = 1,
        Resource = 2
    }
    /// <summary>
    /// There are no comments for ResponseType in the schema.
    /// </summary>
    public enum ResponseType
    {
        None = 0,
        Organizer = 1,
        TentativelyAccepted = 2,
        Accepted = 3,
        Declined = 4,
        NotResponded = 5
    }
    /// <summary>
    /// There are no comments for EventType in the schema.
    /// </summary>
    public enum EventType
    {
        SingleInstance = 0,
        Occurrence = 1,
        Exception = 2,
        SeriesMaster = 3
    }
    /// <summary>
    /// There are no comments for FreeBusyStatus in the schema.
    /// </summary>
    public enum FreeBusyStatus
    {
        Free = 0,
        Tentative = 1,
        Busy = 2,
        Oof = 3,
        WorkingElsewhere = 4,
        Unknown = -1
    }
    /// <summary>
    /// There are no comments for MeetingMessageType in the schema.
    /// </summary>
    public enum MeetingMessageType
    {
        None = 0,
        MeetingRequest = 1,
        MeetingCancelled = 2,
        MeetingAccepted = 3,
        MeetingTenativelyAccepted = 4,
        MeetingDeclined = 5
    }
    /// <summary>
    /// There are no comments for RecurrencePatternType in the schema.
    /// </summary>
    public enum RecurrencePatternType
    {
        Daily = 0,
        Weekly = 1,
        AbsoluteMonthly = 2,
        RelativeMonthly = 3,
        AbsoluteYearly = 4,
        RelativeYearly = 5
    }
    /// <summary>
    /// There are no comments for RecurrenceRangeType in the schema.
    /// </summary>
    public enum RecurrenceRangeType
    {
        EndDate = 0,
        NoEnd = 1,
        Numbered = 2
    }
    /// <summary>
    /// There are no comments for WeekIndex in the schema.
    /// </summary>
    public enum WeekIndex
    {
        First = 0,
        Second = 1,
        Third = 2,
        Fourth = 3,
        Last = 4
    }
    internal partial class UserCollection: Microsoft.Office365.OutlookServices.Extensions.QueryableSet<IUser> , IUserCollection
    {
        internal UserCollection(
            global::Microsoft.OData.Client.DataServiceQuery inner,
            Microsoft.Office365.OutlookServices.Extensions.DataServiceContextWrapper context,
            object entity,
            string path)
            : base(inner, context, entity as EntityBase, path)
        {
        }

        public IUserFetcher GetById (string id)
        {
            return this[id];
        }

        public IUserFetcher this[string id]
        {
            get
            {
                var query = (global::Microsoft.OData.Client.DataServiceQuery) System.Linq.Queryable.Where(Context.CreateQuery<User>(this._path), (i) => i.Id == id);
                var fetcher = new UserFetcher();
                var path = query.RequestUri.ToString().Substring(Context.BaseUri.ToString().TrimEnd('/').Length + 1);
                fetcher.Initialize(Context, path);

                return fetcher;
            }
        }

        public global::System.Threading.Tasks.Task<IPagedCollection<IUser>> ExecuteAsync()
        {
            return base.ExecuteAsyncInternal();
        }

        public global::System.Threading.Tasks.Task AddUserAsync(IUser item, bool dontSave = false)
        {
            if (_entity == null)
            {
                Context.AddObject(_path, item);
            }
            else
            {
                var lastSlash = _path.LastIndexOf('/');
                var shortPath = (lastSlash >= 0 && lastSlash < _path.Length - 1) ? _path.Substring(lastSlash + 1) : _path;
                Context.AddRelatedObject(_entity, shortPath, item);
            }

            if (!dontSave)
            {
                return Context.SaveChangesAsync();
            }
            else
            {
                var retVal = new global::System.Threading.Tasks.TaskCompletionSource<object>();
                retVal.SetResult(null);
                return retVal.Task;
            }
        }

    }

    [Microsoft.Office365.OutlookServices.Extensions.LowerCaseProperty]
    public partial interface IUserCollection: IReadOnlyQueryableSetBase<IUser>
    {
        IUserFetcher GetById (string id);

        IUserFetcher this[string id]
        {
            get;
        }

        global::System.Threading.Tasks.Task<IPagedCollection<IUser>> ExecuteAsync();

		/// <param name="dontSave">true to delay saving until batch is saved; false to save immediately.</param>
        global::System.Threading.Tasks.Task AddUserAsync(IUser item, bool dontSave = false);
    }

    internal partial class FolderCollection: Microsoft.Office365.OutlookServices.Extensions.QueryableSet<IFolder> , IFolderCollection
    {
        internal FolderCollection(
            global::Microsoft.OData.Client.DataServiceQuery inner,
            Microsoft.Office365.OutlookServices.Extensions.DataServiceContextWrapper context,
            object entity,
            string path)
            : base(inner, context, entity as EntityBase, path)
        {
        }

        public IFolderFetcher GetById (string id)
        {
            return this[id];
        }

        public IFolderFetcher this[string id]
        {
            get
            {
                var query = (global::Microsoft.OData.Client.DataServiceQuery) System.Linq.Queryable.Where(Context.CreateQuery<Folder>(this._path), (i) => i.Id == id);
                var fetcher = new FolderFetcher();
                var path = query.RequestUri.ToString().Substring(Context.BaseUri.ToString().TrimEnd('/').Length + 1);
                fetcher.Initialize(Context, path);

                return fetcher;
            }
        }

        public global::System.Threading.Tasks.Task<IPagedCollection<IFolder>> ExecuteAsync()
        {
            return base.ExecuteAsyncInternal();
        }

        public global::System.Threading.Tasks.Task AddFolderAsync(IFolder item, bool dontSave = false)
        {
            if (_entity == null)
            {
                Context.AddObject(_path, item);
            }
            else
            {
                var lastSlash = _path.LastIndexOf('/');
                var shortPath = (lastSlash >= 0 && lastSlash < _path.Length - 1) ? _path.Substring(lastSlash + 1) : _path;
                Context.AddRelatedObject(_entity, shortPath, item);
            }

            if (!dontSave)
            {
                return Context.SaveChangesAsync();
            }
            else
            {
                var retVal = new global::System.Threading.Tasks.TaskCompletionSource<object>();
                retVal.SetResult(null);
                return retVal.Task;
            }
        }

    }

    [Microsoft.Office365.OutlookServices.Extensions.LowerCaseProperty]
    public partial interface IFolderCollection: IReadOnlyQueryableSetBase<IFolder>
    {
        IFolderFetcher GetById (string id);

        IFolderFetcher this[string id]
        {
            get;
        }

        global::System.Threading.Tasks.Task<IPagedCollection<IFolder>> ExecuteAsync();

		/// <param name="dontSave">true to delay saving until batch is saved; false to save immediately.</param>
        global::System.Threading.Tasks.Task AddFolderAsync(IFolder item, bool dontSave = false);
    }

    internal partial class MessageCollection: Microsoft.Office365.OutlookServices.Extensions.QueryableSet<IMessage> , IMessageCollection
    {
        internal MessageCollection(
            global::Microsoft.OData.Client.DataServiceQuery inner,
            Microsoft.Office365.OutlookServices.Extensions.DataServiceContextWrapper context,
            object entity,
            string path)
            : base(inner, context, entity as EntityBase, path)
        {
        }

        public IMessageFetcher GetById (string id)
        {
            return this[id];
        }

        public IMessageFetcher this[string id]
        {
            get
            {
                var query = (global::Microsoft.OData.Client.DataServiceQuery) System.Linq.Queryable.Where(Context.CreateQuery<Message>(this._path), (i) => i.Id == id);
                var fetcher = new MessageFetcher();
                var path = query.RequestUri.ToString().Substring(Context.BaseUri.ToString().TrimEnd('/').Length + 1);
                fetcher.Initialize(Context, path);

                return fetcher;
            }
        }

        public global::System.Threading.Tasks.Task<IPagedCollection<IMessage>> ExecuteAsync()
        {
            return base.ExecuteAsyncInternal();
        }

        public global::System.Threading.Tasks.Task AddMessageAsync(IMessage item, bool dontSave = false)
        {
            if (_entity == null)
            {
                Context.AddObject(_path, item);
            }
            else
            {
                var lastSlash = _path.LastIndexOf('/');
                var shortPath = (lastSlash >= 0 && lastSlash < _path.Length - 1) ? _path.Substring(lastSlash + 1) : _path;
                Context.AddRelatedObject(_entity, shortPath, item);
            }

            if (!dontSave)
            {
                return Context.SaveChangesAsync();
            }
            else
            {
                var retVal = new global::System.Threading.Tasks.TaskCompletionSource<object>();
                retVal.SetResult(null);
                return retVal.Task;
            }
        }

    }

    [Microsoft.Office365.OutlookServices.Extensions.LowerCaseProperty]
    public partial interface IMessageCollection: IReadOnlyQueryableSetBase<IMessage>
    {
        IMessageFetcher GetById (string id);

        IMessageFetcher this[string id]
        {
            get;
        }

        global::System.Threading.Tasks.Task<IPagedCollection<IMessage>> ExecuteAsync();

		/// <param name="dontSave">true to delay saving until batch is saved; false to save immediately.</param>
        global::System.Threading.Tasks.Task AddMessageAsync(IMessage item, bool dontSave = false);
    }

    internal partial class CalendarCollection: Microsoft.Office365.OutlookServices.Extensions.QueryableSet<ICalendar> , ICalendarCollection
    {
        internal CalendarCollection(
            global::Microsoft.OData.Client.DataServiceQuery inner,
            Microsoft.Office365.OutlookServices.Extensions.DataServiceContextWrapper context,
            object entity,
            string path)
            : base(inner, context, entity as EntityBase, path)
        {
        }

        public ICalendarFetcher GetById (string id)
        {
            return this[id];
        }

        public ICalendarFetcher this[string id]
        {
            get
            {
                var query = (global::Microsoft.OData.Client.DataServiceQuery) System.Linq.Queryable.Where(Context.CreateQuery<Calendar>(this._path), (i) => i.Id == id);
                var fetcher = new CalendarFetcher();
                var path = query.RequestUri.ToString().Substring(Context.BaseUri.ToString().TrimEnd('/').Length + 1);
                fetcher.Initialize(Context, path);

                return fetcher;
            }
        }

        public global::System.Threading.Tasks.Task<IPagedCollection<ICalendar>> ExecuteAsync()
        {
            return base.ExecuteAsyncInternal();
        }

        public global::System.Threading.Tasks.Task AddCalendarAsync(ICalendar item, bool dontSave = false)
        {
            if (_entity == null)
            {
                Context.AddObject(_path, item);
            }
            else
            {
                var lastSlash = _path.LastIndexOf('/');
                var shortPath = (lastSlash >= 0 && lastSlash < _path.Length - 1) ? _path.Substring(lastSlash + 1) : _path;
                Context.AddRelatedObject(_entity, shortPath, item);
            }

            if (!dontSave)
            {
                return Context.SaveChangesAsync();
            }
            else
            {
                var retVal = new global::System.Threading.Tasks.TaskCompletionSource<object>();
                retVal.SetResult(null);
                return retVal.Task;
            }
        }

    }

    [Microsoft.Office365.OutlookServices.Extensions.LowerCaseProperty]
    public partial interface ICalendarCollection: IReadOnlyQueryableSetBase<ICalendar>
    {
        ICalendarFetcher GetById (string id);

        ICalendarFetcher this[string id]
        {
            get;
        }

        global::System.Threading.Tasks.Task<IPagedCollection<ICalendar>> ExecuteAsync();

		/// <param name="dontSave">true to delay saving until batch is saved; false to save immediately.</param>
        global::System.Threading.Tasks.Task AddCalendarAsync(ICalendar item, bool dontSave = false);
    }

    internal partial class CalendarGroupCollection: Microsoft.Office365.OutlookServices.Extensions.QueryableSet<ICalendarGroup> , ICalendarGroupCollection
    {
        internal CalendarGroupCollection(
            global::Microsoft.OData.Client.DataServiceQuery inner,
            Microsoft.Office365.OutlookServices.Extensions.DataServiceContextWrapper context,
            object entity,
            string path)
            : base(inner, context, entity as EntityBase, path)
        {
        }

        public ICalendarGroupFetcher GetById (string id)
        {
            return this[id];
        }

        public ICalendarGroupFetcher this[string id]
        {
            get
            {
                var query = (global::Microsoft.OData.Client.DataServiceQuery) System.Linq.Queryable.Where(Context.CreateQuery<CalendarGroup>(this._path), (i) => i.Id == id);
                var fetcher = new CalendarGroupFetcher();
                var path = query.RequestUri.ToString().Substring(Context.BaseUri.ToString().TrimEnd('/').Length + 1);
                fetcher.Initialize(Context, path);

                return fetcher;
            }
        }

        public global::System.Threading.Tasks.Task<IPagedCollection<ICalendarGroup>> ExecuteAsync()
        {
            return base.ExecuteAsyncInternal();
        }

        public global::System.Threading.Tasks.Task AddCalendarGroupAsync(ICalendarGroup item, bool dontSave = false)
        {
            if (_entity == null)
            {
                Context.AddObject(_path, item);
            }
            else
            {
                var lastSlash = _path.LastIndexOf('/');
                var shortPath = (lastSlash >= 0 && lastSlash < _path.Length - 1) ? _path.Substring(lastSlash + 1) : _path;
                Context.AddRelatedObject(_entity, shortPath, item);
            }

            if (!dontSave)
            {
                return Context.SaveChangesAsync();
            }
            else
            {
                var retVal = new global::System.Threading.Tasks.TaskCompletionSource<object>();
                retVal.SetResult(null);
                return retVal.Task;
            }
        }

    }

    [Microsoft.Office365.OutlookServices.Extensions.LowerCaseProperty]
    public partial interface ICalendarGroupCollection: IReadOnlyQueryableSetBase<ICalendarGroup>
    {
        ICalendarGroupFetcher GetById (string id);

        ICalendarGroupFetcher this[string id]
        {
            get;
        }

        global::System.Threading.Tasks.Task<IPagedCollection<ICalendarGroup>> ExecuteAsync();

		/// <param name="dontSave">true to delay saving until batch is saved; false to save immediately.</param>
        global::System.Threading.Tasks.Task AddCalendarGroupAsync(ICalendarGroup item, bool dontSave = false);
    }

    internal partial class EventCollection: Microsoft.Office365.OutlookServices.Extensions.QueryableSet<IEvent> , IEventCollection
    {
        internal EventCollection(
            global::Microsoft.OData.Client.DataServiceQuery inner,
            Microsoft.Office365.OutlookServices.Extensions.DataServiceContextWrapper context,
            object entity,
            string path)
            : base(inner, context, entity as EntityBase, path)
        {
        }

        public IEventFetcher GetById (string id)
        {
            return this[id];
        }

        public IEventFetcher this[string id]
        {
            get
            {
                var query = (global::Microsoft.OData.Client.DataServiceQuery) System.Linq.Queryable.Where(Context.CreateQuery<Event>(this._path), (i) => i.Id == id);
                var fetcher = new EventFetcher();
                var path = query.RequestUri.ToString().Substring(Context.BaseUri.ToString().TrimEnd('/').Length + 1);
                fetcher.Initialize(Context, path);

                return fetcher;
            }
        }

        public global::System.Threading.Tasks.Task<IPagedCollection<IEvent>> ExecuteAsync()
        {
            return base.ExecuteAsyncInternal();
        }

        public global::System.Threading.Tasks.Task AddEventAsync(IEvent item, bool dontSave = false)
        {
            if (_entity == null)
            {
                Context.AddObject(_path, item);
            }
            else
            {
                var lastSlash = _path.LastIndexOf('/');
                var shortPath = (lastSlash >= 0 && lastSlash < _path.Length - 1) ? _path.Substring(lastSlash + 1) : _path;
                Context.AddRelatedObject(_entity, shortPath, item);
            }

            if (!dontSave)
            {
                return Context.SaveChangesAsync();
            }
            else
            {
                var retVal = new global::System.Threading.Tasks.TaskCompletionSource<object>();
                retVal.SetResult(null);
                return retVal.Task;
            }
        }

    }

    [Microsoft.Office365.OutlookServices.Extensions.LowerCaseProperty]
    public partial interface IEventCollection: IReadOnlyQueryableSetBase<IEvent>
    {
        IEventFetcher GetById (string id);

        IEventFetcher this[string id]
        {
            get;
        }

        global::System.Threading.Tasks.Task<IPagedCollection<IEvent>> ExecuteAsync();

		/// <param name="dontSave">true to delay saving until batch is saved; false to save immediately.</param>
        global::System.Threading.Tasks.Task AddEventAsync(IEvent item, bool dontSave = false);
    }

    internal partial class ContactCollection: Microsoft.Office365.OutlookServices.Extensions.QueryableSet<IContact> , IContactCollection
    {
        internal ContactCollection(
            global::Microsoft.OData.Client.DataServiceQuery inner,
            Microsoft.Office365.OutlookServices.Extensions.DataServiceContextWrapper context,
            object entity,
            string path)
            : base(inner, context, entity as EntityBase, path)
        {
        }

        public IContactFetcher GetById (string id)
        {
            return this[id];
        }

        public IContactFetcher this[string id]
        {
            get
            {
                var query = (global::Microsoft.OData.Client.DataServiceQuery) System.Linq.Queryable.Where(Context.CreateQuery<Contact>(this._path), (i) => i.Id == id);
                var fetcher = new ContactFetcher();
                var path = query.RequestUri.ToString().Substring(Context.BaseUri.ToString().TrimEnd('/').Length + 1);
                fetcher.Initialize(Context, path);

                return fetcher;
            }
        }

        public global::System.Threading.Tasks.Task<IPagedCollection<IContact>> ExecuteAsync()
        {
            return base.ExecuteAsyncInternal();
        }

        public global::System.Threading.Tasks.Task AddContactAsync(IContact item, bool dontSave = false)
        {
            if (_entity == null)
            {
                Context.AddObject(_path, item);
            }
            else
            {
                var lastSlash = _path.LastIndexOf('/');
                var shortPath = (lastSlash >= 0 && lastSlash < _path.Length - 1) ? _path.Substring(lastSlash + 1) : _path;
                Context.AddRelatedObject(_entity, shortPath, item);
            }

            if (!dontSave)
            {
                return Context.SaveChangesAsync();
            }
            else
            {
                var retVal = new global::System.Threading.Tasks.TaskCompletionSource<object>();
                retVal.SetResult(null);
                return retVal.Task;
            }
        }

    }

    [Microsoft.Office365.OutlookServices.Extensions.LowerCaseProperty]
    public partial interface IContactCollection: IReadOnlyQueryableSetBase<IContact>
    {
        IContactFetcher GetById (string id);

        IContactFetcher this[string id]
        {
            get;
        }

        global::System.Threading.Tasks.Task<IPagedCollection<IContact>> ExecuteAsync();

		/// <param name="dontSave">true to delay saving until batch is saved; false to save immediately.</param>
        global::System.Threading.Tasks.Task AddContactAsync(IContact item, bool dontSave = false);
    }

    internal partial class ContactFolderCollection: Microsoft.Office365.OutlookServices.Extensions.QueryableSet<IContactFolder> , IContactFolderCollection
    {
        internal ContactFolderCollection(
            global::Microsoft.OData.Client.DataServiceQuery inner,
            Microsoft.Office365.OutlookServices.Extensions.DataServiceContextWrapper context,
            object entity,
            string path)
            : base(inner, context, entity as EntityBase, path)
        {
        }

        public IContactFolderFetcher GetById (string id)
        {
            return this[id];
        }

        public IContactFolderFetcher this[string id]
        {
            get
            {
                var query = (global::Microsoft.OData.Client.DataServiceQuery) System.Linq.Queryable.Where(Context.CreateQuery<ContactFolder>(this._path), (i) => i.Id == id);
                var fetcher = new ContactFolderFetcher();
                var path = query.RequestUri.ToString().Substring(Context.BaseUri.ToString().TrimEnd('/').Length + 1);
                fetcher.Initialize(Context, path);

                return fetcher;
            }
        }

        public global::System.Threading.Tasks.Task<IPagedCollection<IContactFolder>> ExecuteAsync()
        {
            return base.ExecuteAsyncInternal();
        }

        public global::System.Threading.Tasks.Task AddContactFolderAsync(IContactFolder item, bool dontSave = false)
        {
            if (_entity == null)
            {
                Context.AddObject(_path, item);
            }
            else
            {
                var lastSlash = _path.LastIndexOf('/');
                var shortPath = (lastSlash >= 0 && lastSlash < _path.Length - 1) ? _path.Substring(lastSlash + 1) : _path;
                Context.AddRelatedObject(_entity, shortPath, item);
            }

            if (!dontSave)
            {
                return Context.SaveChangesAsync();
            }
            else
            {
                var retVal = new global::System.Threading.Tasks.TaskCompletionSource<object>();
                retVal.SetResult(null);
                return retVal.Task;
            }
        }

    }

    [Microsoft.Office365.OutlookServices.Extensions.LowerCaseProperty]
    public partial interface IContactFolderCollection: IReadOnlyQueryableSetBase<IContactFolder>
    {
        IContactFolderFetcher GetById (string id);

        IContactFolderFetcher this[string id]
        {
            get;
        }

        global::System.Threading.Tasks.Task<IPagedCollection<IContactFolder>> ExecuteAsync();

		/// <param name="dontSave">true to delay saving until batch is saved; false to save immediately.</param>
        global::System.Threading.Tasks.Task AddContactFolderAsync(IContactFolder item, bool dontSave = false);
    }

    internal partial class AttachmentCollection: Microsoft.Office365.OutlookServices.Extensions.QueryableSet<IAttachment> , IAttachmentCollection
    {
        internal AttachmentCollection(
            global::Microsoft.OData.Client.DataServiceQuery inner,
            Microsoft.Office365.OutlookServices.Extensions.DataServiceContextWrapper context,
            object entity,
            string path)
            : base(inner, context, entity as EntityBase, path)
        {
        }

        public IAttachmentFetcher GetById (string id)
        {
            return this[id];
        }

        public IAttachmentFetcher this[string id]
        {
            get
            {
                var query = (global::Microsoft.OData.Client.DataServiceQuery) System.Linq.Queryable.Where(Context.CreateQuery<Attachment>(this._path), (i) => i.Id == id);
                var fetcher = new AttachmentFetcher();
                var path = query.RequestUri.ToString().Substring(Context.BaseUri.ToString().TrimEnd('/').Length + 1);
                fetcher.Initialize(Context, path);

                return fetcher;
            }
        }

        public global::System.Threading.Tasks.Task<IPagedCollection<IAttachment>> ExecuteAsync()
        {
            return base.ExecuteAsyncInternal();
        }

        public global::System.Threading.Tasks.Task AddAttachmentAsync(IAttachment item, bool dontSave = false)
        {
            if (_entity == null)
            {
                Context.AddObject(_path, item);
            }
            else
            {
                var lastSlash = _path.LastIndexOf('/');
                var shortPath = (lastSlash >= 0 && lastSlash < _path.Length - 1) ? _path.Substring(lastSlash + 1) : _path;
                Context.AddRelatedObject(_entity, shortPath, item);
            }

            if (!dontSave)
            {
                return Context.SaveChangesAsync();
            }
            else
            {
                var retVal = new global::System.Threading.Tasks.TaskCompletionSource<object>();
                retVal.SetResult(null);
                return retVal.Task;
            }
        }

    }

    [Microsoft.Office365.OutlookServices.Extensions.LowerCaseProperty]
    public partial interface IAttachmentCollection: IReadOnlyQueryableSetBase<IAttachment>
    {
        IAttachmentFetcher GetById (string id);

        IAttachmentFetcher this[string id]
        {
            get;
        }

        global::System.Threading.Tasks.Task<IPagedCollection<IAttachment>> ExecuteAsync();

		/// <param name="dontSave">true to delay saving until batch is saved; false to save immediately.</param>
        global::System.Threading.Tasks.Task AddAttachmentAsync(IAttachment item, bool dontSave = false);
    }

}



