//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#pragma warning disable 109

namespace Microsoft.Office365.SharePoint.CoreServices.Extensions
{
    using global::Microsoft.OData.Client;
    using global::Microsoft.OData.Core;

    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.Linq;
    using System.Reflection;

    internal class LowerCasePropertyAttribute : System.Attribute
    {
    }

    public interface IEntityBase
    {
		/// <param name="dontSave">true to delay saving until batch is saved; false to save immediately.</param>
        global::System.Threading.Tasks.Task UpdateAsync(bool dontSave = false);
		/// <param name="dontSave">true to delay saving until batch is saved; false to save immediately.</param>
        global::System.Threading.Tasks.Task DeleteAsync(bool dontSave = false);
    }

    internal class RestShallowObjectFetcher  : BaseEntityType
    {
        private string _path;
        internal new DataServiceContextWrapper Context 
        { 
            get
            {
                return (DataServiceContextWrapper)base.Context;
            }
            private set
            {
                base.Context = value;
            }
        }

        internal RestShallowObjectFetcher () {}
        
        internal void Initialize(
            DataServiceContextWrapper context,
            string path)
        {
            Context = context;
            _path = path;
        }

        protected string GetPath(string propertyName)
        {
            return propertyName == null ? this._path : this._path + "/" + propertyName;
        }

        protected System.Uri GetUrl()
        {
            return new Uri(Context.BaseUri.ToString().TrimEnd('/') + "/" + GetPath(null));
        }
    }

    public partial class DataServiceContextWrapper : DataServiceContext
    {
        private object _syncLock = new object();
        private string _accessToken;
        private global::System.Func<global::System.Threading.Tasks.Task<string>> _accessTokenGetter;
        private System.Func<System.Threading.Tasks.Task> _accessTokenSetter;
        private HashSet<EntityBase> _modifiedEntities = new HashSet<EntityBase>();

        private readonly string XClientStringClientTag = string.Format("Office 365 API Tools {0}", "1.1.0612");

        public void UpdateObject(EntityBase entity)
        {
            if (GetEntityDescriptor(entity) != null)
            {
                _modifiedEntities.Add(entity);
                base.UpdateObject(entity);
            }
        }

        private async global::System.Threading.Tasks.Task SetToken()
        {
            var token = await _accessTokenGetter();
            lock(_syncLock)
            {
                _accessToken = token;
            }
        }

        public DataServiceContextWrapper(Uri serviceRoot, global::Microsoft.OData.Client.ODataProtocolVersion maxProtocolVersion, global::System.Func<global::System.Threading.Tasks.Task<string>> accessTokenGetter)
            : base(serviceRoot, maxProtocolVersion)
        {
            _accessTokenGetter = accessTokenGetter;
            _accessTokenSetter = SetToken;
            
            IgnoreMissingProperties = true;

            BuildingRequest += (sender, args) =>
            {
           
                args.Headers.Add("Authorization", "Bearer " + _accessToken);
                args.Headers.Add("X-ClientService-ClientTag", XClientStringClientTag);
            };
        
            Configurations.RequestPipeline.OnEntryStarting((args) =>
            {
                var entity = (EntityBase)args.Entity;

                if ((!entity.ChangedProperties.IsValueCreated || entity.ChangedProperties.Value.Count == 0))
                {
                    args.Entry.Properties = new ODataProperty[0];
                    return;
                }

                if (!_modifiedEntities.Contains(entity))
                {
                    _modifiedEntities.Add(entity);
                }

                IEnumerable<ODataProperty> properties = new ODataProperty[0];

                if (entity.ChangedProperties.IsValueCreated)
                {
                    properties = properties.Concat(args.Entry.Properties.Where(i => entity.ChangedProperties.Value.Contains(i.Name)));
                }

                args.Entry.Properties = properties;
            });

            Configurations.ResponsePipeline.OnEntityMaterialized((args) =>
            {
                var entity = (EntityBase)args.Entity;

                entity.ResetChanges();
            });

            OnCreated();
        }

        partial void OnCreated();

        internal System.Type DefaultResolveTypeInternal(string typeName, string fullNamespace, string languageDependentNamespace)
        {
            return DefaultResolveType(typeName, fullNamespace, languageDependentNamespace);
        }

        internal string DefaultResolveNameInternal(global::System.Type clientType, string fullNamespace, string languageDependentNamespace)
        {
            if (clientType.Namespace.Equals(languageDependentNamespace, global::System.StringComparison.Ordinal))
            {
                return string.Concat(fullNamespace, ".", clientType.Name);
            }

            return string.Empty;
        }

        public async System.Threading.Tasks.Task<TInterface> ExecuteSingleAsync<TSource, TInterface>(DataServiceQuery<TSource> inner)
        {
            try
            {
                await SetToken();
                return await global::System.Threading.Tasks.Task.Factory.FromAsync<TInterface>(
                    inner.BeginExecute,
                    new global::System.Func<global::System.IAsyncResult, TInterface>(i => 
                        global::System.Linq.Enumerable.SingleOrDefault(
                        global::System.Linq.Enumerable.Cast<TInterface>(inner.EndExecute(i)))),
                    global::System.Threading.Tasks.TaskCreationOptions.None);
            }
            catch (Exception ex)
            {
                var newException = ProcessException(ex);

                if (newException != null)
                {
                    throw newException;
                }

                throw;
            }
        }

        public async System.Threading.Tasks.Task<IBatchElementResult[]> ExecuteBatchAsync(params IReadOnlyQueryableSetBase[] queries)
        {
            try
            {
                var requests = (from i in queries select (DataServiceRequest)i.Query).ToArray();

                await SetToken();

                var responses = await global::System.Threading.Tasks.Task.Factory.FromAsync<DataServiceRequest[], DataServiceResponse>(
                    (q, callback, state) => BeginExecuteBatch(callback, state, q), // need to reorder parameters
                    EndExecuteBatch,
                    requests,
                    null);

                var retVal = new IBatchElementResult[queries.Length];

                var index = 0;
                foreach (var response in responses)
                {
                    Type tConcrete = ((IConcreteTypeAccessor)queries[index]).ConcreteType;
                    Type tInterface = ((IConcreteTypeAccessor)queries[index]).ElementType;
                    
                    var pcType = typeof(PagedCollection<,>).MakeGenericType(tInterface, tConcrete);
                    var pcTypeInfo = pcType.GetTypeInfo();
                    var PCCreator = pcTypeInfo.GetDeclaredMethod("Create");

                    // Handle an error response. 
                    // from http://msdn.microsoft.com/en-us/library/dd744838(v=vs.110).aspx
                    if (response.StatusCode > 299 || response.StatusCode < 200)
                    {
                        retVal[index] = new BatchElementResult(ProcessException(response.Error) ?? response.Error);
                    }
                    else
                    {
                        retVal[index] = new BatchElementResult((IPagedCollection)PCCreator.Invoke(null, new object[] { this, response }));
                    }

                    index++;
                }

                return retVal;
            }
            catch (Exception ex)
            {
                var newException = ProcessException(ex);

                if (newException != null)
                {
                    throw newException;
                }

                throw;
            }
        }

        public async System.Threading.Tasks.Task<System.IO.Stream> GetStreamAsync(Uri requestUriTmp)
        {
            using (var client = new System.Net.Http.HttpClient())
            {
                using (var request = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUriTmp))
                {
                    request.Headers.Add("Authorization", "Bearer " + await _accessTokenGetter());
                    request.Headers.Add("Accept", "*/*");
                    request.Headers.Add("Accept-Charset", "UTF-8");
                    request.Headers.Add("X-ClientService-ClientTag", XClientStringClientTag);

                    // Do not dispose the response. If disposed, it will also dispose the
                    // stream we are returning
                    var response = await client.SendAsync(request);
                    if (response.IsSuccessStatusCode)
                    {
                        return await response.Content.ReadAsStreamAsync();
                    }

                    var newException = await ProcessErrorAsync(response);

                    if (newException != null)
                    {
                        throw newException;
                    }

                    response.EnsureSuccessStatusCode();

                    // unreachable
                    return null;
                }
            }
        }

        public async System.Threading.Tasks.Task<DataServiceStreamResponse> GetReadStreamAsync(EntityBase entity, string streamName, string contentType)
        {
            try
            {
                await SetToken();

                if (!string.IsNullOrEmpty(streamName))
                {
                    var resp = await global::System.Threading.Tasks.Task.Factory.FromAsync<object, string, DataServiceRequestArgs, DataServiceStreamResponse>(
                        BeginGetReadStream,
                        EndGetReadStream,
                        entity,
                        streamName,
                        new DataServiceRequestArgs { ContentType = contentType /*, Headers = {todo}*/ },
                        null);
                    return resp;
                }
                else
                {
                    var resp = await global::System.Threading.Tasks.Task.Factory.FromAsync<object, DataServiceRequestArgs, DataServiceStreamResponse>(
                        BeginGetReadStream,
                        EndGetReadStream,
                        entity,
                        new DataServiceRequestArgs { ContentType = contentType /*, Headers = {todo}*/ },
                        null);

                    return resp;
                }

            }
            catch (Exception ex)
            {
                var newException = ProcessException(ex);

                if (newException != null)
                {
                    throw newException;
                }

                throw;
            }
        }

        public async System.Threading.Tasks.Task<IPagedCollection<TInterface>> ExecuteAsync<TSource, TInterface>(DataServiceQuery<TSource> inner) where TSource : TInterface
        {
            try
            {
                await SetToken();
                return await global::System.Threading.Tasks.Task.Factory.FromAsync<
                            IPagedCollection<TInterface>>(inner.BeginExecute,
                            new global::System.Func<global::System.IAsyncResult, IPagedCollection<TInterface>>(
                                r =>
                                {
                                    var innerResult = (QueryOperationResponse<TSource>)inner.EndExecute(r);


                                    return new PagedCollection<TInterface, TSource>(this, innerResult);
                                }
                                ), global::System.Threading.Tasks.TaskCreationOptions.None);
            }
            catch (Exception ex)
            {
                var newException = ProcessException(ex);

                if (newException != null)
                {
                    throw newException;
                }

                throw;
            }
        }

        public new global::System.Threading.Tasks.Task<global::System.Collections.Generic.IEnumerable<T>> ExecuteAsync<T>(
            global::System.Uri uri,
            string httpMethod,
            bool singleResult,
            params OperationParameter[] operationParameters)
        {
            return ExecuteAsyncInternal<T>(uri, httpMethod, singleResult, (System.IO.Stream)null, operationParameters);
        }

        public global::System.Threading.Tasks.Task<global::System.Collections.Generic.IEnumerable<T>> ExecuteAsync<T>(
            global::System.Uri uri,
            string httpMethod,
            bool singleResult,
            System.IO.Stream stream,
            params OperationParameter[] operationParameters)
        {
            return ExecuteAsyncInternal<T>(uri, httpMethod, singleResult, stream ?? new System.IO.MemoryStream(), operationParameters);
        }

        public async global::System.Threading.Tasks.Task<global::System.Collections.Generic.IEnumerable<T>> ExecuteAsyncInternal<T>(
            global::System.Uri uri,
            string httpMethod,
            bool singleResult,
            System.IO.Stream stream,
            params OperationParameter[] operationParameters)
        {
            try
            {
                await SetToken();

                if (stream != null)
                {
                    Configurations.RequestPipeline.OnMessageCreating = (global::Microsoft.OData.Client.DataServiceClientRequestMessageArgs args) =>
                    {
                        args.Headers.Remove("Content-Length");

                        var msg = new global::Microsoft.OData.Client.HttpWebRequestMessage(args);

                        global::System.Threading.Tasks.Task.Factory.FromAsync<System.IO.Stream>(msg.BeginGetRequestStream, msg.EndGetRequestStream, null).ContinueWith
                            (s => stream.CopyTo(s.Result))
                            .Wait();

                        return msg;
                    };
                }

                return await global::System.Threading.Tasks.Task.Factory.FromAsync<global::System.Collections.Generic.IEnumerable<T>>
                (
                    (callback, state) => BeginExecute<T>(uri, callback, state, httpMethod, singleResult, operationParameters),
                    EndExecute<T>, global::System.Threading.Tasks.TaskCreationOptions.None);
            }
            catch (Exception ex)
            {
                var newException = ProcessException(ex);

                if (newException != null)
                {
                    throw newException;
                }

                throw;
            }
            finally
            {
                if (stream != null)
                {
                    Configurations.RequestPipeline.OnMessageCreating = null;
                }
            }
        }

        public new global::System.Threading.Tasks.Task ExecuteAsync(
            global::System.Uri uri,
            string httpMethod,
            params OperationParameter[] operationParameters)
        {
            return ExecuteAsync(uri, httpMethod, (System.IO.Stream)null, operationParameters);
        }

        public async global::System.Threading.Tasks.Task ExecuteAsync(
            global::System.Uri uri,
            string httpMethod,
            System.IO.Stream stream,
            params OperationParameter[] operationParameters
            )
        {
            try
            {
                await SetToken();
                if (stream != null)
                {
                    Configurations.RequestPipeline.OnMessageCreating = (global::Microsoft.OData.Client.DataServiceClientRequestMessageArgs args) =>
                    {
                        args.Headers.Remove("Content-Length");

                        var msg = new global::Microsoft.OData.Client.HttpWebRequestMessage(args);

                        global::System.Threading.Tasks.Task.Factory.FromAsync<System.IO.Stream>(msg.BeginGetRequestStream, msg.EndGetRequestStream, null).ContinueWith
                            (s => stream.CopyTo(s.Result))
                            .Wait();

                        return msg;
                    };
                }

                await global::System.Threading.Tasks.Task.Factory.FromAsync 
                        (
                            new global::System.Func<global::System.AsyncCallback, object, global::System.IAsyncResult>(
                                (callback, state) => BeginExecute(uri, callback, state, httpMethod, operationParameters)),
                            new global::System.Action<global::System.IAsyncResult>((i) => EndExecute(i)),
                            global::System.Threading.Tasks.TaskCreationOptions.None);
            }
            catch (Exception ex)
            {
                var newException = ProcessException(ex);

                if (newException != null)
                {
                    throw newException;
                }

                throw;
            }
            finally
            {
                if (stream != null)
                {
                    Configurations.RequestPipeline.OnMessageCreating = null;
                }
            }
        }

        public async System.Threading.Tasks.Task<QueryOperationResponse<TSource>> ExecuteAsync<TSource, TInterface>(DataServiceQueryContinuation<TSource> token)
        {
            try
            {
                await SetToken();

                return await global::System.Threading.Tasks.Task.Factory.FromAsync<QueryOperationResponse<TSource>>(
                    (callback, state) => BeginExecute(token, callback, state),
                    (i) => (QueryOperationResponse<TSource>)EndExecute<TSource>(i),
                    global::System.Threading.Tasks.TaskCreationOptions.None);
            }
            catch (Exception ex)
            {
                var newException = ProcessException(ex);

                if (newException != null)
                {
                    throw newException;
                }

                throw;
            }
        }

        public async new System.Threading.Tasks.Task<DataServiceResponse> SaveChangesAsync(SaveChangesOptions options)
        {
            try
            {
                await SetToken();
                var result = await global::System.Threading.Tasks.Task.Factory.FromAsync<SaveChangesOptions, DataServiceResponse>(
                    BeginSaveChanges,
                    new global::System.Func<global::System.IAsyncResult, DataServiceResponse>(EndSaveChanges),
                    options,
                    null,
                    global::System.Threading.Tasks.TaskCreationOptions.None);

                foreach (var i in _modifiedEntities)
                {
                    i.ResetChanges();
                }

                _modifiedEntities.Clear();
                return result;
            }
            catch (Exception ex)
            {
                var newException = ProcessException(ex);

                if (newException != null)
                {
                    throw newException;
                }

                throw;
            }
        }

        public new System.Threading.Tasks.Task<DataServiceResponse> SaveChangesAsync()
        {
            return SaveChangesAsync(SaveChangesOptions.None);
        }

#if NOTYET
        public async System.Threading.Tasks.Task<IPagedCollection<TSource>> LoadPropertyAsync<TSource>(string path, object entity)
        {
            try
            {
                await SetToken();
                return await global::System.Threading.Tasks.Task.Factory.FromAsync<
                    IPagedCollection<TSource>>(
                    (AsyncCallback callback, object state) =>
                    {
                        return BeginLoadProperty(entity, path, callback, state);
                    },
                    new global::System.Func<global::System.IAsyncResult, IPagedCollection<TSource>>(
                        r =>
                        {
                            var innerResult = (QueryOperationResponse<TSource>)EndLoadProperty(r);

                            return new PagedCollection<TSource>(this, innerResult);
                        }
                        ), global::System.Threading.Tasks.TaskCreationOptions.None);
            }
            catch (Exception ex)
            {
                var newException = ProcessException(ex);

                if (newException != null)
                {
                    throw newException;
                }

                throw;
            }
        }
#endif

        internal static Exception ProcessException(Exception ex)
        {

            if (ex is DataServiceRequestException)
            {
                var response = ((DataServiceRequestException)ex).Response.FirstOrDefault();

                if (response != null)
                {
                    return ProcessError((DataServiceRequestException)ex, ex.InnerException as DataServiceClientException, response.Headers);
                }
            }

            if (ex is DataServiceQueryException)
            {
                return ProcessError((DataServiceQueryException)ex, ex.InnerException as DataServiceClientException, ((DataServiceQueryException)ex).Response.Headers);
            }

            if (ex is DataServiceClientException)
            {
                return ProcessError(ex, (DataServiceClientException)ex, new Dictionary<string, string> { {"Content-Type", ex.Message.StartsWith("<") ? "application/xml" : "application/json"}});
            }

            return null;
        }


        private static Exception ProcessError(Exception outer, DataServiceClientException inner, IDictionary<string, string> headers)
        {
            if (inner == null)
            {
                return null;
            }

            using (var writer = WriteToStream(inner.Message))
            {
                var httpMessage = new HttpWebResponseMessage(
                    headers,
                inner.StatusCode,
                () => writer.BaseStream);

                var reader = new ODataMessageReader(httpMessage);

                try
                {
                    var error = reader.ReadError();
                    return new ODataErrorException(error.Message, outer, error);
                }
                catch
                {
                }
            }

            return null;
        }

        private static async System.Threading.Tasks.Task<Exception> ProcessErrorAsync(System.Net.Http.HttpResponseMessage response)
        {

            if (response.Content == null)
            {
                return null;
            }

            if (response.Content.Headers.ContentType == null)
            {
                return new System.Net.Http.HttpRequestException(await response.Content.ReadAsStringAsync());
            }
            
            using (var stream = await response.Content.ReadAsStreamAsync())
            {
                var headers = Enumerable.ToDictionary(response.Content.Headers, i => i.Key, i => i.Value.FirstOrDefault());

                var httpMessage = new HttpWebResponseMessage(
                  headers,
                (int)response.StatusCode,
                () => stream);

                var reader = new ODataMessageReader(httpMessage);

                try
                {
                    var error = reader.ReadError();
                    return new ODataErrorException(error.Message, null, error);
                }
                catch
                {
                }
            }

            return null;
        }

        private static System.IO.StreamWriter WriteToStream(string contents)
        {
            var stream = new System.IO.MemoryStream();
            var writer = new System.IO.StreamWriter(stream);
            writer.Write(contents);
            writer.Flush();
            stream.Seek(0, System.IO.SeekOrigin.Begin);
            return writer;
        }
    }

    public interface IBatchElementResult
    {
        IPagedCollection SuccessResult { get; }
        Exception FailureResult { get; }
    }

    class BatchElementResult : IBatchElementResult
    {

        public BatchElementResult(IPagedCollection successResult)
        {
            SuccessResult = successResult;
        }

        public BatchElementResult(Exception failureResult)
        {
            FailureResult = failureResult;
        }

        public IPagedCollection SuccessResult
        {
            get;
            private set;
        }

        public Exception FailureResult
        {
            get;
            private set;
        }
    }

    public class ComplexTypeBase 
    {
        private Func<Tuple<EntityBase, string>> _entity;

        protected ComplexTypeBase()
        {
        }

        internal virtual void SetContainer(Func<Tuple<EntityBase, string>> entity)
        {
            _entity = entity;
        }

        protected Tuple<EntityBase, string> GetContainingEntity(string propertyName)
        {
            return _entity != null ? _entity() : null;
        }

        protected void OnPropertyChanged(string propertyName)
        {
            var tuple = GetContainingEntity(propertyName);

            if (tuple != null)
            {
                tuple.Item1.OnPropertyChanged(tuple.Item2);
            }
        }
    }

    internal class EntityCollectionImpl<T> : DataServiceCollection<T> where T : EntityBase
    {
        private Func<Tuple<EntityBase, string>> _entity;

        public EntityCollectionImpl()
            : base(null, TrackingMode.None)
        {
        }

        internal void SetContainer(Func<Tuple<EntityBase, string>> entity)
        {
            _entity = entity;
        }

        protected override void InsertItem(int index, T item)
        {
            InvokeOnEntity(tuple => tuple.Item1.Context.AddRelatedObject(tuple.Item1, tuple.Item2, item));

            base.InsertItem(index, item);
        }

        protected override void ClearItems()
        {
            InvokeOnEntity(tuple => 
            {
                foreach (var i in this)
                {
                    tuple.Item1.Context.DeleteLink(tuple.Item1, tuple.Item2, i);
                }
            });

            base.ClearItems();
        }

        protected override void RemoveItem(int index)
        {
            InvokeOnEntity(tuple => tuple.Item1.Context.DeleteLink(tuple.Item1, tuple.Item2, this[index]));

            base.RemoveItem(index);
        }

        protected override void SetItem(int index, T item)
        {
            InvokeOnEntity(tuple =>
                    {
                        tuple.Item1.Context.DeleteLink(tuple.Item1, tuple.Item2, this[index]);
                        tuple.Item1.Context.AddRelatedObject(tuple.Item1, tuple.Item2, item);
                    }
            );

            base.SetItem(index, item);
        }

        private void InvokeOnEntity(Action<Tuple<EntityBase, string>> action)
        {
            if (_entity != null)
            {
                var tuple = _entity();

                if (tuple.Item1.Context != null && tuple.Item1.Context.GetEntityDescriptor(tuple.Item1) != null)
                {
                    action(tuple);
                }
            }
        }
    }

    internal class NonEntityTypeCollectionImpl<T> : global::System.Collections.ObjectModel.Collection<T>
    {
        private Func<Tuple<EntityBase, string>> _entity;

        static readonly bool _isComplexType = System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(T)).IsSubclassOf(typeof(ComplexTypeBase));

        public NonEntityTypeCollectionImpl()
            : base()
        {
        }

        internal void SetContainer(Func<Tuple<EntityBase, string>> entity)
        {
            _entity = entity;

            if (_isComplexType)
            {
                foreach (var i in this)
                {
                    (i as ComplexTypeBase).SetContainer(entity);
                }
            }
        }

        protected override void InsertItem(int index, T item)
        {
            var ct = item as ComplexTypeBase;
            if (ct != null)
            {
                ct.SetContainer(_entity);
            }

            base.InsertItem(index, item);

            InvokeOnPropertyChanged();
        }

        protected override void ClearItems()
        {
            base.ClearItems();
            InvokeOnPropertyChanged();
        }

        protected override void RemoveItem(int index)
        {
            base.RemoveItem(index);
            InvokeOnPropertyChanged();
        }

        protected override void SetItem(int index, T item)
        {
            var ct = item as ComplexTypeBase;
            if (ct != null)
            {
                ct.SetContainer(_entity);
            }
            base.SetItem(index, item);
            InvokeOnPropertyChanged();
        }

        private void InvokeOnPropertyChanged()
        {
            var tuple = _entity != null ? _entity() : null;
            if (tuple != null)
            {
                tuple.Item1.OnPropertyChanged(tuple.Item2);
            }
        }
    }

    public class EntityBase  : BaseEntityType
    {
        private Lazy<HashSet<string>> _changedProperties = new Lazy<HashSet<string>>(true);

        internal Lazy<HashSet<string>> ChangedProperties
        {
            get { return _changedProperties; }
        }

        protected Tuple<EntityBase, string> GetContainingEntity(string propertyName)
        {
            return new Tuple<EntityBase, string> (this, propertyName);
        }

        protected internal void OnPropertyChanged([global::System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            _changedProperties.Value.Add(propertyName);
            if (Context != null)
            {
                Context.UpdateObject(this);
            }
        }

        internal void ResetChanges()
        {
            _changedProperties = new Lazy<HashSet<string>>(true);
        }

        internal new DataServiceContextWrapper Context 
        { 
            get
            {
                return (DataServiceContextWrapper)base.Context;
            }
            private set
            {
                base.Context = value;
            }
        }

        internal void Initialize()
        {
        }

        protected string GetPath(string propertyName)
        {
            Uri uri = GetUrl();
            if (uri != null)
            {
                return uri.ToString().Substring(Context.BaseUri.ToString().Length + 1) + "/" + propertyName;
            }

            return null;
        }

        protected System.Uri GetUrl()
        {
            if (Context == null)
            {
                return null;
            }

            Uri uri;
            Context.TryGetUri(this, out uri);

            return uri;
        }

		/// <param name="dontSave">true to delay saving until batch is saved; false to save immediately.</param>
        public global::System.Threading.Tasks.Task UpdateAsync(bool dontSave = false)
        {
			 if (Context == null) throw new InvalidOperationException("Not Initialized");
            Context.UpdateObject(this);
            return SaveAsNeeded(dontSave);
        }

		/// <param name="dontSave">true to delay saving until batch is saved; false to save immediately.</param>
        public global::System.Threading.Tasks.Task DeleteAsync(bool dontSave = false)
        {
			 if (Context == null) throw new InvalidOperationException("Not Initialized");
            Context.DeleteObject(this);
            return SaveAsNeeded(dontSave);
        }

		/// <param name="dontSave">true to delay saving until batch is saved; false to save immediately.</param>
        protected internal global::System.Threading.Tasks.Task SaveAsNeeded(bool dontSave)
        {
            if (!dontSave)
            {
                return Context.SaveChangesAsync();
            }
            else
            {
                var retVal = new global::System.Threading.Tasks.TaskCompletionSource<object>();
                retVal.SetResult(null);
                return retVal.Task;
            }
        }
    }

    public class QueryableSet<TSource> : ReadOnlyQueryableSetBase<TSource>
    {
        protected string _path;
        protected object _entity;

        internal void SetContainer(Func<EntityBase> entity, string property)
        {
            // Unneeded
        }

        protected System.Uri GetUrl()
        {
            return new Uri(Context.BaseUri.ToString().TrimEnd('/') + "/" + _path);
        }

        internal QueryableSet(
            DataServiceQuery inner,
            DataServiceContextWrapper context,
            EntityBase entity,
            string path)
            : base(inner, context)
        {
            Initialize(inner, context, entity, path);
        }

        internal void Initialize(DataServiceQuery inner,
            DataServiceContextWrapper context,
            EntityBase entity,
            string path)
        {
            base.Initialize(inner, context);
            _path = path;
            _entity = entity;
        }
    }

    public interface IReadOnlyQueryableSet<TSource> : IReadOnlyQueryableSetBase<TSource>
    {
        System.Threading.Tasks.Task<IPagedCollection<TSource>> ExecuteAsync();
        System.Threading.Tasks.Task<TSource> ExecuteSingleAsync();
    }
    
    public class ReadOnlyQueryableSet<TSource> : ReadOnlyQueryableSetBase<TSource>, IReadOnlyQueryableSet<TSource>
    {
        internal ReadOnlyQueryableSet(
            DataServiceQuery inner,
            DataServiceContextWrapper context)
            :base (inner, context)
        {
        }


        public global::System.Threading.Tasks.Task<IPagedCollection<TSource>> ExecuteAsync()
        {
            return base.ExecuteAsyncInternal();
        }

        public global::System.Threading.Tasks.Task<TSource> ExecuteSingleAsync()
        {
            return base.ExecuteSingleAsyncInternal();
        }
    }

    public interface IReadOnlyQueryableSetBase
    {
        DataServiceContextWrapper Context { get; }
        DataServiceQuery Query { get; }
    }

    public interface IReadOnlyQueryableSetBase<TSource> : IReadOnlyQueryableSetBase
    {
        IReadOnlyQueryableSet<TSource> Expand<TTarget>(System.Linq.Expressions.Expression<Func<TSource, TTarget>> navigationPropertyAccessor);
        IReadOnlyQueryableSet<TResult> OfType<TResult>();
        IReadOnlyQueryableSet<TSource> OrderBy<TKey>(System.Linq.Expressions.Expression<Func<TSource, TKey>> keySelector);
        IReadOnlyQueryableSet<TSource> OrderByDescending<TKey>(System.Linq.Expressions.Expression<Func<TSource, TKey>> keySelector);
        IReadOnlyQueryableSet<TResult> Select<TResult>(System.Linq.Expressions.Expression<Func<TSource, TResult>> selector);
        IReadOnlyQueryableSet<TSource> Skip(int count);
        IReadOnlyQueryableSet<TSource> Take(int count);
        IReadOnlyQueryableSet<TSource> Where(System.Linq.Expressions.Expression<Func<TSource, bool>> predicate);
    }

    public interface IConcreteTypeAccessor
    {
        Type ConcreteType { get; }
        Type ElementType { get; }
    }

    public abstract class ReadOnlyQueryableSetBase<TSource> :IReadOnlyQueryableSetBase<TSource>, IConcreteTypeAccessor
    {
        protected DataServiceQuery _inner;
        protected DataServiceContextWrapper _context;

        private Lazy<Type> _concreteType = new Lazy<Type>(() => CreateConcreteType(typeof(TSource)), true);

        // Will return null if not an interface
        private static Type CreateConcreteType(Type tsourceType)
        {
            var tsourceTypeInfo = System.Reflection.IntrospectionExtensions.GetTypeInfo(tsourceType);
            if (tsourceTypeInfo.IsGenericType)
            {
                var arguments = tsourceTypeInfo.GenericTypeArguments;
                bool modified = false;

                for(int i = 0; i < arguments.Length; i++)
                {
                    var converted = CreateConcreteType(arguments[i]);
                    if (converted != null)
                    {
                        arguments[i] = converted;
                        modified = true;
                    }
                }

                if (!modified)
                {
                    return null;
                }

                // Properties declared as IPagedCollection on the interface are declared as IList on the concrete type
                if (tsourceTypeInfo.GetGenericTypeDefinition() == typeof(IPagedCollection<>))
                {
                    return typeof(IList<>).MakeGenericType(arguments);
                }

                return tsourceTypeInfo.GetGenericTypeDefinition().MakeGenericType(arguments);
            }

            const string Fetcher = "Fetcher";
            if (System.Linq.Enumerable.Any<System.Reflection.CustomAttributeData>(
                tsourceTypeInfo.CustomAttributes,
                i => i.AttributeType == typeof(LowerCasePropertyAttribute)))
            {
                string typeName = tsourceTypeInfo.Namespace + "." + tsourceTypeInfo.Name.Substring(1);
                if (typeName.EndsWith(Fetcher))
                {
                    typeName = typeName.Substring(typeName.Length - Fetcher.Length);
                }
                return tsourceTypeInfo.Assembly.GetType(typeName);
            }
            else
            {
                return null;
            }
        }

        public DataServiceContextWrapper Context
        {
            get { return _context; }
        }

        public DataServiceQuery Query
        {
            get { return _inner; }
        }

        public ReadOnlyQueryableSetBase(
            DataServiceQuery inner,
            DataServiceContextWrapper context)
        {
            Initialize(inner, context);        
        }

        protected void Initialize(DataServiceQuery inner,
            DataServiceContextWrapper context)
        {
            _inner = inner;
            _context = context;
        }

#region IConcreteTypeAccessor implementation

        Type IConcreteTypeAccessor.ConcreteType
        {
            get
            {
                return _concreteType.Value ?? typeof(TSource);
            }
        }

        Type IConcreteTypeAccessor.ElementType
        {
            get
            {
                return typeof(TSource);
            }
        }

#endregion

        protected global::System.Threading.Tasks.Task<IPagedCollection<TSource>> ExecuteAsyncInternal()
        {

            if (_concreteType.Value != null)
            {
                var contextTypeInfo = System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(DataServiceContextWrapper));

                var executeAsyncMethodInfo =
                    (from i in contextTypeInfo.GetDeclaredMethods("ExecuteAsync")
                     let parameters = i.GetParameters()
                     where parameters.Length == 1 && parameters[0].ParameterType.GetGenericTypeDefinition() == typeof(DataServiceQuery<>)
                     select i).First();

                return (global::System.Threading.Tasks.Task<IPagedCollection<TSource>>) 
                    executeAsyncMethodInfo.MakeGenericMethod(_concreteType.Value, typeof(TSource)).Invoke(_context, new [] { _inner });
            }
            else
            {
                return _context.ExecuteAsync<TSource, TSource>((DataServiceQuery<TSource>)_inner);
            }
        }

        protected global::System.Threading.Tasks.Task<TSource> ExecuteSingleAsyncInternal()
        {
            if (_concreteType.Value != null)
            {
                var contextTypeInfo = System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(DataServiceContextWrapper));

                var executeAsyncMethodInfo =
                    (from i in contextTypeInfo.GetDeclaredMethods("ExecuteSingleAsync")
                     let parameters = i.GetParameters()
                     where parameters.Length == 1 && parameters[0].ParameterType.GetGenericTypeDefinition() == typeof(DataServiceQuery<>)
                     select i).First();

                return (global::System.Threading.Tasks.Task<TSource>)
                    executeAsyncMethodInfo.MakeGenericMethod(_concreteType.Value, typeof(TSource)).Invoke(_context, new[] { _inner });
            }
            else
            {
                return _context.ExecuteSingleAsync<TSource, TSource>((DataServiceQuery<TSource>)_inner);
            }
        }

        #region LINQ


        private class PascalCaseExpressionVisitor : System.Linq.Expressions.ExpressionVisitor
        {
            Dictionary<System.Linq.Expressions.ParameterExpression, System.Linq.Expressions.ParameterExpression>
                _parameterDictionary = new Dictionary<System.Linq.Expressions.ParameterExpression, System.Linq.Expressions.ParameterExpression>();

            protected override System.Linq.Expressions.Expression VisitExtension(System.Linq.Expressions.Expression node)
            {
                return node;
            }

            protected override System.Linq.Expressions.Expression VisitLambda<T>(System.Linq.Expressions.Expression<T> node)
            {

                var originalDelegateType = typeof(T);

                if (originalDelegateType.GetGenericTypeDefinition() == typeof(Func<,>))
                {
                    var newParameterArray = System.Reflection.IntrospectionExtensions.GetTypeInfo(originalDelegateType).GenericTypeArguments;
                    bool hasInterfaces = false;

                    var ct = CreateConcreteType(newParameterArray[0]);
                    if (ct != null)
                    {
                        hasInterfaces = true;
                        newParameterArray[0] = ct;
                    }

                    ct = CreateConcreteType(newParameterArray[1]);
                    if (ct != null)
                    {
                        hasInterfaces = true;
                        newParameterArray[1] = ct;
                    }

                    if (!hasInterfaces)
                    {
                        return base.VisitLambda(node);
                    }

                    var newdDelegateType = typeof(Func<,>).MakeGenericType(newParameterArray);

                    var invocationParameters = node.Parameters.ToArray();

                    for (int i = 0; i < invocationParameters.Length; i++)
                    {
                        var concreteType = CreateConcreteType(invocationParameters[i].Type);

                        if (concreteType != null)
                        {
                            if (!_parameterDictionary.ContainsKey(invocationParameters[i]))
                            {
                                _parameterDictionary[invocationParameters[i]] =  System.Linq.Expressions.Expression.Parameter(
                                concreteType, invocationParameters[i].Name);
                            }

                            invocationParameters[i] = _parameterDictionary[invocationParameters[i]];
                        }
                    }

                    var body = Visit(node.Body);

                    var newLambda = System.Linq.Expressions.Expression.Lambda(
                        newdDelegateType,
                        body,
                        node.TailCall,
                        invocationParameters);

                    return newLambda;
                }

                return base.VisitLambda<T>(node);
            }

            protected override System.Linq.Expressions.Expression VisitParameter(System.Linq.Expressions.ParameterExpression node)
            {
                var concreteType = CreateConcreteType(node.Type);

                if (concreteType == null)
                {
                    return base.VisitParameter(node);
                }

                if (!_parameterDictionary.ContainsKey(node))
                {
                    _parameterDictionary[node] = System.Linq.Expressions.Expression.Parameter(
                    concreteType,
                    node.Name);
                }

                return base.VisitParameter(_parameterDictionary[node]);
            }

            protected override System.Linq.Expressions.Expression VisitMember(System.Linq.Expressions.MemberExpression node)
            {
                if (node.Member is System.Reflection.PropertyInfo)
                {
                    var interfaceType = CreateConcreteType(node.Type) != null;

                    var toLower = System.Linq.Enumerable.Any(
                        node.Member.CustomAttributes, i => i.AttributeType == typeof(LowerCasePropertyAttribute));

                    if (interfaceType || toLower)
                    {
                        var newExpression = Visit(node.Expression);

                        return base.VisitMember(
                            System.Linq.Expressions.Expression.Property(
                                newExpression,
                                System.Reflection.RuntimeReflectionExtensions.GetRuntimeProperty(
                                    newExpression.Type,
                                    toLower ? char.ToLower(node.Member.Name[0]) + node.Member.Name.Substring(1) : node.Member.Name
                               )
                            )
                        );
                    }
                }
                /*
                    Example - "me" is a field:

                    var me = await client.Me.ExecuteAsync();
            
                    var filesQuery = await client.Users.Where(i => i.UserPrincipalName != me.UserPrincipalName).ExecuteAsync();
                */
                else if (node.Member is System.Reflection.FieldInfo) // for local variables
                {
                    var fieldTypeInfo = System.Reflection.IntrospectionExtensions.GetTypeInfo(((System.Reflection.FieldInfo)node.Member).FieldType);
                    if (System.Linq.Enumerable.Any<System.Reflection.CustomAttributeData>(fieldTypeInfo.CustomAttributes, i => i.AttributeType == typeof(LowerCasePropertyAttribute)))
                    {
                        var expression = System.Linq.Expressions.Expression.TypeAs(node, CreateConcreteType(fieldTypeInfo.AsType()));
                        return expression;
                    }
                }

                return base.VisitMember(node);
            }
        }

        private System.Linq.Expressions.ExpressionVisitor _pascalCaseExpressionVisitor = new PascalCaseExpressionVisitor();

        public IReadOnlyQueryableSet<TResult> Select<TResult>(System.Linq.Expressions.Expression<System.Func<TSource, TResult>> selector)
        {
            var newSelector = _pascalCaseExpressionVisitor.Visit(selector);

            DataServiceQuery query = CallLinqMethod(newSelector); 
            
            return new ReadOnlyQueryableSet<TResult>(
                query,
                _context);
        }

        public IReadOnlyQueryableSet<TSource> Where(System.Linq.Expressions.Expression<System.Func<TSource, bool>> predicate)
        {
            // Fix for DevDiv 941323:
            if (predicate.Body.NodeType == System.Linq.Expressions.ExpressionType.Coalesce)
            {
                var binary = (System.Linq.Expressions.BinaryExpression)predicate.Body;

                var constantRight = binary.Right as System.Linq.Expressions.ConstantExpression;

                // If we are coalescing bool to false, it is a no-op
                if (constantRight != null && 
                    constantRight.Value is bool && 
                    !(bool)constantRight.Value && 
                    binary.Left.Type == typeof (bool?) &&
                    binary.Left is System.Linq.Expressions.BinaryExpression)
                {
                    var oldLeft = (System.Linq.Expressions.BinaryExpression)binary.Left;

                    var newLeft = System.Linq.Expressions.Expression.MakeBinary(
                        oldLeft.NodeType,
                        oldLeft.Left,
                        oldLeft.Right);

                    predicate = (System.Linq.Expressions.Expression<System.Func<TSource, bool>>)System.Linq.Expressions.Expression.Lambda(
                        predicate.Type,
                        newLeft,
                        predicate.TailCall,
                        predicate.Parameters);
                }
            }                   

            var newSelector = _pascalCaseExpressionVisitor.Visit(predicate);

            DataServiceQuery query = CallLinqMethod(newSelector, true); 

            return new ReadOnlyQueryableSet<TSource>(
                query,
                _context);
        }

        public IReadOnlyQueryableSet<TResult> OfType<TResult>()
        {
            DataServiceQuery query = ApplyLinq(new[] { typeof(TResult) }, new object[] { _inner }) ??
                (DataServiceQuery)System.Linq.Queryable.OfType<TResult>((System.Linq.IQueryable<TSource>)_inner);

            return new ReadOnlyQueryableSet<TResult>(
                query,
                _context);
        }

        public IReadOnlyQueryableSet<TSource> Skip(int count)
        {
            DataServiceQuery query = ApplyLinq(new[] { typeof(TSource) }, new object[] { _inner, count }) ??
                (DataServiceQuery)System.Linq.Queryable.Skip<TSource>((System.Linq.IQueryable<TSource>)_inner, count);

            return new ReadOnlyQueryableSet<TSource>(
                query,
                _context);
        }

        public IReadOnlyQueryableSet<TSource> Take(int count)
        {
            DataServiceQuery query = ApplyLinq(new[] { typeof(TSource) }, new object[] { _inner, count }) ??
                (DataServiceQuery)System.Linq.Queryable.Take<TSource>((System.Linq.IQueryable<TSource>)_inner, count);

            return new ReadOnlyQueryableSet<TSource>(
                query,
                _context);
        }

        public IReadOnlyQueryableSet<TSource> OrderBy<TKey>(System.Linq.Expressions.Expression<System.Func<TSource, TKey>> keySelector)
        {
            var newSelector = _pascalCaseExpressionVisitor.Visit(keySelector);

            DataServiceQuery query = CallLinqMethod(newSelector); 

            return new ReadOnlyQueryableSet<TSource>(
                query,
                _context);
        }

        public IReadOnlyQueryableSet<TSource> OrderByDescending<TKey>(System.Linq.Expressions.Expression<System.Func<TSource, TKey>> keySelector)
        {
            var newSelector = _pascalCaseExpressionVisitor.Visit(keySelector);

            DataServiceQuery query = CallLinqMethod(newSelector); 

            return new ReadOnlyQueryableSet<TSource>(
                query,
                _context);
        }

        public IReadOnlyQueryableSet<TSource> Expand<TTarget>(System.Linq.Expressions.Expression<Func<TSource, TTarget>> navigationPropertyAccessor)
        {
            var newSelector = _pascalCaseExpressionVisitor.Visit(navigationPropertyAccessor);

            var concreteType = _concreteType.Value ?? typeof(TSource);
            var concreteDsq = typeof(DataServiceQuery<>).MakeGenericType(concreteType);

            DataServiceQuery query = CallOnConcreteType(concreteDsq, _inner, new[] { typeof(TTarget) }, new object[] { newSelector });

            return new ReadOnlyQueryableSet<TSource>(
                query,
                _context);
        }

        private DataServiceQuery ApplyLinq(Type[] typeParams, object[] callParams, [System.Runtime.CompilerServices.CallerMemberName] string methodName = null)
        {
            return CallOnConcreteType(typeof(System.Linq.Queryable), null, typeParams, callParams, methodName);
        }

        private DataServiceQuery CallOnConcreteType(Type targetType, object instance, Type[] typeParams, object[] callParams, [System.Runtime.CompilerServices.CallerMemberName] string methodName = null)
        {
            for (int i = 0; i < typeParams.Length; i++)
            {
                if (typeParams[i] == typeof(TSource))
                {
                    typeParams[i] = _concreteType.Value;
                }
                else
                {
                    var concreteType = CreateConcreteType(typeParams[i]);

                    if (concreteType != null)
                    {
                        typeParams[i] = concreteType;
                    }
                }
            }

            var typeInfo = System.Reflection.IntrospectionExtensions.GetTypeInfo(targetType);
            var methodInfo =
                (from i in typeInfo.GetDeclaredMethods(methodName)
                 let parameters = i.GetParameters()
                 where i.GetGenericArguments().Length == typeParams.Length
                 let constructedMethod = i.MakeGenericMethod(typeParams)
                 where AllParametersAreAssignable(constructedMethod.GetParameters(), callParams)
                 select constructedMethod).First();

            return (DataServiceQuery)methodInfo.Invoke(instance, callParams);
        }

        private bool AllParametersAreAssignable(System.Reflection.ParameterInfo[] parameterInfo, object[] callParams)
        {
            for (int i = 0; i < parameterInfo.Length; i++)
            {
                if (callParams[i] != null &&
                    !System.Reflection.IntrospectionExtensions.GetTypeInfo(parameterInfo[i].ParameterType).IsAssignableFrom(
                    System.Reflection.IntrospectionExtensions.GetTypeInfo(callParams[i].GetType())))
                {
                    return false;
                }
            }

            return true;
        }

        private DataServiceQuery CallLinqMethod(
            System.Linq.Expressions.Expression predicate,
            bool singleGenericParameter = false,
            [System.Runtime.CompilerServices.CallerMemberName] string methodName = null)
        {
            System.Type[] typeParams = singleGenericParameter ?
                new Type[] { predicate.Type.GenericTypeArguments[0] } : 
                predicate.Type.GenericTypeArguments;

            var callParams = new object[] { _inner, predicate };

            var typeInfo = System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(System.Linq.Queryable));
            var methodInfo =
                (from i in typeInfo.GetDeclaredMethods(methodName)
                 let parameters = i.GetParameters()
                 where i.GetGenericArguments().Length == typeParams.Length
                 let constructedMethod = i.MakeGenericMethod(typeParams)
                 where AllParametersAreAssignable(constructedMethod.GetParameters(), callParams)
                 select constructedMethod).First();

            return (DataServiceQuery)methodInfo.Invoke(null, callParams);
        }

        #endregion
    }

    public interface IPagedCollection<TElement>
    {
        global::System.Collections.Generic.IReadOnlyList<TElement> CurrentPage { get; }
        bool MorePagesAvailable { get; }
        global::System.Threading.Tasks.Task<IPagedCollection<TElement>> GetNextPageAsync();
    }
    
    public interface IPagedCollection
    {
        global::System.Collections.Generic.IReadOnlyList<object> CurrentPage { get; }
        bool MorePagesAvailable { get; }
        global::System.Threading.Tasks.Task<IPagedCollection> GetNextPageAsync();
    }

    internal class PagedCollection<TElement, TConcrete> : IPagedCollection, IPagedCollection<TElement> where TConcrete : TElement
    {
        private DataServiceContextWrapper _context;
        private DataServiceQueryContinuation<TConcrete> _continuation;
        private IReadOnlyList<TElement> _currentPage;

        // Creator - should be faster than Activator.CreateInstance
        public static PagedCollection<TElement, TConcrete> Create(DataServiceContextWrapper context,
            QueryOperationResponse<TConcrete> qor)
        {
            return new PagedCollection<TElement, TConcrete>(context, qor);
        }
                
        internal PagedCollection(DataServiceContextWrapper context,
            QueryOperationResponse<TConcrete> qor)
        {
            _context = context;
            _currentPage = (IReadOnlyList<TElement>)qor.ToList();
            _continuation = qor.GetContinuation();
        }

        public PagedCollection(DataServiceContextWrapper context, DataServiceCollection<TConcrete> collection)
        {
            _context = context;
            _currentPage = (IReadOnlyList<TElement>)collection;
            if (_currentPage != null)
            {
                _continuation = collection.Continuation;
            }
        }

        public bool MorePagesAvailable
        {
            get
            {
                return _continuation != null;
            }
        }

        public System.Collections.Generic.IReadOnlyList<TElement> CurrentPage
        {
            get
            {
                return _currentPage;
            }
        }

        public async System.Threading.Tasks.Task<IPagedCollection<TElement>> GetNextPageAsync()
        {
            if (_continuation != null)
            {
                var task =  _context.ExecuteAsync<TConcrete, TElement>(_continuation);

                return new PagedCollection<TElement, TConcrete>(_context, await task);
            }

            return (IPagedCollection<TElement>)null;
        }

        IReadOnlyList<object> IPagedCollection.CurrentPage
        {
            get { return (IReadOnlyList<object>)this.CurrentPage; }
        }

        async System.Threading.Tasks.Task<IPagedCollection> IPagedCollection.GetNextPageAsync()
        {
            var retval = await GetNextPageAsync();

            return (PagedCollection<TElement, TConcrete>)retval;
        }
    }

    public interface IStreamFetcher
    {
        string ContentType { get; }
        global::System.Threading.Tasks.Task<global::Microsoft.OData.Client.DataServiceStreamResponse> DownloadAsync();
		/// <param name="dontSave">true to delay saving until batch is saved; false to save immediately.</param>
        global::System.Threading.Tasks.Task UploadAsync(global::System.IO.Stream stream, string contentType, bool dontSave = false, bool closeStream = false);
    }
        
    internal class StreamFetcher : IStreamFetcher
    {
        private global::Microsoft.OData.Client.DataServiceStreamLink _link;
        private EntityBase _entity;
        private string _propertyName;
        private DataServiceContextWrapper _context;

        public string ContentType
        {
            get
            {
                return _link.ContentType;
            }
        }

        internal StreamFetcher(DataServiceContextWrapper context, EntityBase entity, string propertyName, global::Microsoft.OData.Client.DataServiceStreamLink link)
        {
            _context = context;
            _entity = entity;
            _link = link;
            _propertyName = propertyName;
        }

		/// <param name="dontSave">true to delay saving until batch is saved; false to save immediately.</param>
        public global::System.Threading.Tasks.Task UploadAsync(global::System.IO.Stream stream, string contentType, bool dontSave = false, bool closeStream = false)
        {
            var args = new global::Microsoft.OData.Client.DataServiceRequestArgs
            {
                ContentType = contentType
            };

            if (_link.ETag != null)
            {
                args.Headers.Add("If-Match", _link.ETag);
            }

            _context.SetSaveStream(_entity, _propertyName, stream, closeStream, args);

            _entity.OnPropertyChanged(_propertyName);

            return _entity.SaveAsNeeded(dontSave);
        }

        public global::System.Threading.Tasks.Task<global::Microsoft.OData.Client.DataServiceStreamResponse> DownloadAsync()
        {
            return _context.GetReadStreamAsync(_entity, _propertyName, ContentType);
        }
    }
}
namespace Microsoft.Office365.SharePoint.CoreServices
{
	using System;
	using global::Microsoft.OData.Core;
    using Microsoft.Office365.SharePoint.CoreServices.Extensions;
    [Microsoft.Office365.SharePoint.CoreServices.Extensions.LowerCaseProperty]
    public partial interface ISharePointClient
    {
        [Microsoft.Office365.SharePoint.CoreServices.Extensions.LowerCaseProperty]
        global::Microsoft.Office365.SharePoint.FileServices.IItemCollection Files
        {
            get; 
        }

        [Microsoft.Office365.SharePoint.CoreServices.Extensions.LowerCaseProperty]
        global::Microsoft.Office365.SharePoint.FileServices.IDriveFetcher Drive
        {
            get; 
        }
    }

    public partial class SharePointClient : ISharePointClient
    {
        private const string _path = "";

        public Microsoft.Office365.SharePoint.CoreServices.Extensions.DataServiceContextWrapper Context
        {
            get;
            private set;
        }

        internal Microsoft.Office365.SharePoint.CoreServices.Extensions.DataServiceContextWrapper GetContext ()
        { 
            return Context;
        }

        private string GetPath(string propertyName)
        {
            return propertyName == null ? _path : _path + "/" + propertyName;
        }

        public SharePointClient(global::System.Uri serviceRoot, global::System.Func<global::System.Threading.Tasks.Task<string>> accessTokenGetter)
        {
            Context = new Microsoft.Office365.SharePoint.CoreServices.Extensions.DataServiceContextWrapper(serviceRoot, global::Microsoft.OData.Client.ODataProtocolVersion.V4, accessTokenGetter);
            Context.MergeOption = global::Microsoft.OData.Client.MergeOption.OverwriteChanges;
            Context.ResolveName = new global::System.Func<global::System.Type, string>(this.ResolveNameFromType);
            Context.ResolveType = new global::System.Func<string, global::System.Type>(this.ResolveTypeFromName);
            this.OnContextCreated();
            Context.Format.LoadServiceModel = GeneratedEdmModel.GetInstance;
            Context.Format.UseJson();
        }
        partial void OnContextCreated();
        /// <summary>
        /// Since the namespace configured for this service reference
        /// in Visual Studio is different from the one indicated in the
        /// server schema, use type-mappers to map between the two.
        /// </summary>
        private global::System.Type ResolveTypeFromName(string typeName)
        {
            global::System.Type resolvedType;

            resolvedType = Context.DefaultResolveTypeInternal(typeName, "Microsoft.CoreServices", "Microsoft.Office365.SharePoint.CoreServices");
            if (resolvedType != null)
            {
                return resolvedType;
            }

            resolvedType = Context.DefaultResolveTypeInternal(typeName, "Microsoft.FileServices", "Microsoft.Office365.SharePoint.FileServices");
            if (resolvedType != null)
            {
                return resolvedType;
            }

            return null;
        }
        /// <summary>
        /// Since the namespace configured for this service reference
        /// in Visual Studio is different from the one indicated in the
        /// server schema, use type-mappers to map between the two.
        /// </summary>
        private string ResolveNameFromType(global::System.Type clientType)
        {
            string resolvedType;

            resolvedType = Context.DefaultResolveNameInternal(clientType,  "Microsoft.CoreServices", "Microsoft.Office365.SharePoint.CoreServices");
            if (!string.IsNullOrEmpty(resolvedType))
            {
                return resolvedType;
            }

            resolvedType = Context.DefaultResolveNameInternal(clientType,  "Microsoft.FileServices", "Microsoft.Office365.SharePoint.FileServices");
            if (!string.IsNullOrEmpty(resolvedType))
            {
                return resolvedType;
            }

            return clientType.FullName;
        }

        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never),
            global::System.Obsolete("Use Files instead")]
        public global::Microsoft.Office365.SharePoint.FileServices.IItemCollection files
        {
            get
            {
                return this.Files;
            }
        }

		[Microsoft.Office365.SharePoint.CoreServices.Extensions.LowerCaseProperty]

        // tag0003
        public global::Microsoft.Office365.SharePoint.FileServices.IItemCollection Files
        {
            get
            {
                if ((this._files == null))
                {
                    this._files = new global::Microsoft.Office365.SharePoint.FileServices.ItemCollection(
                        Context != null ? Context.CreateQuery<global::Microsoft.Office365.SharePoint.FileServices.Item>(GetPath("files")) : null,
                        Context, 
                        this, 
                        GetPath("files"));
                }

                return this._files;
            }
        }

        private global::Microsoft.Office365.SharePoint.FileServices.IItemCollection _files;
        /// <summary>
        /// There are no comments for files in the schema.
        /// </summary>
        public void AddTofiles(global::Microsoft.Office365.SharePoint.FileServices.Item item)
        {
            Context.AddObject("files", item);
        }
        
		        
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never),
            global::System.Obsolete("Use Drive instead")]
        public global::Microsoft.Office365.SharePoint.FileServices.IDriveFetcher drive
        {
            get
            {
                return this.Drive;
            }
            set
            {
                this.Drive = value;
            }
        }		

		[Microsoft.Office365.SharePoint.CoreServices.Extensions.LowerCaseProperty]

        /// <summary>
        /// There are no comments for Drive in the schema.
        /// </summary>
        public global::Microsoft.Office365.SharePoint.FileServices.IDriveFetcher Drive
        {
            get
            {
                if ((this._drive == null))
                {
                    this._drive = new global::Microsoft.Office365.SharePoint.FileServices.DriveFetcher();
                    this._drive.Initialize(Context, "drive");

                }
                return this._drive;
            }

			private set { this._drive = (global::Microsoft.Office365.SharePoint.FileServices.DriveFetcher)value; } 
        }
        private global::Microsoft.Office365.SharePoint.FileServices.DriveFetcher _drive;
        
        private abstract class GeneratedEdmModel
        {
            
            private static global::Microsoft.OData.Edm.IEdmModel ParsedModel = LoadModelFromString();
            
            private const string Edmx = @"<edmx:Edmx Version=""4.0"" xmlns:edmx=""http://docs.oasis-open.org/odata/ns/edmx"">
  <edmx:DataServices>
    <Schema Namespace=""Microsoft.CoreServices"" xmlns=""http://docs.oasis-open.org/odata/ns/edm"">
      <EntityContainer Name=""EntityContainer"">
        <Singleton Name=""drive"" Type=""Microsoft.FileServices.Drive"" />
        <EntitySet Name=""files"" EntityType=""Microsoft.FileServices.Item"" />
      </EntityContainer>
    </Schema>
    <Schema Namespace=""Microsoft.FileServices"" xmlns=""http://docs.oasis-open.org/odata/ns/edm"">
      <ComplexType Name=""DriveQuota"">
        <Property Name=""deleted"" Type=""Edm.Int64"" Nullable=""false"" />
        <Property Name=""remaining"" Type=""Edm.Int64"" Nullable=""false"" />
        <Property Name=""state"" Type=""Edm.String"" />
        <Property Name=""total"" Type=""Edm.Int64"" Nullable=""false"" />
      </ComplexType>
      <ComplexType Name=""IdentitySet"">
        <Property Name=""application"" Type=""Microsoft.FileServices.Identity"" />
        <Property Name=""user"" Type=""Microsoft.FileServices.Identity"" />
      </ComplexType>
      <ComplexType Name=""Identity"">
        <Property Name=""id"" Type=""Edm.String"" />
        <Property Name=""displayName"" Type=""Edm.String"" />
      </ComplexType>
      <ComplexType Name=""ItemReference"">
        <Property Name=""driveId"" Type=""Edm.String"" />
        <Property Name=""id"" Type=""Edm.String"" />
        <Property Name=""path"" Type=""Edm.String"" />
      </ComplexType>
      <EntityType Name=""Drive"">
        <Key>
          <PropertyRef Name=""id"" />
        </Key>
        <Property Name=""id"" Type=""Edm.String"" Nullable=""false"" />
        <Property Name=""owner"" Type=""Microsoft.FileServices.Identity"" />
        <Property Name=""quota"" Type=""Microsoft.FileServices.DriveQuota"" />
      </EntityType>
      <EntityType Name=""Item"" Abstract=""true"">
        <Key>
          <PropertyRef Name=""id"" />
        </Key>
        <Property Name=""createdBy"" Type=""Microsoft.FileServices.IdentitySet"" />
        <Property Name=""eTag"" Type=""Edm.String"" />
        <Property Name=""id"" Type=""Edm.String"" Nullable=""false"" />
        <Property Name=""lastModifiedBy"" Type=""Microsoft.FileServices.IdentitySet"" />
        <Property Name=""name"" Type=""Edm.String"" />
        <Property Name=""parentReference"" Type=""Microsoft.FileServices.ItemReference"" />
        <Property Name=""size"" Type=""Edm.Int64"" Nullable=""false"" />
        <Property Name=""dateTimeCreated"" Type=""Edm.DateTimeOffset"" Nullable=""false"" />
        <Property Name=""dateTimeLastModified"" Type=""Edm.DateTimeOffset"" Nullable=""false"" />
        <Property Name=""type"" Type=""Edm.String"" />
        <Property Name=""webUrl"" Type=""Edm.String"" />
      </EntityType>
      <EntityType Name=""File"" BaseType=""Microsoft.FileServices.Item"">
        <Property Name=""contentUrl"" Type=""Edm.String"" />
      </EntityType>
      <EntityType Name=""Folder"" BaseType=""Microsoft.FileServices.Item"">
        <Property Name=""childCount"" Type=""Edm.Int32"" Nullable=""false"" />
        <NavigationProperty Name=""children"" Type=""Collection(Microsoft.FileServices.Item)"" ContainsTarget=""true"" />
      </EntityType>
      <Function Name=""content"" IsBound=""true"" IsComposable=""true"">
        <Parameter Name=""this"" Type=""Microsoft.FileServices.File"" />
        <ReturnType Type=""Edm.Stream"" />
      </Function>
      <Action Name=""copy"" IsBound=""true"">
        <Parameter Name=""this"" Type=""Microsoft.FileServices.File"" />
        <Parameter Name=""destFolderId"" Type=""Edm.String"" />
        <Parameter Name=""destFolderPath"" Type=""Edm.String"" />
        <Parameter Name=""newName"" Type=""Edm.String"" />
        <ReturnType Type=""Microsoft.FileServices.File"" />
      </Action>
      <Action Name=""uploadContent"" IsBound=""true"">
        <Parameter Name=""this"" Type=""Microsoft.FileServices.File"" />
        <Parameter Name=""contentStream"" Type=""Edm.Stream"" />
      </Action>
      <Action Name=""copy"" IsBound=""true"">
        <Parameter Name=""this"" Type=""Microsoft.FileServices.Folder"" />
        <Parameter Name=""destFolderId"" Type=""Edm.String"" />
        <Parameter Name=""destFolderPath"" Type=""Edm.String"" />
        <Parameter Name=""newName"" Type=""Edm.String"" />
        <ReturnType Type=""Microsoft.FileServices.Folder"" />
      </Action>
      <Function Name=""getByPath"" IsBound=""true"" IsComposable=""true"">
        <Parameter Name=""this"" Type=""Collection(Microsoft.FileServices.Item)"" />
        <Parameter Name=""path"" Type=""Edm.String"" />
        <ReturnType Type=""Microsoft.FileServices.Item"" />
      </Function>
    </Schema>
  </edmx:DataServices>
</edmx:Edmx>";
            
            public static global::Microsoft.OData.Edm.IEdmModel GetInstance()
            {
                return ParsedModel;
            }
            
            private static global::Microsoft.OData.Edm.IEdmModel LoadModelFromString()
            {
                global::System.Xml.XmlReader reader = CreateXmlReader(Edmx);
                try
                {
                    return global::Microsoft.OData.Edm.Csdl.EdmxReader.Parse(reader);
                }
                finally
                {
                    ((global::System.IDisposable)(reader)).Dispose();
                }
            }
            
            private static global::System.Xml.XmlReader CreateXmlReader(string edmxToParse)
            {
                return global::System.Xml.XmlReader.Create(new global::System.IO.StringReader(edmxToParse));
            }
        }
    }
}
namespace Microsoft.Office365.SharePoint.FileServices
{
	using System;
	using global::Microsoft.OData.Core;
    using Microsoft.Office365.SharePoint.CoreServices.Extensions;
    public partial class DriveQuota: Microsoft.Office365.SharePoint.CoreServices.Extensions.ComplexTypeBase 
    {

        public DriveQuota() : base() 
        {

        }
        // tag0001

        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never),
            global::System.Obsolete("Use Deleted instead")]
        public long deleted
        {
            get
            {
                return this.Deleted;
            }
            set
            {
                this.Deleted = (long)value;
            }
        }
		[Microsoft.Office365.SharePoint.CoreServices.Extensions.LowerCaseProperty]
        // tag0002
        
        public long Deleted
        {
            get
            {
                return this._deleted;
            }
            set
            {
                if (this._deleted != value)
                {
                    this._deleted = value;
                    OnPropertyChanged("deleted");
                }
            }
        }
        
        private long _deleted;


        // tag0001

        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never),
            global::System.Obsolete("Use Remaining instead")]
        public long remaining
        {
            get
            {
                return this.Remaining;
            }
            set
            {
                this.Remaining = (long)value;
            }
        }
		[Microsoft.Office365.SharePoint.CoreServices.Extensions.LowerCaseProperty]
        // tag0002
        
        public long Remaining
        {
            get
            {
                return this._remaining;
            }
            set
            {
                if (this._remaining != value)
                {
                    this._remaining = value;
                    OnPropertyChanged("remaining");
                }
            }
        }
        
        private long _remaining;


        // tag0001

        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never),
            global::System.Obsolete("Use State instead")]
        public string state
        {
            get
            {
                return this.State;
            }
            set
            {
                this.State = (string)value;
            }
        }
		[Microsoft.Office365.SharePoint.CoreServices.Extensions.LowerCaseProperty]
        // tag0002
        
        public string State
        {
            get
            {
                return this._state;
            }
            set
            {
                if (this._state != value)
                {
                    this._state = value;
                    OnPropertyChanged("state");
                }
            }
        }
        
        private string _state;


        // tag0001

        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never),
            global::System.Obsolete("Use Total instead")]
        public long total
        {
            get
            {
                return this.Total;
            }
            set
            {
                this.Total = (long)value;
            }
        }
		[Microsoft.Office365.SharePoint.CoreServices.Extensions.LowerCaseProperty]
        // tag0002
        
        public long Total
        {
            get
            {
                return this._total;
            }
            set
            {
                if (this._total != value)
                {
                    this._total = value;
                    OnPropertyChanged("total");
                }
            }
        }
        
        private long _total;


    }

    public partial class IdentitySet: Microsoft.Office365.SharePoint.CoreServices.Extensions.ComplexTypeBase 
    {

        public IdentitySet() : base() 
        {

        }
        // tag0001

        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never),
            global::System.Obsolete("Use Application instead")]
        public global::Microsoft.Office365.SharePoint.FileServices.Identity application
        {
            get
            {
                return this.Application;
            }
            set
            {
                this.Application = (global::Microsoft.Office365.SharePoint.FileServices.Identity)value;
            }
        }
		[Microsoft.Office365.SharePoint.CoreServices.Extensions.LowerCaseProperty]
        // tag0002
        
        public global::Microsoft.Office365.SharePoint.FileServices.Identity Application
        {
            get
            {
                return this._application;
            }
            set
            {
                if (this._application != value)
                {
                    this._application = value;
                    OnPropertyChanged("application");
                }
            }
        }
        
        private global::Microsoft.Office365.SharePoint.FileServices.Identity _application;


        // tag0001

        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never),
            global::System.Obsolete("Use User instead")]
        public global::Microsoft.Office365.SharePoint.FileServices.Identity user
        {
            get
            {
                return this.User;
            }
            set
            {
                this.User = (global::Microsoft.Office365.SharePoint.FileServices.Identity)value;
            }
        }
		[Microsoft.Office365.SharePoint.CoreServices.Extensions.LowerCaseProperty]
        // tag0002
        
        public global::Microsoft.Office365.SharePoint.FileServices.Identity User
        {
            get
            {
                return this._user;
            }
            set
            {
                if (this._user != value)
                {
                    this._user = value;
                    OnPropertyChanged("user");
                }
            }
        }
        
        private global::Microsoft.Office365.SharePoint.FileServices.Identity _user;


    }

    public partial class Identity: Microsoft.Office365.SharePoint.CoreServices.Extensions.ComplexTypeBase 
    {

        public Identity() : base() 
        {

        }
        // tag0001

        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never),
            global::System.Obsolete("Use Id instead")]
        public string id
        {
            get
            {
                return this.Id;
            }
            set
            {
                this.Id = (string)value;
            }
        }
		[Microsoft.Office365.SharePoint.CoreServices.Extensions.LowerCaseProperty]
        // tag0002
        
        public string Id
        {
            get
            {
                return this._id;
            }
            set
            {
                if (this._id != value)
                {
                    this._id = value;
                    OnPropertyChanged("id");
                }
            }
        }
        
        private string _id;


        // tag0001

        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never),
            global::System.Obsolete("Use DisplayName instead")]
        public string displayName
        {
            get
            {
                return this.DisplayName;
            }
            set
            {
                this.DisplayName = (string)value;
            }
        }
		[Microsoft.Office365.SharePoint.CoreServices.Extensions.LowerCaseProperty]
        // tag0002
        
        public string DisplayName
        {
            get
            {
                return this._displayName;
            }
            set
            {
                if (this._displayName != value)
                {
                    this._displayName = value;
                    OnPropertyChanged("displayName");
                }
            }
        }
        
        private string _displayName;


    }

    public partial class ItemReference: Microsoft.Office365.SharePoint.CoreServices.Extensions.ComplexTypeBase 
    {

        public ItemReference() : base() 
        {

        }
        // tag0001

        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never),
            global::System.Obsolete("Use DriveId instead")]
        public string driveId
        {
            get
            {
                return this.DriveId;
            }
            set
            {
                this.DriveId = (string)value;
            }
        }
		[Microsoft.Office365.SharePoint.CoreServices.Extensions.LowerCaseProperty]
        // tag0002
        
        public string DriveId
        {
            get
            {
                return this._driveId;
            }
            set
            {
                if (this._driveId != value)
                {
                    this._driveId = value;
                    OnPropertyChanged("driveId");
                }
            }
        }
        
        private string _driveId;


        // tag0001

        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never),
            global::System.Obsolete("Use Id instead")]
        public string id
        {
            get
            {
                return this.Id;
            }
            set
            {
                this.Id = (string)value;
            }
        }
		[Microsoft.Office365.SharePoint.CoreServices.Extensions.LowerCaseProperty]
        // tag0002
        
        public string Id
        {
            get
            {
                return this._id;
            }
            set
            {
                if (this._id != value)
                {
                    this._id = value;
                    OnPropertyChanged("id");
                }
            }
        }
        
        private string _id;


        // tag0001

        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never),
            global::System.Obsolete("Use Path instead")]
        public string path
        {
            get
            {
                return this.Path;
            }
            set
            {
                this.Path = (string)value;
            }
        }
		[Microsoft.Office365.SharePoint.CoreServices.Extensions.LowerCaseProperty]
        // tag0002
        
        public string Path
        {
            get
            {
                return this._path;
            }
            set
            {
                if (this._path != value)
                {
                    this._path = value;
                    OnPropertyChanged("path");
                }
            }
        }
        
        private string _path;


    }

    [Microsoft.Office365.SharePoint.CoreServices.Extensions.LowerCaseProperty]
    public partial interface IDriveFetcher
    {
   
        new global::System.Threading.Tasks.Task<IDrive> ExecuteAsync();

        new IDriveFetcher Expand<TTarget>(System.Linq.Expressions.Expression<global::System.Func<IDrive, TTarget>> navigationPropertyAccessor);

    }

    [Microsoft.Office365.SharePoint.CoreServices.Extensions.LowerCaseProperty]
    public partial interface IDrive: Microsoft.Office365.SharePoint.CoreServices.Extensions.IEntityBase
    {
        [Microsoft.Office365.SharePoint.CoreServices.Extensions.LowerCaseProperty]
        string Id
        {
            get; set;
        }
        [Microsoft.Office365.SharePoint.CoreServices.Extensions.LowerCaseProperty]
        global::Microsoft.Office365.SharePoint.FileServices.Identity Owner
        {
            get; set;
        }
        [Microsoft.Office365.SharePoint.CoreServices.Extensions.LowerCaseProperty]
        global::Microsoft.Office365.SharePoint.FileServices.DriveQuota Quota
        {
            get; set;
        }
    }

    internal partial class DriveFetcher : Microsoft.Office365.SharePoint.CoreServices.Extensions.RestShallowObjectFetcher , IDriveFetcher
    {

        public async global::System.Threading.Tasks.Task<IDrive> ExecuteAsync()
        {
            return await EnsureQuery().ExecuteSingleAsync();
        }
         
        public IDriveFetcher Expand<TTarget>(System.Linq.Expressions.Expression<global::System.Func<IDrive, TTarget>> navigationPropertyAccessor)
        {
            return new DriveFetcher
            {
                _query = EnsureQuery().Expand(navigationPropertyAccessor)
            };
        }

        private IReadOnlyQueryableSet<IDrive> EnsureQuery()
        {
            if (this._query == null)
            {
                this._query = new global::Microsoft.Office365.SharePoint.CoreServices.Extensions.ReadOnlyQueryableSet<IDrive>(Context.CreateQuery<Drive>(GetPath(null)), Context);
            }

            return this._query;
        }

        private global::Microsoft.Office365.SharePoint.CoreServices.Extensions.IReadOnlyQueryableSet<IDrive> _query;

    }

    [global::Microsoft.OData.Client.Key("Id")]
    public partial class Drive: global::Microsoft.Office365.SharePoint.CoreServices.Extensions.EntityBase , IDrive, IDriveFetcher
    {
        public Drive() : base() 
        {

        }
        // tag0001

        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never),
            global::System.Obsolete("Use Id instead")]
        public string id
        {
            get
            {
                return this.Id;
            }
            set
            {
                this.Id = (string)value;
            }
        }
		[Microsoft.Office365.SharePoint.CoreServices.Extensions.LowerCaseProperty]
        // tag0002
        
        public string Id
        {
            get
            {
                return this._id;
            }
            set
            {
                if (this._id != value)
                {
                    this._id = value;
                    OnPropertyChanged("id");
                }
            }
        }
        
        private string _id;


        // tag0001

        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never),
            global::System.Obsolete("Use Owner instead")]
        public global::Microsoft.Office365.SharePoint.FileServices.Identity owner
        {
            get
            {
                return this.Owner;
            }
            set
            {
                this.Owner = (global::Microsoft.Office365.SharePoint.FileServices.Identity)value;
            }
        }
		[Microsoft.Office365.SharePoint.CoreServices.Extensions.LowerCaseProperty]
        // tag0002
        
        public global::Microsoft.Office365.SharePoint.FileServices.Identity Owner
        {
            get
            {
                return this._owner;
            }
            set
            {
                if (this._owner != value)
                {
                    this._owner = value;
                    OnPropertyChanged("owner");
                }
            }
        }
        
        private global::Microsoft.Office365.SharePoint.FileServices.Identity _owner;


        // tag0001

        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never),
            global::System.Obsolete("Use Quota instead")]
        public global::Microsoft.Office365.SharePoint.FileServices.DriveQuota quota
        {
            get
            {
                return this.Quota;
            }
            set
            {
                this.Quota = (global::Microsoft.Office365.SharePoint.FileServices.DriveQuota)value;
            }
        }
		[Microsoft.Office365.SharePoint.CoreServices.Extensions.LowerCaseProperty]
        // tag0002
        
        public global::Microsoft.Office365.SharePoint.FileServices.DriveQuota Quota
        {
            get
            {
                return this._quota;
            }
            set
            {
                if (this._quota != value)
                {
                    this._quota = value;
                    OnPropertyChanged("quota");
                }
            }
        }
        
        private global::Microsoft.Office365.SharePoint.FileServices.DriveQuota _quota;



        global::System.Threading.Tasks.Task<IDrive> IDriveFetcher.ExecuteAsync()
        {
            var tsc = new global::System.Threading.Tasks.TaskCompletionSource<IDrive> ();
            tsc.SetResult(this);
            return tsc.Task;
        }

        IDriveFetcher IDriveFetcher.Expand<TTarget>(System.Linq.Expressions.Expression<global::System.Func<IDrive, TTarget>> navigationPropertyAccessor)
        {
            return this;
        }
    }

    [Microsoft.Office365.SharePoint.CoreServices.Extensions.LowerCaseProperty]
    public partial interface IItemFetcher
    {

        IFileFetcher ToFile();

        IFolderFetcher ToFolder();
    }

    [Microsoft.Office365.SharePoint.CoreServices.Extensions.LowerCaseProperty]
    public partial interface IItem: Microsoft.Office365.SharePoint.CoreServices.Extensions.IEntityBase
    {
        [Microsoft.Office365.SharePoint.CoreServices.Extensions.LowerCaseProperty]
        global::Microsoft.Office365.SharePoint.FileServices.IdentitySet CreatedBy
        {
            get; set;
        }
        [Microsoft.Office365.SharePoint.CoreServices.Extensions.LowerCaseProperty]
        string ETag
        {
            get; set;
        }
        [Microsoft.Office365.SharePoint.CoreServices.Extensions.LowerCaseProperty]
        string Id
        {
            get; set;
        }
        [Microsoft.Office365.SharePoint.CoreServices.Extensions.LowerCaseProperty]
        global::Microsoft.Office365.SharePoint.FileServices.IdentitySet LastModifiedBy
        {
            get; set;
        }
        [Microsoft.Office365.SharePoint.CoreServices.Extensions.LowerCaseProperty]
        string Name
        {
            get; set;
        }
        [Microsoft.Office365.SharePoint.CoreServices.Extensions.LowerCaseProperty]
        global::Microsoft.Office365.SharePoint.FileServices.ItemReference ParentReference
        {
            get; set;
        }
        [Microsoft.Office365.SharePoint.CoreServices.Extensions.LowerCaseProperty]
        long Size
        {
            get; set;
        }
        [Microsoft.Office365.SharePoint.CoreServices.Extensions.LowerCaseProperty]
        global::System.DateTimeOffset DateTimeCreated
        {
            get; set;
        }
        [Microsoft.Office365.SharePoint.CoreServices.Extensions.LowerCaseProperty]
        global::System.DateTimeOffset DateTimeLastModified
        {
            get; set;
        }
        [Microsoft.Office365.SharePoint.CoreServices.Extensions.LowerCaseProperty]
        string Type
        {
            get; set;
        }
        [Microsoft.Office365.SharePoint.CoreServices.Extensions.LowerCaseProperty]
        string WebUrl
        {
            get; set;
        }
    }

    internal partial class ItemFetcher : Microsoft.Office365.SharePoint.CoreServices.Extensions.RestShallowObjectFetcher , IItemFetcher
    {

        public IFileFetcher ToFile()
        {
             var retVal = new FileFetcher();
             retVal.Initialize(Context, GetPath(null));
             return retVal;
        }


        public IFolderFetcher ToFolder()
        {
             var retVal = new FolderFetcher();
             retVal.Initialize(Context, GetPath(null));
             return retVal;
        }

    }

    [global::Microsoft.OData.Client.Key("Id")]
    abstract public partial class Item: global::Microsoft.Office365.SharePoint.CoreServices.Extensions.EntityBase , IItem, IItemFetcher
    {
        public Item() : base() 
        {

        }
        // tag0001

        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never),
            global::System.Obsolete("Use CreatedBy instead")]
        public global::Microsoft.Office365.SharePoint.FileServices.IdentitySet createdBy
        {
            get
            {
                return this.CreatedBy;
            }
            set
            {
                this.CreatedBy = (global::Microsoft.Office365.SharePoint.FileServices.IdentitySet)value;
            }
        }
		[Microsoft.Office365.SharePoint.CoreServices.Extensions.LowerCaseProperty]
        // tag0002
        
        public global::Microsoft.Office365.SharePoint.FileServices.IdentitySet CreatedBy
        {
            get
            {
                return this._createdBy;
            }
            set
            {
                if (this._createdBy != value)
                {
                    this._createdBy = value;
                    OnPropertyChanged("createdBy");
                }
            }
        }
        
        private global::Microsoft.Office365.SharePoint.FileServices.IdentitySet _createdBy;


        // tag0001

        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never),
            global::System.Obsolete("Use ETag instead")]
        public string eTag
        {
            get
            {
                return this.ETag;
            }
            set
            {
                this.ETag = (string)value;
            }
        }
		[Microsoft.Office365.SharePoint.CoreServices.Extensions.LowerCaseProperty]
        // tag0002
        
        public string ETag
        {
            get
            {
                return this._eTag;
            }
            set
            {
                if (this._eTag != value)
                {
                    this._eTag = value;
                    OnPropertyChanged("eTag");
                }
            }
        }
        
        private string _eTag;


        // tag0001

        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never),
            global::System.Obsolete("Use Id instead")]
        public string id
        {
            get
            {
                return this.Id;
            }
            set
            {
                this.Id = (string)value;
            }
        }
		[Microsoft.Office365.SharePoint.CoreServices.Extensions.LowerCaseProperty]
        // tag0002
        
        public string Id
        {
            get
            {
                return this._id;
            }
            set
            {
                if (this._id != value)
                {
                    this._id = value;
                    OnPropertyChanged("id");
                }
            }
        }
        
        private string _id;


        // tag0001

        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never),
            global::System.Obsolete("Use LastModifiedBy instead")]
        public global::Microsoft.Office365.SharePoint.FileServices.IdentitySet lastModifiedBy
        {
            get
            {
                return this.LastModifiedBy;
            }
            set
            {
                this.LastModifiedBy = (global::Microsoft.Office365.SharePoint.FileServices.IdentitySet)value;
            }
        }
		[Microsoft.Office365.SharePoint.CoreServices.Extensions.LowerCaseProperty]
        // tag0002
        
        public global::Microsoft.Office365.SharePoint.FileServices.IdentitySet LastModifiedBy
        {
            get
            {
                return this._lastModifiedBy;
            }
            set
            {
                if (this._lastModifiedBy != value)
                {
                    this._lastModifiedBy = value;
                    OnPropertyChanged("lastModifiedBy");
                }
            }
        }
        
        private global::Microsoft.Office365.SharePoint.FileServices.IdentitySet _lastModifiedBy;


        // tag0001

        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never),
            global::System.Obsolete("Use Name instead")]
        public string name
        {
            get
            {
                return this.Name;
            }
            set
            {
                this.Name = (string)value;
            }
        }
		[Microsoft.Office365.SharePoint.CoreServices.Extensions.LowerCaseProperty]
        // tag0002
        
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if (this._name != value)
                {
                    this._name = value;
                    OnPropertyChanged("name");
                }
            }
        }
        
        private string _name;


        // tag0001

        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never),
            global::System.Obsolete("Use ParentReference instead")]
        public global::Microsoft.Office365.SharePoint.FileServices.ItemReference parentReference
        {
            get
            {
                return this.ParentReference;
            }
            set
            {
                this.ParentReference = (global::Microsoft.Office365.SharePoint.FileServices.ItemReference)value;
            }
        }
		[Microsoft.Office365.SharePoint.CoreServices.Extensions.LowerCaseProperty]
        // tag0002
        
        public global::Microsoft.Office365.SharePoint.FileServices.ItemReference ParentReference
        {
            get
            {
                return this._parentReference;
            }
            set
            {
                if (this._parentReference != value)
                {
                    this._parentReference = value;
                    OnPropertyChanged("parentReference");
                }
            }
        }
        
        private global::Microsoft.Office365.SharePoint.FileServices.ItemReference _parentReference;


        // tag0001

        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never),
            global::System.Obsolete("Use Size instead")]
        public long size
        {
            get
            {
                return this.Size;
            }
            set
            {
                this.Size = (long)value;
            }
        }
		[Microsoft.Office365.SharePoint.CoreServices.Extensions.LowerCaseProperty]
        // tag0002
        
        public long Size
        {
            get
            {
                return this._size;
            }
            set
            {
                if (this._size != value)
                {
                    this._size = value;
                    OnPropertyChanged("size");
                }
            }
        }
        
        private long _size;


        // tag0001

        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never),
            global::System.Obsolete("Use DateTimeCreated instead")]
        public global::System.DateTimeOffset dateTimeCreated
        {
            get
            {
                return this.DateTimeCreated;
            }
            set
            {
                this.DateTimeCreated = (global::System.DateTimeOffset)value;
            }
        }
		[Microsoft.Office365.SharePoint.CoreServices.Extensions.LowerCaseProperty]
        // tag0002
        
        public global::System.DateTimeOffset DateTimeCreated
        {
            get
            {
                return this._dateTimeCreated;
            }
            set
            {
                if (this._dateTimeCreated != value)
                {
                    this._dateTimeCreated = value;
                    OnPropertyChanged("dateTimeCreated");
                }
            }
        }
        
        private global::System.DateTimeOffset _dateTimeCreated;


        // tag0001

        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never),
            global::System.Obsolete("Use DateTimeLastModified instead")]
        public global::System.DateTimeOffset dateTimeLastModified
        {
            get
            {
                return this.DateTimeLastModified;
            }
            set
            {
                this.DateTimeLastModified = (global::System.DateTimeOffset)value;
            }
        }
		[Microsoft.Office365.SharePoint.CoreServices.Extensions.LowerCaseProperty]
        // tag0002
        
        public global::System.DateTimeOffset DateTimeLastModified
        {
            get
            {
                return this._dateTimeLastModified;
            }
            set
            {
                if (this._dateTimeLastModified != value)
                {
                    this._dateTimeLastModified = value;
                    OnPropertyChanged("dateTimeLastModified");
                }
            }
        }
        
        private global::System.DateTimeOffset _dateTimeLastModified;


        // tag0001

        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never),
            global::System.Obsolete("Use Type instead")]
        public string type
        {
            get
            {
                return this.Type;
            }
            set
            {
                this.Type = (string)value;
            }
        }
		[Microsoft.Office365.SharePoint.CoreServices.Extensions.LowerCaseProperty]
        // tag0002
        
        public string Type
        {
            get
            {
                return this._type;
            }
            set
            {
                if (this._type != value)
                {
                    this._type = value;
                    OnPropertyChanged("type");
                }
            }
        }
        
        private string _type;


        // tag0001

        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never),
            global::System.Obsolete("Use WebUrl instead")]
        public string webUrl
        {
            get
            {
                return this.WebUrl;
            }
            set
            {
                this.WebUrl = (string)value;
            }
        }
		[Microsoft.Office365.SharePoint.CoreServices.Extensions.LowerCaseProperty]
        // tag0002
        
        public string WebUrl
        {
            get
            {
                return this._webUrl;
            }
            set
            {
                if (this._webUrl != value)
                {
                    this._webUrl = value;
                    OnPropertyChanged("webUrl");
                }
            }
        }
        
        private string _webUrl;


        IFileFetcher IItemFetcher.ToFile()
        {
             return (IFileFetcher) this;
        }

        IFolderFetcher IItemFetcher.ToFolder()
        {
             return (IFolderFetcher) this;
        }

    }

    [Microsoft.Office365.SharePoint.CoreServices.Extensions.LowerCaseProperty]
    public partial interface IFileFetcher : IItemFetcher
    {
   
        new global::System.Threading.Tasks.Task<IFile> ExecuteAsync();

        new IFileFetcher Expand<TTarget>(System.Linq.Expressions.Expression<global::System.Func<IFile, TTarget>> navigationPropertyAccessor);

// tag0009
        global::System.Threading.Tasks.Task<global::Microsoft.OData.Client.DataServiceStreamLink> ContentAsync();
// tag0009
        global::System.Threading.Tasks.Task<global::Microsoft.Office365.SharePoint.FileServices.IFile> CopyAsync(string destFolderId, string destFolderPath, string newName);
// tag0009
         global::System.Threading.Tasks.Task UploadContentAsync(global::Microsoft.OData.Client.DataServiceStreamLink contentStream);
    }

    [Microsoft.Office365.SharePoint.CoreServices.Extensions.LowerCaseProperty]
    public partial interface IFile:  IItem
    {
        [Microsoft.Office365.SharePoint.CoreServices.Extensions.LowerCaseProperty]
        string ContentUrl
        {
            get; set;
        }
// tag0009
        global::System.Threading.Tasks.Task<global::Microsoft.OData.Client.DataServiceStreamLink> ContentAsync();
// tag0009
        global::System.Threading.Tasks.Task<global::Microsoft.Office365.SharePoint.FileServices.IFile> CopyAsync(string destFolderId, string destFolderPath, string newName);
// tag0009
         global::System.Threading.Tasks.Task UploadContentAsync(global::Microsoft.OData.Client.DataServiceStreamLink contentStream);
    }

    internal partial class FileFetcher : ItemFetcher , IFileFetcher
    {

        public new async global::System.Threading.Tasks.Task<IFile> ExecuteAsync()
        {
            return await EnsureQuery().ExecuteSingleAsync();
        }
         
        public new IFileFetcher Expand<TTarget>(System.Linq.Expressions.Expression<global::System.Func<IFile, TTarget>> navigationPropertyAccessor)
        {
            return new FileFetcher
            {
                _query = EnsureQuery().Expand(navigationPropertyAccessor)
            };
        }

        private IReadOnlyQueryableSet<IFile> EnsureQuery()
        {
            if (this._query == null)
            {
                this._query = new global::Microsoft.Office365.SharePoint.CoreServices.Extensions.ReadOnlyQueryableSet<IFile>(Context.CreateQuery<File>(GetPath(null)), Context);
            }

            return this._query;
        }

        private global::Microsoft.Office365.SharePoint.CoreServices.Extensions.IReadOnlyQueryableSet<IFile> _query;

        // tag0005
        /// <summary>
        /// There are no comments for content in the schema.
        /// </summary>
        public async global::System.Threading.Tasks.Task<global::Microsoft.OData.Client.DataServiceStreamLink> ContentAsync()
        {
			 if (Context == null) throw new InvalidOperationException("Not Initialized");
            var myUri = GetUrl();
            if (myUri == null)
            {
                throw new global::System.Exception("cannot find entity");
            }

            global::System.Uri requestUriTmp = new global::System.Uri(myUri.ToString() + "/" + "Microsoft.FileServices.content" + "(" +  ")" + "");
            return global::System.Linq.Enumerable.Single(await Context.ExecuteAsync<global::Microsoft.OData.Client.DataServiceStreamLink>(requestUriTmp, "GET", true));
        }
        /// <summary>
        /// There are no comments for copy in the schema.
        /// </summary>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Office365.SharePoint.FileServices.IFile> CopyAsync(string destFolderId, string destFolderPath, string newName)
        {
			 if (Context == null) throw new InvalidOperationException("Not Initialized");

            var myUri = GetUrl();
            if (myUri == null)
            {
                throw new global::System.Exception("cannot find entity");
            }

            global::System.Uri requestUri = new global::System.Uri(myUri.ToString().TrimEnd('/') + "/" + "copy");
            return global::System.Linq.Enumerable.Single(
                await Context.ExecuteAsync<global::Microsoft.Office365.SharePoint.FileServices.File>(requestUri, "POST", true,
                new global::Microsoft.OData.Client.OperationParameter[] { new global::Microsoft.OData.Client.BodyOperationParameter("destFolderId", destFolderId), new global::Microsoft.OData.Client.BodyOperationParameter("destFolderPath", destFolderPath), new global::Microsoft.OData.Client.BodyOperationParameter("newName", newName) }));
        }
        /// <summary>
        /// There are no comments for uploadContent in the schema.
        /// </summary>
        public async  global::System.Threading.Tasks.Task UploadContentAsync(global::Microsoft.OData.Client.DataServiceStreamLink contentStream)
        {
            var myUri = GetUrl();
            if (myUri == null)
            {
                throw new global::System.Exception("cannot find entity");
            }

            global::System.Uri requestUri = new global::System.Uri(myUri.ToString().TrimEnd('/') + "/" + "uploadContent");
            await Context.ExecuteAsync(requestUri, "POST",
                new global::Microsoft.OData.Client.OperationParameter[] { new global::Microsoft.OData.Client.BodyOperationParameter("contentStream", contentStream) });
        }
    }

    [global::Microsoft.OData.Client.Key("Id")]
    public partial class File : Item , IFile, IFileFetcher
    {
        public File() : base() 
        {

        }
        // tag0001

        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never),
            global::System.Obsolete("Use ContentUrl instead")]
        public string contentUrl
        {
            get
            {
                return this.ContentUrl;
            }
            set
            {
                this.ContentUrl = (string)value;
            }
        }
		[Microsoft.Office365.SharePoint.CoreServices.Extensions.LowerCaseProperty]
        // tag0002
        
        public string ContentUrl
        {
            get
            {
                return this._contentUrl;
            }
            set
            {
                if (this._contentUrl != value)
                {
                    this._contentUrl = value;
                    OnPropertyChanged("contentUrl");
                }
            }
        }
        
        private string _contentUrl;


        // tag0005
        /// <summary>
        /// There are no comments for content in the schema.
        /// </summary>
        public async global::System.Threading.Tasks.Task<global::Microsoft.OData.Client.DataServiceStreamLink> ContentAsync()
        {
			 if (Context == null) throw new InvalidOperationException("Not Initialized");
            var myUri = GetUrl();
            if (myUri == null)
            {
                throw new global::System.Exception("cannot find entity");
            }

            global::System.Uri requestUriTmp = new global::System.Uri(myUri.ToString() + "/" + "Microsoft.FileServices.content" + "(" +  ")" + "");
            return global::System.Linq.Enumerable.Single(await Context.ExecuteAsync<global::Microsoft.OData.Client.DataServiceStreamLink>(requestUriTmp, "GET", true));
        }
        /// <summary>
        /// There are no comments for copy in the schema.
        /// </summary>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Office365.SharePoint.FileServices.IFile> CopyAsync(string destFolderId, string destFolderPath, string newName)
        {
			 if (Context == null) throw new InvalidOperationException("Not Initialized");

            var myUri = GetUrl();
            if (myUri == null)
            {
                throw new global::System.Exception("cannot find entity");
            }

            global::System.Uri requestUri = new global::System.Uri(myUri.ToString().TrimEnd('/') + "/" + "copy");
            return global::System.Linq.Enumerable.Single(
                await Context.ExecuteAsync<global::Microsoft.Office365.SharePoint.FileServices.File>(requestUri, "POST", true,
                new global::Microsoft.OData.Client.OperationParameter[] { new global::Microsoft.OData.Client.BodyOperationParameter("destFolderId", destFolderId), new global::Microsoft.OData.Client.BodyOperationParameter("destFolderPath", destFolderPath), new global::Microsoft.OData.Client.BodyOperationParameter("newName", newName) }));
        }
        /// <summary>
        /// There are no comments for uploadContent in the schema.
        /// </summary>
        public async  global::System.Threading.Tasks.Task UploadContentAsync(global::Microsoft.OData.Client.DataServiceStreamLink contentStream)
        {
            var myUri = GetUrl();
            if (myUri == null)
            {
                throw new global::System.Exception("cannot find entity");
            }

            global::System.Uri requestUri = new global::System.Uri(myUri.ToString().TrimEnd('/') + "/" + "uploadContent");
            await Context.ExecuteAsync(requestUri, "POST",
                new global::Microsoft.OData.Client.OperationParameter[] { new global::Microsoft.OData.Client.BodyOperationParameter("contentStream", contentStream) });
        }

        global::System.Threading.Tasks.Task<IFile> IFileFetcher.ExecuteAsync()
        {
            var tsc = new global::System.Threading.Tasks.TaskCompletionSource<IFile> ();
            tsc.SetResult(this);
            return tsc.Task;
        }

        IFileFetcher IFileFetcher.Expand<TTarget>(System.Linq.Expressions.Expression<global::System.Func<IFile, TTarget>> navigationPropertyAccessor)
        {
            return this;
        }
    }

    [Microsoft.Office365.SharePoint.CoreServices.Extensions.LowerCaseProperty]
    public partial interface IFolderFetcher : IItemFetcher
    {
   
        new global::System.Threading.Tasks.Task<IFolder> ExecuteAsync();

        new IFolderFetcher Expand<TTarget>(System.Linq.Expressions.Expression<global::System.Func<IFolder, TTarget>> navigationPropertyAccessor);

        [Microsoft.Office365.SharePoint.CoreServices.Extensions.LowerCaseProperty]
        global::Microsoft.Office365.SharePoint.FileServices.IItemCollection Children
        {
            get; 
        }

// tag0009
        global::System.Threading.Tasks.Task<global::Microsoft.Office365.SharePoint.FileServices.IFolder> CopyAsync(string destFolderId, string destFolderPath, string newName);
    }

    [Microsoft.Office365.SharePoint.CoreServices.Extensions.LowerCaseProperty]
    public partial interface IFolder:  IItem
    {
        [Microsoft.Office365.SharePoint.CoreServices.Extensions.LowerCaseProperty]
        int ChildCount
        {
            get; set;
        }
        [Microsoft.Office365.SharePoint.CoreServices.Extensions.LowerCaseProperty]
        Microsoft.Office365.SharePoint.CoreServices.Extensions.IPagedCollection<global::Microsoft.Office365.SharePoint.FileServices.IItem> Children
        {
            get; 
        }

// tag0009
        global::System.Threading.Tasks.Task<global::Microsoft.Office365.SharePoint.FileServices.IFolder> CopyAsync(string destFolderId, string destFolderPath, string newName);
    }

    internal partial class FolderFetcher : ItemFetcher , IFolderFetcher
    {

        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never),
            global::System.Obsolete("Use Children instead")]
        public global::Microsoft.Office365.SharePoint.FileServices.IItemCollection children
        {
            get
            {
                return this.Children;
            }
        }

		[Microsoft.Office365.SharePoint.CoreServices.Extensions.LowerCaseProperty]

        // tag0003
        public global::Microsoft.Office365.SharePoint.FileServices.IItemCollection Children
        {
            get
            {
                if ((this._children == null))
                {
                    this._children = new global::Microsoft.Office365.SharePoint.FileServices.ItemCollection(
                        Context != null ? Context.CreateQuery<global::Microsoft.Office365.SharePoint.FileServices.Item>(GetPath("children")) : null,
                        Context, 
                        this, 
                        GetPath("children"));
                }

                return this._children;
            }
        }

        private global::Microsoft.Office365.SharePoint.FileServices.IItemCollection _children;

        public new async global::System.Threading.Tasks.Task<IFolder> ExecuteAsync()
        {
            return await EnsureQuery().ExecuteSingleAsync();
        }
         
        public new IFolderFetcher Expand<TTarget>(System.Linq.Expressions.Expression<global::System.Func<IFolder, TTarget>> navigationPropertyAccessor)
        {
            return new FolderFetcher
            {
                _query = EnsureQuery().Expand(navigationPropertyAccessor)
            };
        }

        private IReadOnlyQueryableSet<IFolder> EnsureQuery()
        {
            if (this._query == null)
            {
                this._query = new global::Microsoft.Office365.SharePoint.CoreServices.Extensions.ReadOnlyQueryableSet<IFolder>(Context.CreateQuery<Folder>(GetPath(null)), Context);
            }

            return this._query;
        }

        private global::Microsoft.Office365.SharePoint.CoreServices.Extensions.IReadOnlyQueryableSet<IFolder> _query;

        /// <summary>
        /// There are no comments for copy in the schema.
        /// </summary>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Office365.SharePoint.FileServices.IFolder> CopyAsync(string destFolderId, string destFolderPath, string newName)
        {
			 if (Context == null) throw new InvalidOperationException("Not Initialized");

            var myUri = GetUrl();
            if (myUri == null)
            {
                throw new global::System.Exception("cannot find entity");
            }

            global::System.Uri requestUri = new global::System.Uri(myUri.ToString().TrimEnd('/') + "/" + "copy");
            return global::System.Linq.Enumerable.Single(
                await Context.ExecuteAsync<global::Microsoft.Office365.SharePoint.FileServices.Folder>(requestUri, "POST", true,
                new global::Microsoft.OData.Client.OperationParameter[] { new global::Microsoft.OData.Client.BodyOperationParameter("destFolderId", destFolderId), new global::Microsoft.OData.Client.BodyOperationParameter("destFolderPath", destFolderPath), new global::Microsoft.OData.Client.BodyOperationParameter("newName", newName) }));
        }
    }

    [global::Microsoft.OData.Client.Key("Id")]
    public partial class Folder : Item , IFolder, IFolderFetcher
    {
        public Folder() : base() 
        {

        }
        // tag0001

        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never),
            global::System.Obsolete("Use ChildCount instead")]
        public int childCount
        {
            get
            {
                return this.ChildCount;
            }
            set
            {
                this.ChildCount = (int)value;
            }
        }
		[Microsoft.Office365.SharePoint.CoreServices.Extensions.LowerCaseProperty]
        // tag0002
        
        public int ChildCount
        {
            get
            {
                return this._childCount;
            }
            set
            {
                if (this._childCount != value)
                {
                    this._childCount = value;
                    OnPropertyChanged("childCount");
                }
            }
        }
        
        private int _childCount;


        
        [Microsoft.Office365.SharePoint.CoreServices.Extensions.LowerCaseProperty]
        
        // tag 0014
        global::Microsoft.Office365.SharePoint.FileServices.IItemCollection Microsoft.Office365.SharePoint.FileServices.IFolderFetcher.Children
        {
            get
            {
                if (this._childrenFetcher == null)
                {
                    this._childrenFetcher = new global::Microsoft.Office365.SharePoint.FileServices.ItemCollection(
                        Context != null ? Context.CreateQuery<global::Microsoft.Office365.SharePoint.FileServices.Item>(GetPath("children")) : null,
                        Context,
                        this,
                        GetPath("children"));
                }

                return this._childrenFetcher;
            }
        }
        private global::Microsoft.Office365.SharePoint.FileServices.IItemCollection _childrenFetcher;

        
        
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never),
            global::System.Obsolete("Use Children instead")]
        public global::System.Collections.Generic.IList<global::Microsoft.Office365.SharePoint.FileServices.Item> children
        {
            get
            {
                return this.Children;
            }
            set
            {
                this.Children = value;
            }
        }		
		[Microsoft.Office365.SharePoint.CoreServices.Extensions.LowerCaseProperty]

        // tag0013
        public global::System.Collections.Generic.IList<global::Microsoft.Office365.SharePoint.FileServices.Item> Children
        {
            get
            {
                if (this._children == null)
                {
                    this._children = new EntityCollectionImpl<global::Microsoft.Office365.SharePoint.FileServices.Item>();
                    this._children.SetContainer(() => GetContainingEntity("children"));
                }

                return this._children;
            }
            set
            {
                _children.Clear();
                if (value != null)
                {
                    foreach (var i in value)
                    {
                        _children.Add(i);
                    }
                }
            }
        }

        Microsoft.Office365.SharePoint.CoreServices.Extensions.IPagedCollection<global::Microsoft.Office365.SharePoint.FileServices.IItem> Microsoft.Office365.SharePoint.FileServices.IFolder.Children
        {
            get
            {
                return new Microsoft.Office365.SharePoint.CoreServices.Extensions.PagedCollection<global::Microsoft.Office365.SharePoint.FileServices.IItem, global::Microsoft.Office365.SharePoint.FileServices.Item>(Context, (EntityCollectionImpl<global::Microsoft.Office365.SharePoint.FileServices.Item>) Children);
            }
        }

        private EntityCollectionImpl<global::Microsoft.Office365.SharePoint.FileServices.Item> _children;
        /// <summary>
        /// There are no comments for copy in the schema.
        /// </summary>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Office365.SharePoint.FileServices.IFolder> CopyAsync(string destFolderId, string destFolderPath, string newName)
        {
			 if (Context == null) throw new InvalidOperationException("Not Initialized");

            var myUri = GetUrl();
            if (myUri == null)
            {
                throw new global::System.Exception("cannot find entity");
            }

            global::System.Uri requestUri = new global::System.Uri(myUri.ToString().TrimEnd('/') + "/" + "copy");
            return global::System.Linq.Enumerable.Single(
                await Context.ExecuteAsync<global::Microsoft.Office365.SharePoint.FileServices.Folder>(requestUri, "POST", true,
                new global::Microsoft.OData.Client.OperationParameter[] { new global::Microsoft.OData.Client.BodyOperationParameter("destFolderId", destFolderId), new global::Microsoft.OData.Client.BodyOperationParameter("destFolderPath", destFolderPath), new global::Microsoft.OData.Client.BodyOperationParameter("newName", newName) }));
        }

        global::System.Threading.Tasks.Task<IFolder> IFolderFetcher.ExecuteAsync()
        {
            var tsc = new global::System.Threading.Tasks.TaskCompletionSource<IFolder> ();
            tsc.SetResult(this);
            return tsc.Task;
        }

        IFolderFetcher IFolderFetcher.Expand<TTarget>(System.Linq.Expressions.Expression<global::System.Func<IFolder, TTarget>> navigationPropertyAccessor)
        {
            return this;
        }
    }

    internal partial class ItemCollection: Microsoft.Office365.SharePoint.CoreServices.Extensions.QueryableSet<IItem> , IItemCollection
    {
        internal ItemCollection(
            global::Microsoft.OData.Client.DataServiceQuery inner,
            Microsoft.Office365.SharePoint.CoreServices.Extensions.DataServiceContextWrapper context,
            object entity,
            string path)
            : base(inner, context, entity as EntityBase, path)
        {
        }

        public IItemFetcher GetById (string id)
        {
            return this[id];
        }

        public IItemFetcher this[string id]
        {
            get
            {
                var query = (global::Microsoft.OData.Client.DataServiceQuery) System.Linq.Queryable.Where(Context.CreateQuery<Item>(this._path), (i) => i.Id == id);
                var fetcher = new ItemFetcher();
                var path = query.RequestUri.ToString().Substring(Context.BaseUri.ToString().TrimEnd('/').Length + 1);
                fetcher.Initialize(Context, path);

                return fetcher;
            }
        }

        public global::System.Threading.Tasks.Task<IPagedCollection<IItem>> ExecuteAsync()
        {
            return base.ExecuteAsyncInternal();
        }

        public global::System.Threading.Tasks.Task AddItemAsync(IItem item, bool dontSave = false)
        {
            if (_entity == null)
            {
                Context.AddObject(_path, item);
            }
            else
            {
                var lastSlash = _path.LastIndexOf('/');
                var shortPath = (lastSlash >= 0 && lastSlash < _path.Length - 1) ? _path.Substring(lastSlash + 1) : _path;
                Context.AddRelatedObject(_entity, shortPath, item);
            }

            if (!dontSave)
            {
                return Context.SaveChangesAsync();
            }
            else
            {
                var retVal = new global::System.Threading.Tasks.TaskCompletionSource<object>();
                retVal.SetResult(null);
                return retVal.Task;
            }
        }

        // tag0005
        /// <summary>
        /// There are no comments for getByPath in the schema.
        /// </summary>
        public async global::System.Threading.Tasks.Task<global::Microsoft.Office365.SharePoint.FileServices.IItem> GetByPathAsync(string path)
        {
			 if (Context == null) throw new InvalidOperationException("Not Initialized");
            var myUri = GetUrl();
            if (myUri == null)
            {
                throw new global::System.Exception("cannot find entity");
            }

            global::System.Uri requestUriTmp = new global::System.Uri(myUri.ToString() + "/" + "Microsoft.FileServices.getByPath" + "(" + "path=" + global::Microsoft.OData.Core.UriParser.ODataUriUtils.ConvertToUriLiteral(path, ODataVersion.V4) +  ")" + "");
            return global::System.Linq.Enumerable.Single(await Context.ExecuteAsync<global::Microsoft.Office365.SharePoint.FileServices.Item>(requestUriTmp, "GET", true));
        }
    }

    [Microsoft.Office365.SharePoint.CoreServices.Extensions.LowerCaseProperty]
    public partial interface IItemCollection: IReadOnlyQueryableSetBase<IItem>
    {
        IItemFetcher GetById (string id);

        IItemFetcher this[string id]
        {
            get;
        }

        global::System.Threading.Tasks.Task<IPagedCollection<IItem>> ExecuteAsync();

		/// <param name="dontSave">true to delay saving until batch is saved; false to save immediately.</param>
        global::System.Threading.Tasks.Task AddItemAsync(IItem item, bool dontSave = false);
// tag0009
        global::System.Threading.Tasks.Task<global::Microsoft.Office365.SharePoint.FileServices.IItem> GetByPathAsync(string path);
    }

}



