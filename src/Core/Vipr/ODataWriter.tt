<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="$(SolutionDir)\src\Core\Vipr.Core\bin\debug\Vipr.Core.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="ODataReader.CodeModel" #>
<#@ output extension=".cs" #>
<# ProcessModel(); #>
<#+
    public void PopLastNonCRLFFromOutput(int count) 
    {
        int startIndex = GenerationEnvironment.Length - 1;
        while(startIndex >= 0 && (GenerationEnvironment[startIndex] == '\n' || GenerationEnvironment[startIndex] == '\r'))
        {
            --startIndex;
        }

        startIndex -= (count - 1);
        GenerationEnvironment.Remove(startIndex, count);
    }

    public string GetPrimitiveType(ODataReader.CodeModel.OdcmType odcmType)
    {
        return GetPrimitiveType(odcmType, false);
    }

    public string GetPrimitiveType(ODataReader.CodeModel.OdcmType odcmType, bool isCollection)
    {
        switch(odcmType.Name)
        {
            case "Int32": return "int";
            case "DateTimeOffset": return "System.DateTimeOffset";
            case "String": return "string";
            case "Guid": return "System.Guid";
            case "Boolean": return "bool";
            case "Binary": return "byte[]";
        }

        return "<oops>";
    }

    public string GetType(ODataReader.CodeModel.OdcmType odcmType)
    {
        return GetType(odcmType, false);
    }

    public string GetType(ODataReader.CodeModel.OdcmType odcmType, bool isCollection)
    {
        if(odcmType == null)
        {
            return "void";
        }
        
        if(string.Equals(odcmType.Namespace, "edm", StringComparison.OrdinalIgnoreCase))
        {
            return GetPrimitiveType(odcmType, isCollection);
        }
        
        if(string.Equals(odcmType.Namespace, currentNamespace.Name, StringComparison.OrdinalIgnoreCase))
        {
            return odcmType.Name + (isCollection ? "[]" : string.Empty);
        }
        
        return odcmType.Namespace + "." + odcmType.Name + (isCollection ? "[]" : string.Empty);
    }

    public void ProcessModel() 
    {
        foreach(var odcmNamespace in Model.Namespaces)
        {
            if(string.Equals(odcmNamespace.Name,"edm",StringComparison.OrdinalIgnoreCase))
                continue;

            ProcessNamespace(odcmNamespace);
        }
    }

    ODataReader.CodeModel.OdcmNamespace currentNamespace;

    public void ProcessNamespace(ODataReader.CodeModel.OdcmNamespace odcmNamespace)
    {
        currentNamespace = odcmNamespace;
#>

namespace <#= odcmNamespace.Name #>
{
<#+
        var odcmEnums = from odcmType in odcmNamespace.Types where odcmType is OdcmEnum select odcmType;

        foreach(OdcmEnum odcmEnum in odcmEnums)
        {
            ProcessEnum(odcmEnum);
        }

        var odcmClasses = from odcmType in odcmNamespace.Types where odcmType is OdcmClass select odcmType;

        foreach(OdcmClass odcmClass in odcmClasses)
        {
            ProcessClass(odcmClass);
        }
#>
}
<#+
    }

    public void ProcessEnum(ODataReader.CodeModel.OdcmEnum odcmEnum)
    {
        PushIndent("   ");
#>

public enum <#= odcmEnum.Name #>
{
<#+
        foreach(OdcmEnumMember odcmEnumMember in odcmEnum.Members)
        {
            ProcessEnumMember(odcmEnumMember);
        }
        PopLastNonCRLFFromOutput(1);
#>
}
<#+
        PopIndent();
    }

    public void ProcessEnumMember(ODataReader.CodeModel.OdcmEnumMember odcmEnumMember)
    {
        PushIndent("   ");
#>
<#= odcmEnumMember.Name #> = <#= odcmEnumMember.Value.ToString() #>,
<#+
        PopIndent();
    }

    public void ProcessClass(ODataReader.CodeModel.OdcmClass odcmClass)
    {
        PushIndent("   ");

        if(odcmClass.Base != null)
        {
#>

public <#= odcmClass.IsAbstract ? "abstract " : string.Empty #>class <#= odcmClass.Name #> : <#= odcmClass.Base.Name #>
<#+
        }
        else
        {
#>

public <#= odcmClass.IsAbstract ? "abstract " : string.Empty #>class <#= odcmClass.Name #>
<#+
        }
#>
{
<#+
        foreach(OdcmField odcmField in odcmClass.Fields)
        {
            ProcessField(odcmField);
        }

        foreach(OdcmMethod odcmMethod in odcmClass.Methods)
        {
            ProcessMethod(odcmMethod);
        }
#>
}
<#+
        PopIndent();
    }

    public void ProcessMethod(ODataReader.CodeModel.OdcmMethod odcmMethod)
    {
        PushIndent("   ");
        string returnType = GetType(odcmMethod.ReturnType);
        string parameters = string.Join(", ", (from i in odcmMethod.Parameters select GetType(i.Type, i.IsCollection) + " " + i.Name));

#>

public <#= returnType #> <#= odcmMethod.Name #>(<#= parameters #>)
{
<#+
        PushIndent("   ");
#>
throw new System.NotImplementedException();
<#+
        PopIndent();
#>

}
<#+
        PopIndent();
    }

    public void ProcessField(ODataReader.CodeModel.OdcmField odcmField)
    {
        PushIndent("   ");

        string fieldType = GetType(odcmField.Type, odcmField.IsCollection);

#>

public <#= fieldType #> _<#= odcmField.Name #>;
<#+
        PopIndent();
    }
#>