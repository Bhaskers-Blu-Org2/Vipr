// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 12.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Vipr
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using Vipr.Core.CodeModel;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Git\tonycrider\vipr\src\Core\Vipr\ODataWriter.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "12.0.0.0")]
    public partial class ODataWriter : ODataWriterBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            
            #line 9 "C:\Git\tonycrider\vipr\src\Core\Vipr\ODataWriter.tt"
 ProcessModel(); 
            
            #line default
            #line hidden
            return this.GenerationEnvironment.ToString();
        }
        
        #line 10 "C:\Git\tonycrider\vipr\src\Core\Vipr\ODataWriter.tt"

    public void PopLastNonCRLFFromOutput(int count) 
    {
        int startIndex = GenerationEnvironment.Length - 1;
        while(startIndex >= 0 && (GenerationEnvironment[startIndex] == '\n' || GenerationEnvironment[startIndex] == '\r'))
        {
            --startIndex;
        }

        startIndex -= (count - 1);
        GenerationEnvironment.Remove(startIndex, count);
    }

    public string GetPrimitiveType(OdcmType odcmType)
    {
        return GetPrimitiveType(odcmType, false);
    }

    public string GetPrimitiveType(OdcmType odcmType, bool isCollection)
    {
        switch(odcmType.Name)
        {
            case "Int32": return "int";
            case "DateTimeOffset": return "System.DateTimeOffset";
            case "String": return "string";
            case "Guid": return "System.Guid";
            case "Boolean": return "bool";
            case "Binary": return "byte[]";
        }

        return "<oops>";
    }

    public string GetType(OdcmType odcmType)
    {
        return GetType(odcmType, false);
    }

    public string GetType(OdcmType odcmType, bool isCollection)
    {
        if(odcmType == null)
        {
            return "void";
        }
        
        if(string.Equals(odcmType.Namespace, "edm", StringComparison.OrdinalIgnoreCase))
        {
            return GetPrimitiveType(odcmType, isCollection);
        }
        
        if(string.Equals(odcmType.Namespace, currentNamespace.Name, StringComparison.OrdinalIgnoreCase))
        {
            return odcmType.Name + (isCollection ? "[]" : string.Empty);
        }
        
        return odcmType.Namespace + "." + odcmType.Name + (isCollection ? "[]" : string.Empty);
    }

    public void ProcessModel() 
    {
        foreach(var odcmNamespace in Model.Namespaces)
        {
            if(string.Equals(odcmNamespace.Name,"edm",StringComparison.OrdinalIgnoreCase))
                continue;

            ProcessNamespace(odcmNamespace);
        }
    }

    OdcmNamespace currentNamespace;

    public void ProcessNamespace(OdcmNamespace odcmNamespace)
    {
        currentNamespace = odcmNamespace;

        
        #line default
        #line hidden
        
        #line 84 "C:\Git\tonycrider\vipr\src\Core\Vipr\ODataWriter.tt"
this.Write("\r\nnamespace ");

        
        #line default
        #line hidden
        
        #line 86 "C:\Git\tonycrider\vipr\src\Core\Vipr\ODataWriter.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(odcmNamespace.Name));

        
        #line default
        #line hidden
        
        #line 86 "C:\Git\tonycrider\vipr\src\Core\Vipr\ODataWriter.tt"
this.Write("\r\n{\r\n");

        
        #line default
        #line hidden
        
        #line 88 "C:\Git\tonycrider\vipr\src\Core\Vipr\ODataWriter.tt"

        var odcmEnums = from odcmType in odcmNamespace.Types where odcmType is OdcmEnum select odcmType;

        foreach(OdcmEnum odcmEnum in odcmEnums)
        {
            ProcessEnum(odcmEnum);
        }

        var odcmClasses = from odcmType in odcmNamespace.Types where odcmType is OdcmClass select odcmType;

        foreach(OdcmClass odcmClass in odcmClasses)
        {
            ProcessClass(odcmClass);
        }

        
        #line default
        #line hidden
        
        #line 102 "C:\Git\tonycrider\vipr\src\Core\Vipr\ODataWriter.tt"
this.Write("}\r\n");

        
        #line default
        #line hidden
        
        #line 104 "C:\Git\tonycrider\vipr\src\Core\Vipr\ODataWriter.tt"

    }

    public void ProcessEnum(OdcmEnum odcmEnum)
    {
        PushIndent("   ");

        
        #line default
        #line hidden
        
        #line 110 "C:\Git\tonycrider\vipr\src\Core\Vipr\ODataWriter.tt"
this.Write("\r\npublic enum ");

        
        #line default
        #line hidden
        
        #line 112 "C:\Git\tonycrider\vipr\src\Core\Vipr\ODataWriter.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(odcmEnum.Name));

        
        #line default
        #line hidden
        
        #line 112 "C:\Git\tonycrider\vipr\src\Core\Vipr\ODataWriter.tt"
this.Write("\r\n{\r\n");

        
        #line default
        #line hidden
        
        #line 114 "C:\Git\tonycrider\vipr\src\Core\Vipr\ODataWriter.tt"

        foreach(OdcmEnumMember odcmEnumMember in odcmEnum.Members)
        {
            ProcessEnumMember(odcmEnumMember);
        }
        PopLastNonCRLFFromOutput(1);

        
        #line default
        #line hidden
        
        #line 120 "C:\Git\tonycrider\vipr\src\Core\Vipr\ODataWriter.tt"
this.Write("}\r\n");

        
        #line default
        #line hidden
        
        #line 122 "C:\Git\tonycrider\vipr\src\Core\Vipr\ODataWriter.tt"

        PopIndent();
    }

    public void ProcessEnumMember(OdcmEnumMember odcmEnumMember)
    {
        PushIndent("   ");

        
        #line default
        #line hidden
        
        #line 130 "C:\Git\tonycrider\vipr\src\Core\Vipr\ODataWriter.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(odcmEnumMember.Name));

        
        #line default
        #line hidden
        
        #line 130 "C:\Git\tonycrider\vipr\src\Core\Vipr\ODataWriter.tt"
this.Write(" = ");

        
        #line default
        #line hidden
        
        #line 130 "C:\Git\tonycrider\vipr\src\Core\Vipr\ODataWriter.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(odcmEnumMember.Value.ToString()));

        
        #line default
        #line hidden
        
        #line 130 "C:\Git\tonycrider\vipr\src\Core\Vipr\ODataWriter.tt"
this.Write(",\r\n");

        
        #line default
        #line hidden
        
        #line 131 "C:\Git\tonycrider\vipr\src\Core\Vipr\ODataWriter.tt"

        PopIndent();
    }

    public void ProcessClass(OdcmClass odcmClass)
    {
        PushIndent("   ");

        if(odcmClass.Base != null)
        {

        
        #line default
        #line hidden
        
        #line 141 "C:\Git\tonycrider\vipr\src\Core\Vipr\ODataWriter.tt"
this.Write("\r\npublic ");

        
        #line default
        #line hidden
        
        #line 143 "C:\Git\tonycrider\vipr\src\Core\Vipr\ODataWriter.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(odcmClass.IsAbstract ? "abstract " : string.Empty));

        
        #line default
        #line hidden
        
        #line 143 "C:\Git\tonycrider\vipr\src\Core\Vipr\ODataWriter.tt"
this.Write("class ");

        
        #line default
        #line hidden
        
        #line 143 "C:\Git\tonycrider\vipr\src\Core\Vipr\ODataWriter.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(odcmClass.Name));

        
        #line default
        #line hidden
        
        #line 143 "C:\Git\tonycrider\vipr\src\Core\Vipr\ODataWriter.tt"
this.Write(" : ");

        
        #line default
        #line hidden
        
        #line 143 "C:\Git\tonycrider\vipr\src\Core\Vipr\ODataWriter.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(odcmClass.Base.Name));

        
        #line default
        #line hidden
        
        #line 143 "C:\Git\tonycrider\vipr\src\Core\Vipr\ODataWriter.tt"
this.Write("\r\n");

        
        #line default
        #line hidden
        
        #line 144 "C:\Git\tonycrider\vipr\src\Core\Vipr\ODataWriter.tt"

        }
        else
        {

        
        #line default
        #line hidden
        
        #line 148 "C:\Git\tonycrider\vipr\src\Core\Vipr\ODataWriter.tt"
this.Write("\r\npublic ");

        
        #line default
        #line hidden
        
        #line 150 "C:\Git\tonycrider\vipr\src\Core\Vipr\ODataWriter.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(odcmClass.IsAbstract ? "abstract " : string.Empty));

        
        #line default
        #line hidden
        
        #line 150 "C:\Git\tonycrider\vipr\src\Core\Vipr\ODataWriter.tt"
this.Write("class ");

        
        #line default
        #line hidden
        
        #line 150 "C:\Git\tonycrider\vipr\src\Core\Vipr\ODataWriter.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(odcmClass.Name));

        
        #line default
        #line hidden
        
        #line 150 "C:\Git\tonycrider\vipr\src\Core\Vipr\ODataWriter.tt"
this.Write("\r\n");

        
        #line default
        #line hidden
        
        #line 151 "C:\Git\tonycrider\vipr\src\Core\Vipr\ODataWriter.tt"

        }

        
        #line default
        #line hidden
        
        #line 153 "C:\Git\tonycrider\vipr\src\Core\Vipr\ODataWriter.tt"
this.Write("{\r\n");

        
        #line default
        #line hidden
        
        #line 155 "C:\Git\tonycrider\vipr\src\Core\Vipr\ODataWriter.tt"

        foreach(OdcmProperty odcmField in odcmClass.Properties)
        {
            ProcessField(odcmField);
        }

        foreach(OdcmMethod odcmMethod in odcmClass.Methods)
        {
            ProcessMethod(odcmMethod);
        }

        
        #line default
        #line hidden
        
        #line 165 "C:\Git\tonycrider\vipr\src\Core\Vipr\ODataWriter.tt"
this.Write("}\r\n");

        
        #line default
        #line hidden
        
        #line 167 "C:\Git\tonycrider\vipr\src\Core\Vipr\ODataWriter.tt"

        PopIndent();
    }

    public void ProcessMethod(OdcmMethod odcmMethod)
    {
        PushIndent("   ");
        string returnType = GetType(odcmMethod.ReturnType);
        string parameters = string.Join(", ", (from i in odcmMethod.Parameters select GetType(i.Type, i.IsCollection) + " " + i.Name));


        
        #line default
        #line hidden
        
        #line 177 "C:\Git\tonycrider\vipr\src\Core\Vipr\ODataWriter.tt"
this.Write("\r\npublic ");

        
        #line default
        #line hidden
        
        #line 179 "C:\Git\tonycrider\vipr\src\Core\Vipr\ODataWriter.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(returnType));

        
        #line default
        #line hidden
        
        #line 179 "C:\Git\tonycrider\vipr\src\Core\Vipr\ODataWriter.tt"
this.Write(" ");

        
        #line default
        #line hidden
        
        #line 179 "C:\Git\tonycrider\vipr\src\Core\Vipr\ODataWriter.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(odcmMethod.Name));

        
        #line default
        #line hidden
        
        #line 179 "C:\Git\tonycrider\vipr\src\Core\Vipr\ODataWriter.tt"
this.Write("(");

        
        #line default
        #line hidden
        
        #line 179 "C:\Git\tonycrider\vipr\src\Core\Vipr\ODataWriter.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(parameters));

        
        #line default
        #line hidden
        
        #line 179 "C:\Git\tonycrider\vipr\src\Core\Vipr\ODataWriter.tt"
this.Write(")\r\n{\r\n");

        
        #line default
        #line hidden
        
        #line 181 "C:\Git\tonycrider\vipr\src\Core\Vipr\ODataWriter.tt"

        PushIndent("   ");

        
        #line default
        #line hidden
        
        #line 183 "C:\Git\tonycrider\vipr\src\Core\Vipr\ODataWriter.tt"
this.Write("throw new System.NotImplementedException();\r\n");

        
        #line default
        #line hidden
        
        #line 185 "C:\Git\tonycrider\vipr\src\Core\Vipr\ODataWriter.tt"

        PopIndent();

        
        #line default
        #line hidden
        
        #line 187 "C:\Git\tonycrider\vipr\src\Core\Vipr\ODataWriter.tt"
this.Write("\r\n}\r\n");

        
        #line default
        #line hidden
        
        #line 190 "C:\Git\tonycrider\vipr\src\Core\Vipr\ODataWriter.tt"

        PopIndent();
    }

    public void ProcessField(OdcmProperty odcmField)
    {
        PushIndent("   ");

        string fieldType = GetType(odcmField.Type, odcmField.IsCollection);


        
        #line default
        #line hidden
        
        #line 200 "C:\Git\tonycrider\vipr\src\Core\Vipr\ODataWriter.tt"
this.Write("\r\npublic ");

        
        #line default
        #line hidden
        
        #line 202 "C:\Git\tonycrider\vipr\src\Core\Vipr\ODataWriter.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(fieldType));

        
        #line default
        #line hidden
        
        #line 202 "C:\Git\tonycrider\vipr\src\Core\Vipr\ODataWriter.tt"
this.Write(" _");

        
        #line default
        #line hidden
        
        #line 202 "C:\Git\tonycrider\vipr\src\Core\Vipr\ODataWriter.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(odcmField.Name));

        
        #line default
        #line hidden
        
        #line 202 "C:\Git\tonycrider\vipr\src\Core\Vipr\ODataWriter.tt"
this.Write(";\r\n");

        
        #line default
        #line hidden
        
        #line 203 "C:\Git\tonycrider\vipr\src\Core\Vipr\ODataWriter.tt"

        PopIndent();
    }

        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "12.0.0.0")]
    public class ODataWriterBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
